// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObjectHashId.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TYPEOBJECTHASHID_H_
#define _FAST_DDS_GENERATED_TYPEOBJECTHASHID_H_

#include "XTypesBase.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPEOBJECTHASHID_SOURCE)
#define TYPEOBJECTHASHID_DllAPI __declspec( dllexport )
#else
#define TYPEOBJECTHASHID_DllAPI __declspec( dllimport )
#endif // TYPEOBJECTHASHID_SOURCE
#else
#define TYPEOBJECTHASHID_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPEOBJECTHASHID_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {
            /*!
             * @brief This class represents the union TypeObjectHashId defined by the user in the IDL file.
             * @ingroup TypeObjectHashId
             */
            class TypeObjectHashId
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeObjectHashId();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeObjectHashId();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObjectHashId that will be copied.
                 */
                eProsima_user_DllExport TypeObjectHashId(
                        const TypeObjectHashId& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObjectHashId that will be copied.
                 */
                eProsima_user_DllExport TypeObjectHashId(
                        TypeObjectHashId&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObjectHashId that will be copied.
                 */
                eProsima_user_DllExport TypeObjectHashId& operator =(
                        const TypeObjectHashId& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObjectHashId that will be copied.
                 */
                eProsima_user_DllExport TypeObjectHashId& operator =(
                        TypeObjectHashId&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeObjectHashId object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeObjectHashId& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeObjectHashId object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeObjectHashId& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function copies the value in member hash
                 * @param _hash New value to be copied in member hash
                 */
                eProsima_user_DllExport void hash(
                        const eprosima::fastrtps::types::EquivalenceHash& _hash);

                /*!
                 * @brief This function moves the value in member hash
                 * @param _hash New value to be moved in member hash
                 */
                eProsima_user_DllExport void hash(
                        eprosima::fastrtps::types::EquivalenceHash&& _hash);

                /*!
                 * @brief This function returns a constant reference to member hash
                 * @return Constant reference to member hash
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::EquivalenceHash& hash() const;

                /*!
                 * @brief This function returns a reference to member hash
                 * @return Reference to member hash
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EquivalenceHash& hash();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeObjectHashId& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                eprosima::fastrtps::types::EquivalenceHash m_hash;
            };
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_TYPEOBJECTHASHID_H_

