// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeIdentifier.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TYPEIDENTIFIER_H_
#define _FAST_DDS_GENERATED_TYPEIDENTIFIER_H_

#include "TypeIdentifierTypes.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPEIDENTIFIER_SOURCE)
#define TYPEIDENTIFIER_DllAPI __declspec( dllexport )
#else
#define TYPEIDENTIFIER_DllAPI __declspec( dllimport )
#endif // TYPEIDENTIFIER_SOURCE
#else
#define TYPEIDENTIFIER_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPEIDENTIFIER_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {
            /*!
             * @brief This class represents the union TypeIdentifier defined by the user in the IDL file.
             * @ingroup TypeIdentifier
             */
            class TypeIdentifier
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeIdentifier();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeIdentifier();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifier that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifier(
                        const TypeIdentifier& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifier that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifier(
                        TypeIdentifier&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifier that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifier& operator =(
                        const TypeIdentifier& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifier that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifier& operator =(
                        TypeIdentifier&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifier object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeIdentifier& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifier object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeIdentifier& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function copies the value in member string_sdefn
                 * @param _string_sdefn New value to be copied in member string_sdefn
                 */
                eProsima_user_DllExport void string_sdefn(
                        const eprosima::fastrtps::types::StringSTypeDefn& _string_sdefn);

                /*!
                 * @brief This function moves the value in member string_sdefn
                 * @param _string_sdefn New value to be moved in member string_sdefn
                 */
                eProsima_user_DllExport void string_sdefn(
                        eprosima::fastrtps::types::StringSTypeDefn&& _string_sdefn);

                /*!
                 * @brief This function returns a constant reference to member string_sdefn
                 * @return Constant reference to member string_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::StringSTypeDefn& string_sdefn() const;

                /*!
                 * @brief This function returns a reference to member string_sdefn
                 * @return Reference to member string_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StringSTypeDefn& string_sdefn();
                /*!
                 * @brief This function copies the value in member string_ldefn
                 * @param _string_ldefn New value to be copied in member string_ldefn
                 */
                eProsima_user_DllExport void string_ldefn(
                        const eprosima::fastrtps::types::StringLTypeDefn& _string_ldefn);

                /*!
                 * @brief This function moves the value in member string_ldefn
                 * @param _string_ldefn New value to be moved in member string_ldefn
                 */
                eProsima_user_DllExport void string_ldefn(
                        eprosima::fastrtps::types::StringLTypeDefn&& _string_ldefn);

                /*!
                 * @brief This function returns a constant reference to member string_ldefn
                 * @return Constant reference to member string_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::StringLTypeDefn& string_ldefn() const;

                /*!
                 * @brief This function returns a reference to member string_ldefn
                 * @return Reference to member string_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StringLTypeDefn& string_ldefn();
                /*!
                 * @brief This function copies the value in member seq_sdefn
                 * @param _seq_sdefn New value to be copied in member seq_sdefn
                 */
                eProsima_user_DllExport void seq_sdefn(
                        const eprosima::fastrtps::types::PlainSequenceSElemDefn& _seq_sdefn);

                /*!
                 * @brief This function moves the value in member seq_sdefn
                 * @param _seq_sdefn New value to be moved in member seq_sdefn
                 */
                eProsima_user_DllExport void seq_sdefn(
                        eprosima::fastrtps::types::PlainSequenceSElemDefn&& _seq_sdefn);

                /*!
                 * @brief This function returns a constant reference to member seq_sdefn
                 * @return Constant reference to member seq_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainSequenceSElemDefn& seq_sdefn() const;

                /*!
                 * @brief This function returns a reference to member seq_sdefn
                 * @return Reference to member seq_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainSequenceSElemDefn& seq_sdefn();
                /*!
                 * @brief This function copies the value in member seq_ldefn
                 * @param _seq_ldefn New value to be copied in member seq_ldefn
                 */
                eProsima_user_DllExport void seq_ldefn(
                        const eprosima::fastrtps::types::PlainSequenceLElemDefn& _seq_ldefn);

                /*!
                 * @brief This function moves the value in member seq_ldefn
                 * @param _seq_ldefn New value to be moved in member seq_ldefn
                 */
                eProsima_user_DllExport void seq_ldefn(
                        eprosima::fastrtps::types::PlainSequenceLElemDefn&& _seq_ldefn);

                /*!
                 * @brief This function returns a constant reference to member seq_ldefn
                 * @return Constant reference to member seq_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainSequenceLElemDefn& seq_ldefn() const;

                /*!
                 * @brief This function returns a reference to member seq_ldefn
                 * @return Reference to member seq_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainSequenceLElemDefn& seq_ldefn();
                /*!
                 * @brief This function copies the value in member array_sdefn
                 * @param _array_sdefn New value to be copied in member array_sdefn
                 */
                eProsima_user_DllExport void array_sdefn(
                        const eprosima::fastrtps::types::PlainArraySElemDefn& _array_sdefn);

                /*!
                 * @brief This function moves the value in member array_sdefn
                 * @param _array_sdefn New value to be moved in member array_sdefn
                 */
                eProsima_user_DllExport void array_sdefn(
                        eprosima::fastrtps::types::PlainArraySElemDefn&& _array_sdefn);

                /*!
                 * @brief This function returns a constant reference to member array_sdefn
                 * @return Constant reference to member array_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainArraySElemDefn& array_sdefn() const;

                /*!
                 * @brief This function returns a reference to member array_sdefn
                 * @return Reference to member array_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainArraySElemDefn& array_sdefn();
                /*!
                 * @brief This function copies the value in member array_ldefn
                 * @param _array_ldefn New value to be copied in member array_ldefn
                 */
                eProsima_user_DllExport void array_ldefn(
                        const eprosima::fastrtps::types::PlainArrayLElemDefn& _array_ldefn);

                /*!
                 * @brief This function moves the value in member array_ldefn
                 * @param _array_ldefn New value to be moved in member array_ldefn
                 */
                eProsima_user_DllExport void array_ldefn(
                        eprosima::fastrtps::types::PlainArrayLElemDefn&& _array_ldefn);

                /*!
                 * @brief This function returns a constant reference to member array_ldefn
                 * @return Constant reference to member array_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainArrayLElemDefn& array_ldefn() const;

                /*!
                 * @brief This function returns a reference to member array_ldefn
                 * @return Reference to member array_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainArrayLElemDefn& array_ldefn();
                /*!
                 * @brief This function copies the value in member map_sdefn
                 * @param _map_sdefn New value to be copied in member map_sdefn
                 */
                eProsima_user_DllExport void map_sdefn(
                        const eprosima::fastrtps::types::PlainMapSTypeDefn& _map_sdefn);

                /*!
                 * @brief This function moves the value in member map_sdefn
                 * @param _map_sdefn New value to be moved in member map_sdefn
                 */
                eProsima_user_DllExport void map_sdefn(
                        eprosima::fastrtps::types::PlainMapSTypeDefn&& _map_sdefn);

                /*!
                 * @brief This function returns a constant reference to member map_sdefn
                 * @return Constant reference to member map_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainMapSTypeDefn& map_sdefn() const;

                /*!
                 * @brief This function returns a reference to member map_sdefn
                 * @return Reference to member map_sdefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainMapSTypeDefn& map_sdefn();
                /*!
                 * @brief This function copies the value in member map_ldefn
                 * @param _map_ldefn New value to be copied in member map_ldefn
                 */
                eProsima_user_DllExport void map_ldefn(
                        const eprosima::fastrtps::types::PlainMapLTypeDefn& _map_ldefn);

                /*!
                 * @brief This function moves the value in member map_ldefn
                 * @param _map_ldefn New value to be moved in member map_ldefn
                 */
                eProsima_user_DllExport void map_ldefn(
                        eprosima::fastrtps::types::PlainMapLTypeDefn&& _map_ldefn);

                /*!
                 * @brief This function returns a constant reference to member map_ldefn
                 * @return Constant reference to member map_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainMapLTypeDefn& map_ldefn() const;

                /*!
                 * @brief This function returns a reference to member map_ldefn
                 * @return Reference to member map_ldefn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainMapLTypeDefn& map_ldefn();
                /*!
                 * @brief This function copies the value in member sc_component_id
                 * @param _sc_component_id New value to be copied in member sc_component_id
                 */
                eProsima_user_DllExport void sc_component_id(
                        const eprosima::fastrtps::types::StronglyConnectedComponentId& _sc_component_id);

                /*!
                 * @brief This function moves the value in member sc_component_id
                 * @param _sc_component_id New value to be moved in member sc_component_id
                 */
                eProsima_user_DllExport void sc_component_id(
                        eprosima::fastrtps::types::StronglyConnectedComponentId&& _sc_component_id);

                /*!
                 * @brief This function returns a constant reference to member sc_component_id
                 * @return Constant reference to member sc_component_id
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::StronglyConnectedComponentId& sc_component_id() const;

                /*!
                 * @brief This function returns a reference to member sc_component_id
                 * @return Reference to member sc_component_id
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StronglyConnectedComponentId& sc_component_id();
                /*!
                 * @brief This function copies the value in member equivalence_hash
                 * @param _equivalence_hash New value to be copied in member equivalence_hash
                 */
                eProsima_user_DllExport void equivalence_hash(
                        const eprosima::fastrtps::types::EquivalenceHash& _equivalence_hash);

                /*!
                 * @brief This function moves the value in member equivalence_hash
                 * @param _equivalence_hash New value to be moved in member equivalence_hash
                 */
                eProsima_user_DllExport void equivalence_hash(
                        eprosima::fastrtps::types::EquivalenceHash&& _equivalence_hash);

                /*!
                 * @brief This function returns a constant reference to member equivalence_hash
                 * @return Constant reference to member equivalence_hash
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::EquivalenceHash& equivalence_hash() const;

                /*!
                 * @brief This function returns a reference to member equivalence_hash
                 * @return Reference to member equivalence_hash
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EquivalenceHash& equivalence_hash();
                /*!
                 * @brief This function copies the value in member extended_defn
                 * @param _extended_defn New value to be copied in member extended_defn
                 */
                eProsima_user_DllExport void extended_defn(
                        const eprosima::fastrtps::types::ExtendedTypeDefn& _extended_defn);

                /*!
                 * @brief This function moves the value in member extended_defn
                 * @param _extended_defn New value to be moved in member extended_defn
                 */
                eProsima_user_DllExport void extended_defn(
                        eprosima::fastrtps::types::ExtendedTypeDefn&& _extended_defn);

                /*!
                 * @brief This function returns a constant reference to member extended_defn
                 * @return Constant reference to member extended_defn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::ExtendedTypeDefn& extended_defn() const;

                /*!
                 * @brief This function returns a reference to member extended_defn
                 * @return Reference to member extended_defn
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::ExtendedTypeDefn& extended_defn();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeIdentifier& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                eprosima::fastrtps::types::StringSTypeDefn m_string_sdefn;
                eprosima::fastrtps::types::StringLTypeDefn m_string_ldefn;
                eprosima::fastrtps::types::PlainSequenceSElemDefn m_seq_sdefn;
                eprosima::fastrtps::types::PlainSequenceLElemDefn m_seq_ldefn;
                eprosima::fastrtps::types::PlainArraySElemDefn m_array_sdefn;
                eprosima::fastrtps::types::PlainArrayLElemDefn m_array_ldefn;
                eprosima::fastrtps::types::PlainMapSTypeDefn m_map_sdefn;
                eprosima::fastrtps::types::PlainMapLTypeDefn m_map_ldefn;
                eprosima::fastrtps::types::StronglyConnectedComponentId m_sc_component_id;
                eprosima::fastrtps::types::EquivalenceHash m_equivalence_hash;
                eprosima::fastrtps::types::ExtendedTypeDefn m_extended_defn;
            };
            typedef std::vector<eprosima::fastrtps::types::TypeIdentifier> TypeIdentifierSeq;
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_TYPEIDENTIFIER_H_

