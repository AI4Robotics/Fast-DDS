// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObject.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEOBJECT_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEOBJECT_H_

#include "AnnotationParameterValue.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPEOBJECT_SOURCE)
#define TYPEOBJECT_DllAPI __declspec( dllexport )
#else
#define TYPEOBJECT_DllAPI __declspec( dllimport )
#endif // TYPEOBJECT_SOURCE
#else
#define TYPEOBJECT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPEOBJECT_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {
            /*!
             * @brief This class represents the structure CommonStructMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonStructMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonStructMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonStructMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonStructMember that will be copied.
                 */
                eProsima_user_DllExport CommonStructMember(
                        const CommonStructMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonStructMember that will be copied.
                 */
                eProsima_user_DllExport CommonStructMember(
                        CommonStructMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonStructMember that will be copied.
                 */
                eProsima_user_DllExport CommonStructMember& operator =(
                        const CommonStructMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonStructMember that will be copied.
                 */
                eProsima_user_DllExport CommonStructMember& operator =(
                        CommonStructMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonStructMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonStructMember& x) const;

                /*!
                 * @brief This function sets a value in member member_id
                 * @param _member_id New value for member member_id
                 */
                eProsima_user_DllExport void member_id(
                        eprosima::fastrtps::types::MemberId _member_id);

                /*!
                 * @brief This function returns the value of member member_id
                 * @return Value of member member_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberId member_id() const;

                /*!
                 * @brief This function returns a reference to member member_id
                 * @return Reference to member member_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberId& member_id();

                /*!
                 * @brief This function sets a value in member member_flags
                 * @param _member_flags New value for member member_flags
                 */
                eProsima_user_DllExport void member_flags(
                        eprosima::fastrtps::types::StructMemberFlag _member_flags);

                /*!
                 * @brief This function returns the value of member member_flags
                 * @return Value of member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructMemberFlag member_flags() const;

                /*!
                 * @brief This function returns a reference to member member_flags
                 * @return Reference to member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructMemberFlag& member_flags();

                /*!
                 * @brief This function copies the value in member member_type_id
                 * @param _member_type_id New value to be copied in member member_type_id
                 */
                eProsima_user_DllExport void member_type_id(
                        const eprosima::fastrtps::types::TypeIdentifier& _member_type_id);

                /*!
                 * @brief This function moves the value in member member_type_id
                 * @param _member_type_id New value to be moved in member member_type_id
                 */
                eProsima_user_DllExport void member_type_id(
                        eprosima::fastrtps::types::TypeIdentifier&& _member_type_id);

                /*!
                 * @brief This function returns a constant reference to member member_type_id
                 * @return Constant reference to member member_type_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& member_type_id() const;

                /*!
                 * @brief This function returns a reference to member member_type_id
                 * @return Reference to member member_type_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& member_type_id();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonStructMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::MemberId m_member_id;
                eprosima::fastrtps::types::StructMemberFlag m_member_flags;
                eprosima::fastrtps::types::TypeIdentifier m_member_type_id;

            };
            /*!
             * @brief This class represents the structure CompleteMemberDetail defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteMemberDetail
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteMemberDetail();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteMemberDetail();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMemberDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteMemberDetail(
                        const CompleteMemberDetail& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMemberDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteMemberDetail(
                        CompleteMemberDetail&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMemberDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteMemberDetail& operator =(
                        const CompleteMemberDetail& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMemberDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteMemberDetail& operator =(
                        CompleteMemberDetail&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteMemberDetail object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteMemberDetail& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteMemberDetail object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteMemberDetail& x) const;

                /*!
                 * @brief This function copies the value in member name
                 * @param _name New value to be copied in member name
                 */
                eProsima_user_DllExport void name(
                        const eprosima::fastrtps::types::MemberName& _name);

                /*!
                 * @brief This function moves the value in member name
                 * @param _name New value to be moved in member name
                 */
                eProsima_user_DllExport void name(
                        eprosima::fastrtps::types::MemberName&& _name);

                /*!
                 * @brief This function returns a constant reference to member name
                 * @return Constant reference to member name
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MemberName& name() const;

                /*!
                 * @brief This function returns a reference to member name
                 * @return Reference to member name
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberName& name();
                /*!
                 * @brief This function copies the value in member ann_builtin
                 * @param _ann_builtin New value to be copied in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& _ann_builtin);

                /*!
                 * @brief This function moves the value in member ann_builtin
                 * @param _ann_builtin New value to be moved in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations&& _ann_builtin);

                /*!
                 * @brief This function returns a constant reference to member ann_builtin
                 * @return Constant reference to member ann_builtin
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin() const;

                /*!
                 * @brief This function returns a reference to member ann_builtin
                 * @return Reference to member ann_builtin
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin();
                /*!
                 * @brief This function copies the value in member ann_custom
                 * @param _ann_custom New value to be copied in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        const eprosima::fastrtps::types::AppliedAnnotationSeq& _ann_custom);

                /*!
                 * @brief This function moves the value in member ann_custom
                 * @param _ann_custom New value to be moved in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        eprosima::fastrtps::types::AppliedAnnotationSeq&& _ann_custom);

                /*!
                 * @brief This function returns a constant reference to member ann_custom
                 * @return Constant reference to member ann_custom
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom() const;

                /*!
                 * @brief This function returns a reference to member ann_custom
                 * @return Reference to member ann_custom
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteMemberDetail& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::MemberName m_name;
                eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations m_ann_builtin;
                eprosima::fastrtps::types::AppliedAnnotationSeq m_ann_custom;

            };
            /*!
             * @brief This class represents the structure MinimalMemberDetail defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalMemberDetail
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalMemberDetail();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalMemberDetail();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMemberDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalMemberDetail(
                        const MinimalMemberDetail& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMemberDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalMemberDetail(
                        MinimalMemberDetail&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMemberDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalMemberDetail& operator =(
                        const MinimalMemberDetail& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMemberDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalMemberDetail& operator =(
                        MinimalMemberDetail&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalMemberDetail object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalMemberDetail& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalMemberDetail object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalMemberDetail& x) const;

                /*!
                 * @brief This function copies the value in member name_hash
                 * @param _name_hash New value to be copied in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        const eprosima::fastrtps::types::NameHash& _name_hash);

                /*!
                 * @brief This function moves the value in member name_hash
                 * @param _name_hash New value to be moved in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        eprosima::fastrtps::types::NameHash&& _name_hash);

                /*!
                 * @brief This function returns a constant reference to member name_hash
                 * @return Constant reference to member name_hash
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::NameHash& name_hash() const;

                /*!
                 * @brief This function returns a reference to member name_hash
                 * @return Reference to member name_hash
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::NameHash& name_hash();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalMemberDetail& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::NameHash m_name_hash;

            };
            /*!
             * @brief This class represents the structure CompleteStructMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteStructMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteStructMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteStructMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructMember that will be copied.
                 */
                eProsima_user_DllExport CompleteStructMember(
                        const CompleteStructMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructMember that will be copied.
                 */
                eProsima_user_DllExport CompleteStructMember(
                        CompleteStructMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructMember that will be copied.
                 */
                eProsima_user_DllExport CompleteStructMember& operator =(
                        const CompleteStructMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructMember that will be copied.
                 */
                eProsima_user_DllExport CompleteStructMember& operator =(
                        CompleteStructMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteStructMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteStructMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonStructMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonStructMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonStructMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonStructMember& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMemberDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteStructMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonStructMember m_common;
                eprosima::fastrtps::types::CompleteMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteStructMember> CompleteStructMemberSeq;
            /*!
             * @brief This class represents the structure MinimalStructMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalStructMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalStructMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalStructMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructMember that will be copied.
                 */
                eProsima_user_DllExport MinimalStructMember(
                        const MinimalStructMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructMember that will be copied.
                 */
                eProsima_user_DllExport MinimalStructMember(
                        MinimalStructMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructMember that will be copied.
                 */
                eProsima_user_DllExport MinimalStructMember& operator =(
                        const MinimalStructMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructMember that will be copied.
                 */
                eProsima_user_DllExport MinimalStructMember& operator =(
                        MinimalStructMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalStructMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalStructMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonStructMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonStructMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonStructMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonStructMember& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalMemberDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalStructMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonStructMember m_common;
                eprosima::fastrtps::types::MinimalMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalStructMember> MinimalStructMemberSeq;
            /*!
             * @brief This class represents the structure AppliedBuiltinTypeAnnotations defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class AppliedBuiltinTypeAnnotations
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AppliedBuiltinTypeAnnotations();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AppliedBuiltinTypeAnnotations();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinTypeAnnotations(
                        const AppliedBuiltinTypeAnnotations& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinTypeAnnotations(
                        AppliedBuiltinTypeAnnotations&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinTypeAnnotations& operator =(
                        const AppliedBuiltinTypeAnnotations& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinTypeAnnotations& operator =(
                        AppliedBuiltinTypeAnnotations&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AppliedBuiltinTypeAnnotations& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AppliedBuiltinTypeAnnotations& x) const;

                /*!
                 * @brief This function copies the value in member verbatim
                 * @param _verbatim New value to be copied in member verbatim
                 */
                eProsima_user_DllExport void verbatim(
                        const eprosima::fastrtps::types::AppliedVerbatimAnnotation& _verbatim);

                /*!
                 * @brief This function moves the value in member verbatim
                 * @param _verbatim New value to be moved in member verbatim
                 */
                eProsima_user_DllExport void verbatim(
                        eprosima::fastrtps::types::AppliedVerbatimAnnotation&& _verbatim);

                /*!
                 * @brief This function returns a constant reference to member verbatim
                 * @return Constant reference to member verbatim
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedVerbatimAnnotation& verbatim() const;

                /*!
                 * @brief This function returns a reference to member verbatim
                 * @return Reference to member verbatim
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedVerbatimAnnotation& verbatim();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AppliedVerbatimAnnotation m_verbatim;

            };
            /*!
             * @brief This class represents the structure MinimalTypeDetail defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalTypeDetail
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalTypeDetail();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalTypeDetail();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeDetail(
                        const MinimalTypeDetail& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeDetail(
                        MinimalTypeDetail&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeDetail& operator =(
                        const MinimalTypeDetail& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeDetail that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeDetail& operator =(
                        MinimalTypeDetail&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalTypeDetail object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalTypeDetail& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalTypeDetail object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalTypeDetail& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalTypeDetail& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the structure CompleteTypeDetail defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteTypeDetail
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteTypeDetail();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteTypeDetail();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeDetail(
                        const CompleteTypeDetail& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeDetail(
                        CompleteTypeDetail&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeDetail& operator =(
                        const CompleteTypeDetail& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeDetail& operator =(
                        CompleteTypeDetail&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteTypeDetail object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteTypeDetail& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteTypeDetail object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteTypeDetail& x) const;

                /*!
                 * @brief This function copies the value in member ann_builtin
                 * @param _ann_builtin New value to be copied in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        const eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& _ann_builtin);

                /*!
                 * @brief This function moves the value in member ann_builtin
                 * @param _ann_builtin New value to be moved in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations&& _ann_builtin);

                /*!
                 * @brief This function returns a constant reference to member ann_builtin
                 * @return Constant reference to member ann_builtin
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& ann_builtin() const;

                /*!
                 * @brief This function returns a reference to member ann_builtin
                 * @return Reference to member ann_builtin
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& ann_builtin();
                /*!
                 * @brief This function copies the value in member ann_custom
                 * @param _ann_custom New value to be copied in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        const eprosima::fastrtps::types::AppliedAnnotationSeq& _ann_custom);

                /*!
                 * @brief This function moves the value in member ann_custom
                 * @param _ann_custom New value to be moved in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        eprosima::fastrtps::types::AppliedAnnotationSeq&& _ann_custom);

                /*!
                 * @brief This function returns a constant reference to member ann_custom
                 * @return Constant reference to member ann_custom
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom() const;

                /*!
                 * @brief This function returns a reference to member ann_custom
                 * @return Reference to member ann_custom
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom();
                /*!
                 * @brief This function copies the value in member type_name
                 * @param _type_name New value to be copied in member type_name
                 */
                eProsima_user_DllExport void type_name(
                        const eprosima::fastrtps::types::QualifiedTypeName& _type_name);

                /*!
                 * @brief This function moves the value in member type_name
                 * @param _type_name New value to be moved in member type_name
                 */
                eProsima_user_DllExport void type_name(
                        eprosima::fastrtps::types::QualifiedTypeName&& _type_name);

                /*!
                 * @brief This function returns a constant reference to member type_name
                 * @return Constant reference to member type_name
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::QualifiedTypeName& type_name() const;

                /*!
                 * @brief This function returns a reference to member type_name
                 * @return Reference to member type_name
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::QualifiedTypeName& type_name();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteTypeDetail& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations m_ann_builtin;
                eprosima::fastrtps::types::AppliedAnnotationSeq m_ann_custom;
                eprosima::fastrtps::types::QualifiedTypeName m_type_name;

            };
            /*!
             * @brief This class represents the structure CompleteStructHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteStructHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteStructHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteStructHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteStructHeader(
                        const CompleteStructHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteStructHeader(
                        CompleteStructHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteStructHeader& operator =(
                        const CompleteStructHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteStructHeader& operator =(
                        CompleteStructHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteStructHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteStructHeader& x) const;

                /*!
                 * @brief This function copies the value in member base_type
                 * @param _base_type New value to be copied in member base_type
                 */
                eProsima_user_DllExport void base_type(
                        const eprosima::fastrtps::types::TypeIdentifier& _base_type);

                /*!
                 * @brief This function moves the value in member base_type
                 * @param _base_type New value to be moved in member base_type
                 */
                eProsima_user_DllExport void base_type(
                        eprosima::fastrtps::types::TypeIdentifier&& _base_type);

                /*!
                 * @brief This function returns a constant reference to member base_type
                 * @return Constant reference to member base_type
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& base_type() const;

                /*!
                 * @brief This function returns a reference to member base_type
                 * @return Reference to member base_type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& base_type();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteStructHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_base_type;
                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalStructHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalStructHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalStructHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalStructHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalStructHeader(
                        const MinimalStructHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalStructHeader(
                        MinimalStructHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalStructHeader& operator =(
                        const MinimalStructHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalStructHeader& operator =(
                        MinimalStructHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalStructHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalStructHeader& x) const;

                /*!
                 * @brief This function copies the value in member base_type
                 * @param _base_type New value to be copied in member base_type
                 */
                eProsima_user_DllExport void base_type(
                        const eprosima::fastrtps::types::TypeIdentifier& _base_type);

                /*!
                 * @brief This function moves the value in member base_type
                 * @param _base_type New value to be moved in member base_type
                 */
                eProsima_user_DllExport void base_type(
                        eprosima::fastrtps::types::TypeIdentifier&& _base_type);

                /*!
                 * @brief This function returns a constant reference to member base_type
                 * @return Constant reference to member base_type
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& base_type() const;

                /*!
                 * @brief This function returns a reference to member base_type
                 * @return Reference to member base_type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& base_type();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalTypeDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalStructHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_base_type;
                eprosima::fastrtps::types::MinimalTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure CompleteStructType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteStructType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteStructType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteStructType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructType that will be copied.
                 */
                eProsima_user_DllExport CompleteStructType(
                        const CompleteStructType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructType that will be copied.
                 */
                eProsima_user_DllExport CompleteStructType(
                        CompleteStructType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructType that will be copied.
                 */
                eProsima_user_DllExport CompleteStructType& operator =(
                        const CompleteStructType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteStructType that will be copied.
                 */
                eProsima_user_DllExport CompleteStructType& operator =(
                        CompleteStructType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteStructType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteStructType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteStructType& x) const;

                /*!
                 * @brief This function sets a value in member struct_flags
                 * @param _struct_flags New value for member struct_flags
                 */
                eProsima_user_DllExport void struct_flags(
                        eprosima::fastrtps::types::StructTypeFlag _struct_flags);

                /*!
                 * @brief This function returns the value of member struct_flags
                 * @return Value of member struct_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructTypeFlag struct_flags() const;

                /*!
                 * @brief This function returns a reference to member struct_flags
                 * @return Reference to member struct_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructTypeFlag& struct_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteStructHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteStructHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteStructHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteStructHeader& header();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::CompleteStructMemberSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::CompleteStructMemberSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteStructMemberSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteStructMemberSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteStructType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::StructTypeFlag m_struct_flags;
                eprosima::fastrtps::types::CompleteStructHeader m_header;
                eprosima::fastrtps::types::CompleteStructMemberSeq m_member_seq;

            };
            /*!
             * @brief This class represents the structure MinimalStructType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalStructType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalStructType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalStructType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructType that will be copied.
                 */
                eProsima_user_DllExport MinimalStructType(
                        const MinimalStructType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructType that will be copied.
                 */
                eProsima_user_DllExport MinimalStructType(
                        MinimalStructType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructType that will be copied.
                 */
                eProsima_user_DllExport MinimalStructType& operator =(
                        const MinimalStructType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalStructType that will be copied.
                 */
                eProsima_user_DllExport MinimalStructType& operator =(
                        MinimalStructType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalStructType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalStructType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalStructType& x) const;

                /*!
                 * @brief This function sets a value in member struct_flags
                 * @param _struct_flags New value for member struct_flags
                 */
                eProsima_user_DllExport void struct_flags(
                        eprosima::fastrtps::types::StructTypeFlag _struct_flags);

                /*!
                 * @brief This function returns the value of member struct_flags
                 * @return Value of member struct_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructTypeFlag struct_flags() const;

                /*!
                 * @brief This function returns a reference to member struct_flags
                 * @return Reference to member struct_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::StructTypeFlag& struct_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalStructHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalStructHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalStructHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalStructHeader& header();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::MinimalStructMemberSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::MinimalStructMemberSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalStructMemberSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalStructMemberSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalStructType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::StructTypeFlag m_struct_flags;
                eprosima::fastrtps::types::MinimalStructHeader m_header;
                eprosima::fastrtps::types::MinimalStructMemberSeq m_member_seq;

            };
            typedef std::vector<int32_t> UnionCaseLabelSeq;
            /*!
             * @brief This class represents the structure CommonUnionMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonUnionMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonUnionMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonUnionMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonUnionMember that will be copied.
                 */
                eProsima_user_DllExport CommonUnionMember(
                        const CommonUnionMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonUnionMember that will be copied.
                 */
                eProsima_user_DllExport CommonUnionMember(
                        CommonUnionMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonUnionMember that will be copied.
                 */
                eProsima_user_DllExport CommonUnionMember& operator =(
                        const CommonUnionMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonUnionMember that will be copied.
                 */
                eProsima_user_DllExport CommonUnionMember& operator =(
                        CommonUnionMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonUnionMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonUnionMember& x) const;

                /*!
                 * @brief This function sets a value in member member_id
                 * @param _member_id New value for member member_id
                 */
                eProsima_user_DllExport void member_id(
                        eprosima::fastrtps::types::MemberId _member_id);

                /*!
                 * @brief This function returns the value of member member_id
                 * @return Value of member member_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberId member_id() const;

                /*!
                 * @brief This function returns a reference to member member_id
                 * @return Reference to member member_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberId& member_id();

                /*!
                 * @brief This function sets a value in member member_flags
                 * @param _member_flags New value for member member_flags
                 */
                eProsima_user_DllExport void member_flags(
                        eprosima::fastrtps::types::UnionMemberFlag _member_flags);

                /*!
                 * @brief This function returns the value of member member_flags
                 * @return Value of member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionMemberFlag member_flags() const;

                /*!
                 * @brief This function returns a reference to member member_flags
                 * @return Reference to member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionMemberFlag& member_flags();

                /*!
                 * @brief This function copies the value in member type_id
                 * @param _type_id New value to be copied in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_id);

                /*!
                 * @brief This function moves the value in member type_id
                 * @param _type_id New value to be moved in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_id);

                /*!
                 * @brief This function returns a constant reference to member type_id
                 * @return Constant reference to member type_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_id() const;

                /*!
                 * @brief This function returns a reference to member type_id
                 * @return Reference to member type_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_id();
                /*!
                 * @brief This function copies the value in member label_seq
                 * @param _label_seq New value to be copied in member label_seq
                 */
                eProsima_user_DllExport void label_seq(
                        const eprosima::fastrtps::types::UnionCaseLabelSeq& _label_seq);

                /*!
                 * @brief This function moves the value in member label_seq
                 * @param _label_seq New value to be moved in member label_seq
                 */
                eProsima_user_DllExport void label_seq(
                        eprosima::fastrtps::types::UnionCaseLabelSeq&& _label_seq);

                /*!
                 * @brief This function returns a constant reference to member label_seq
                 * @return Constant reference to member label_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::UnionCaseLabelSeq& label_seq() const;

                /*!
                 * @brief This function returns a reference to member label_seq
                 * @return Reference to member label_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionCaseLabelSeq& label_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonUnionMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::MemberId m_member_id;
                eprosima::fastrtps::types::UnionMemberFlag m_member_flags;
                eprosima::fastrtps::types::TypeIdentifier m_type_id;
                eprosima::fastrtps::types::UnionCaseLabelSeq m_label_seq;

            };
            /*!
             * @brief This class represents the structure CompleteUnionMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteUnionMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteUnionMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteUnionMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionMember that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionMember(
                        const CompleteUnionMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionMember that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionMember(
                        CompleteUnionMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionMember that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionMember& operator =(
                        const CompleteUnionMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionMember that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionMember& operator =(
                        CompleteUnionMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteUnionMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteUnionMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonUnionMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonUnionMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonUnionMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonUnionMember& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMemberDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteUnionMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonUnionMember m_common;
                eprosima::fastrtps::types::CompleteMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteUnionMember> CompleteUnionMemberSeq;
            /*!
             * @brief This class represents the structure MinimalUnionMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalUnionMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalUnionMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalUnionMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionMember that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionMember(
                        const MinimalUnionMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionMember that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionMember(
                        MinimalUnionMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionMember that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionMember& operator =(
                        const MinimalUnionMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionMember that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionMember& operator =(
                        MinimalUnionMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalUnionMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalUnionMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonUnionMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonUnionMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonUnionMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonUnionMember& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalMemberDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalUnionMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonUnionMember m_common;
                eprosima::fastrtps::types::MinimalMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalUnionMember> MinimalUnionMemberSeq;
            /*!
             * @brief This class represents the structure CommonDiscriminatorMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonDiscriminatorMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonDiscriminatorMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonDiscriminatorMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CommonDiscriminatorMember(
                        const CommonDiscriminatorMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CommonDiscriminatorMember(
                        CommonDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CommonDiscriminatorMember& operator =(
                        const CommonDiscriminatorMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CommonDiscriminatorMember& operator =(
                        CommonDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonDiscriminatorMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonDiscriminatorMember& x) const;

                /*!
                 * @brief This function sets a value in member member_flags
                 * @param _member_flags New value for member member_flags
                 */
                eProsima_user_DllExport void member_flags(
                        eprosima::fastrtps::types::UnionDiscriminatorFlag _member_flags);

                /*!
                 * @brief This function returns the value of member member_flags
                 * @return Value of member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionDiscriminatorFlag member_flags() const;

                /*!
                 * @brief This function returns a reference to member member_flags
                 * @return Reference to member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionDiscriminatorFlag& member_flags();

                /*!
                 * @brief This function copies the value in member type_id
                 * @param _type_id New value to be copied in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_id);

                /*!
                 * @brief This function moves the value in member type_id
                 * @param _type_id New value to be moved in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_id);

                /*!
                 * @brief This function returns a constant reference to member type_id
                 * @return Constant reference to member type_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_id() const;

                /*!
                 * @brief This function returns a reference to member type_id
                 * @return Reference to member type_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_id();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonDiscriminatorMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::UnionDiscriminatorFlag m_member_flags;
                eprosima::fastrtps::types::TypeIdentifier m_type_id;

            };
            /*!
             * @brief This class represents the structure CompleteDiscriminatorMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteDiscriminatorMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteDiscriminatorMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteDiscriminatorMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CompleteDiscriminatorMember(
                        const CompleteDiscriminatorMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CompleteDiscriminatorMember(
                        CompleteDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CompleteDiscriminatorMember& operator =(
                        const CompleteDiscriminatorMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport CompleteDiscriminatorMember& operator =(
                        CompleteDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteDiscriminatorMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteDiscriminatorMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonDiscriminatorMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonDiscriminatorMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonDiscriminatorMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonDiscriminatorMember& common();
                /*!
                 * @brief This function copies the value in member ann_builtin
                 * @param _ann_builtin New value to be copied in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        const eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& _ann_builtin);

                /*!
                 * @brief This function moves the value in member ann_builtin
                 * @param _ann_builtin New value to be moved in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations&& _ann_builtin);

                /*!
                 * @brief This function returns a constant reference to member ann_builtin
                 * @return Constant reference to member ann_builtin
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& ann_builtin() const;

                /*!
                 * @brief This function returns a reference to member ann_builtin
                 * @return Reference to member ann_builtin
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations& ann_builtin();
                /*!
                 * @brief This function copies the value in member ann_custom
                 * @param _ann_custom New value to be copied in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        const eprosima::fastrtps::types::AppliedAnnotationSeq& _ann_custom);

                /*!
                 * @brief This function moves the value in member ann_custom
                 * @param _ann_custom New value to be moved in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        eprosima::fastrtps::types::AppliedAnnotationSeq&& _ann_custom);

                /*!
                 * @brief This function returns a constant reference to member ann_custom
                 * @return Constant reference to member ann_custom
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom() const;

                /*!
                 * @brief This function returns a reference to member ann_custom
                 * @return Reference to member ann_custom
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteDiscriminatorMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonDiscriminatorMember m_common;
                eprosima::fastrtps::types::AppliedBuiltinTypeAnnotations m_ann_builtin;
                eprosima::fastrtps::types::AppliedAnnotationSeq m_ann_custom;

            };
            /*!
             * @brief This class represents the structure MinimalDiscriminatorMember defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalDiscriminatorMember
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalDiscriminatorMember();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalDiscriminatorMember();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport MinimalDiscriminatorMember(
                        const MinimalDiscriminatorMember& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport MinimalDiscriminatorMember(
                        MinimalDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport MinimalDiscriminatorMember& operator =(
                        const MinimalDiscriminatorMember& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalDiscriminatorMember that will be copied.
                 */
                eProsima_user_DllExport MinimalDiscriminatorMember& operator =(
                        MinimalDiscriminatorMember&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalDiscriminatorMember& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalDiscriminatorMember object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalDiscriminatorMember& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonDiscriminatorMember& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonDiscriminatorMember&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonDiscriminatorMember& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonDiscriminatorMember& common();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalDiscriminatorMember& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonDiscriminatorMember m_common;

            };
            /*!
             * @brief This class represents the structure CompleteUnionHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteUnionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteUnionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteUnionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionHeader(
                        const CompleteUnionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionHeader(
                        CompleteUnionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionHeader& operator =(
                        const CompleteUnionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionHeader& operator =(
                        CompleteUnionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteUnionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteUnionHeader& x) const;

                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteUnionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalUnionHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalUnionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalUnionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalUnionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionHeader(
                        const MinimalUnionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionHeader(
                        MinimalUnionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionHeader& operator =(
                        const MinimalUnionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionHeader& operator =(
                        MinimalUnionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalUnionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalUnionHeader& x) const;

                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalUnionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::MinimalTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure CompleteUnionType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteUnionType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteUnionType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteUnionType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionType that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionType(
                        const CompleteUnionType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionType that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionType(
                        CompleteUnionType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionType that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionType& operator =(
                        const CompleteUnionType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteUnionType that will be copied.
                 */
                eProsima_user_DllExport CompleteUnionType& operator =(
                        CompleteUnionType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteUnionType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteUnionType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteUnionType& x) const;

                /*!
                 * @brief This function sets a value in member union_flags
                 * @param _union_flags New value for member union_flags
                 */
                eProsima_user_DllExport void union_flags(
                        eprosima::fastrtps::types::UnionTypeFlag _union_flags);

                /*!
                 * @brief This function returns the value of member union_flags
                 * @return Value of member union_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionTypeFlag union_flags() const;

                /*!
                 * @brief This function returns a reference to member union_flags
                 * @return Reference to member union_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionTypeFlag& union_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteUnionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteUnionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteUnionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteUnionHeader& header();
                /*!
                 * @brief This function copies the value in member discriminator
                 * @param _discriminator New value to be copied in member discriminator
                 */
                eProsima_user_DllExport void discriminator(
                        const eprosima::fastrtps::types::CompleteDiscriminatorMember& _discriminator);

                /*!
                 * @brief This function moves the value in member discriminator
                 * @param _discriminator New value to be moved in member discriminator
                 */
                eProsima_user_DllExport void discriminator(
                        eprosima::fastrtps::types::CompleteDiscriminatorMember&& _discriminator);

                /*!
                 * @brief This function returns a constant reference to member discriminator
                 * @return Constant reference to member discriminator
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteDiscriminatorMember& discriminator() const;

                /*!
                 * @brief This function returns a reference to member discriminator
                 * @return Reference to member discriminator
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteDiscriminatorMember& discriminator();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::CompleteUnionMemberSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::CompleteUnionMemberSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteUnionMemberSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteUnionMemberSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteUnionType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::UnionTypeFlag m_union_flags;
                eprosima::fastrtps::types::CompleteUnionHeader m_header;
                eprosima::fastrtps::types::CompleteDiscriminatorMember m_discriminator;
                eprosima::fastrtps::types::CompleteUnionMemberSeq m_member_seq;

            };
            /*!
             * @brief This class represents the structure MinimalUnionType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalUnionType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalUnionType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalUnionType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionType that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionType(
                        const MinimalUnionType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionType that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionType(
                        MinimalUnionType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionType that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionType& operator =(
                        const MinimalUnionType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalUnionType that will be copied.
                 */
                eProsima_user_DllExport MinimalUnionType& operator =(
                        MinimalUnionType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalUnionType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalUnionType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalUnionType& x) const;

                /*!
                 * @brief This function sets a value in member union_flags
                 * @param _union_flags New value for member union_flags
                 */
                eProsima_user_DllExport void union_flags(
                        eprosima::fastrtps::types::UnionTypeFlag _union_flags);

                /*!
                 * @brief This function returns the value of member union_flags
                 * @return Value of member union_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionTypeFlag union_flags() const;

                /*!
                 * @brief This function returns a reference to member union_flags
                 * @return Reference to member union_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::UnionTypeFlag& union_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalUnionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalUnionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalUnionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalUnionHeader& header();
                /*!
                 * @brief This function copies the value in member discriminator
                 * @param _discriminator New value to be copied in member discriminator
                 */
                eProsima_user_DllExport void discriminator(
                        const eprosima::fastrtps::types::MinimalDiscriminatorMember& _discriminator);

                /*!
                 * @brief This function moves the value in member discriminator
                 * @param _discriminator New value to be moved in member discriminator
                 */
                eProsima_user_DllExport void discriminator(
                        eprosima::fastrtps::types::MinimalDiscriminatorMember&& _discriminator);

                /*!
                 * @brief This function returns a constant reference to member discriminator
                 * @return Constant reference to member discriminator
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalDiscriminatorMember& discriminator() const;

                /*!
                 * @brief This function returns a reference to member discriminator
                 * @return Reference to member discriminator
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalDiscriminatorMember& discriminator();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::MinimalUnionMemberSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::MinimalUnionMemberSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalUnionMemberSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalUnionMemberSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalUnionType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::UnionTypeFlag m_union_flags;
                eprosima::fastrtps::types::MinimalUnionHeader m_header;
                eprosima::fastrtps::types::MinimalDiscriminatorMember m_discriminator;
                eprosima::fastrtps::types::MinimalUnionMemberSeq m_member_seq;

            };
            /*!
             * @brief This class represents the structure CommonAnnotationParameter defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonAnnotationParameter
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonAnnotationParameter();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonAnnotationParameter();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CommonAnnotationParameter(
                        const CommonAnnotationParameter& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CommonAnnotationParameter(
                        CommonAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CommonAnnotationParameter& operator =(
                        const CommonAnnotationParameter& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CommonAnnotationParameter& operator =(
                        CommonAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonAnnotationParameter& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonAnnotationParameter& x) const;

                /*!
                 * @brief This function sets a value in member member_flags
                 * @param _member_flags New value for member member_flags
                 */
                eProsima_user_DllExport void member_flags(
                        eprosima::fastrtps::types::AnnotationParameterFlag _member_flags);

                /*!
                 * @brief This function returns the value of member member_flags
                 * @return Value of member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterFlag member_flags() const;

                /*!
                 * @brief This function returns a reference to member member_flags
                 * @return Reference to member member_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterFlag& member_flags();

                /*!
                 * @brief This function copies the value in member member_type_id
                 * @param _member_type_id New value to be copied in member member_type_id
                 */
                eProsima_user_DllExport void member_type_id(
                        const eprosima::fastrtps::types::TypeIdentifier& _member_type_id);

                /*!
                 * @brief This function moves the value in member member_type_id
                 * @param _member_type_id New value to be moved in member member_type_id
                 */
                eProsima_user_DllExport void member_type_id(
                        eprosima::fastrtps::types::TypeIdentifier&& _member_type_id);

                /*!
                 * @brief This function returns a constant reference to member member_type_id
                 * @return Constant reference to member member_type_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& member_type_id() const;

                /*!
                 * @brief This function returns a reference to member member_type_id
                 * @return Reference to member member_type_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& member_type_id();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonAnnotationParameter& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AnnotationParameterFlag m_member_flags;
                eprosima::fastrtps::types::TypeIdentifier m_member_type_id;

            };
            /*!
             * @brief This class represents the structure CompleteAnnotationParameter defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAnnotationParameter
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAnnotationParameter();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAnnotationParameter();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationParameter(
                        const CompleteAnnotationParameter& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationParameter(
                        CompleteAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationParameter& operator =(
                        const CompleteAnnotationParameter& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationParameter& operator =(
                        CompleteAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAnnotationParameter& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAnnotationParameter& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonAnnotationParameter& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonAnnotationParameter&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonAnnotationParameter& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonAnnotationParameter& common();
                /*!
                 * @brief This function copies the value in member name
                 * @param _name New value to be copied in member name
                 */
                eProsima_user_DllExport void name(
                        const eprosima::fastrtps::types::MemberName& _name);

                /*!
                 * @brief This function moves the value in member name
                 * @param _name New value to be moved in member name
                 */
                eProsima_user_DllExport void name(
                        eprosima::fastrtps::types::MemberName&& _name);

                /*!
                 * @brief This function returns a constant reference to member name
                 * @return Constant reference to member name
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MemberName& name() const;

                /*!
                 * @brief This function returns a reference to member name
                 * @return Reference to member name
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MemberName& name();
                /*!
                 * @brief This function copies the value in member default_value
                 * @param _default_value New value to be copied in member default_value
                 */
                eProsima_user_DllExport void default_value(
                        const eprosima::fastrtps::types::AnnotationParameterValue& _default_value);

                /*!
                 * @brief This function moves the value in member default_value
                 * @param _default_value New value to be moved in member default_value
                 */
                eProsima_user_DllExport void default_value(
                        eprosima::fastrtps::types::AnnotationParameterValue&& _default_value);

                /*!
                 * @brief This function returns a constant reference to member default_value
                 * @return Constant reference to member default_value
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AnnotationParameterValue& default_value() const;

                /*!
                 * @brief This function returns a reference to member default_value
                 * @return Reference to member default_value
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterValue& default_value();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAnnotationParameter& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonAnnotationParameter m_common;
                eprosima::fastrtps::types::MemberName m_name;
                eprosima::fastrtps::types::AnnotationParameterValue m_default_value;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteAnnotationParameter> CompleteAnnotationParameterSeq;
            /*!
             * @brief This class represents the structure MinimalAnnotationParameter defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAnnotationParameter
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAnnotationParameter();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAnnotationParameter();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationParameter(
                        const MinimalAnnotationParameter& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationParameter(
                        MinimalAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationParameter& operator =(
                        const MinimalAnnotationParameter& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationParameter& operator =(
                        MinimalAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAnnotationParameter& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAnnotationParameter& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonAnnotationParameter& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonAnnotationParameter&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonAnnotationParameter& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonAnnotationParameter& common();
                /*!
                 * @brief This function copies the value in member name_hash
                 * @param _name_hash New value to be copied in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        const eprosima::fastrtps::types::NameHash& _name_hash);

                /*!
                 * @brief This function moves the value in member name_hash
                 * @param _name_hash New value to be moved in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        eprosima::fastrtps::types::NameHash&& _name_hash);

                /*!
                 * @brief This function returns a constant reference to member name_hash
                 * @return Constant reference to member name_hash
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::NameHash& name_hash() const;

                /*!
                 * @brief This function returns a reference to member name_hash
                 * @return Reference to member name_hash
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::NameHash& name_hash();
                /*!
                 * @brief This function copies the value in member default_value
                 * @param _default_value New value to be copied in member default_value
                 */
                eProsima_user_DllExport void default_value(
                        const eprosima::fastrtps::types::AnnotationParameterValue& _default_value);

                /*!
                 * @brief This function moves the value in member default_value
                 * @param _default_value New value to be moved in member default_value
                 */
                eProsima_user_DllExport void default_value(
                        eprosima::fastrtps::types::AnnotationParameterValue&& _default_value);

                /*!
                 * @brief This function returns a constant reference to member default_value
                 * @return Constant reference to member default_value
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AnnotationParameterValue& default_value() const;

                /*!
                 * @brief This function returns a reference to member default_value
                 * @return Reference to member default_value
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterValue& default_value();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAnnotationParameter& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonAnnotationParameter m_common;
                eprosima::fastrtps::types::NameHash m_name_hash;
                eprosima::fastrtps::types::AnnotationParameterValue m_default_value;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalAnnotationParameter> MinimalAnnotationParameterSeq;
            /*!
             * @brief This class represents the structure CompleteAnnotationHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAnnotationHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAnnotationHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAnnotationHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationHeader(
                        const CompleteAnnotationHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationHeader(
                        CompleteAnnotationHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationHeader& operator =(
                        const CompleteAnnotationHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationHeader& operator =(
                        CompleteAnnotationHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAnnotationHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAnnotationHeader& x) const;

                /*!
                 * @brief This function copies the value in member annotation_name
                 * @param _annotation_name New value to be copied in member annotation_name
                 */
                eProsima_user_DllExport void annotation_name(
                        const eprosima::fastrtps::types::QualifiedTypeName& _annotation_name);

                /*!
                 * @brief This function moves the value in member annotation_name
                 * @param _annotation_name New value to be moved in member annotation_name
                 */
                eProsima_user_DllExport void annotation_name(
                        eprosima::fastrtps::types::QualifiedTypeName&& _annotation_name);

                /*!
                 * @brief This function returns a constant reference to member annotation_name
                 * @return Constant reference to member annotation_name
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::QualifiedTypeName& annotation_name() const;

                /*!
                 * @brief This function returns a reference to member annotation_name
                 * @return Reference to member annotation_name
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::QualifiedTypeName& annotation_name();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAnnotationHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::QualifiedTypeName m_annotation_name;

            };
            /*!
             * @brief This class represents the structure MinimalAnnotationHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAnnotationHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAnnotationHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAnnotationHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationHeader(
                        const MinimalAnnotationHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationHeader(
                        MinimalAnnotationHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationHeader& operator =(
                        const MinimalAnnotationHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationHeader& operator =(
                        MinimalAnnotationHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAnnotationHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAnnotationHeader& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAnnotationHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the structure CompleteAnnotationType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAnnotationType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAnnotationType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAnnotationType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationType that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationType(
                        const CompleteAnnotationType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationType that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationType(
                        CompleteAnnotationType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationType that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationType& operator =(
                        const CompleteAnnotationType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAnnotationType that will be copied.
                 */
                eProsima_user_DllExport CompleteAnnotationType& operator =(
                        CompleteAnnotationType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAnnotationType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAnnotationType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAnnotationType& x) const;

                /*!
                 * @brief This function sets a value in member annotation_flag
                 * @param _annotation_flag New value for member annotation_flag
                 */
                eProsima_user_DllExport void annotation_flag(
                        eprosima::fastrtps::types::AnnotationTypeFlag _annotation_flag);

                /*!
                 * @brief This function returns the value of member annotation_flag
                 * @return Value of member annotation_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationTypeFlag annotation_flag() const;

                /*!
                 * @brief This function returns a reference to member annotation_flag
                 * @return Reference to member annotation_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationTypeFlag& annotation_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteAnnotationHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteAnnotationHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAnnotationHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAnnotationHeader& header();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::CompleteAnnotationParameterSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::CompleteAnnotationParameterSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAnnotationParameterSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAnnotationParameterSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAnnotationType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AnnotationTypeFlag m_annotation_flag;
                eprosima::fastrtps::types::CompleteAnnotationHeader m_header;
                eprosima::fastrtps::types::CompleteAnnotationParameterSeq m_member_seq;

            };
            /*!
             * @brief This class represents the structure MinimalAnnotationType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAnnotationType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAnnotationType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAnnotationType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationType that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationType(
                        const MinimalAnnotationType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationType that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationType(
                        MinimalAnnotationType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationType that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationType& operator =(
                        const MinimalAnnotationType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAnnotationType that will be copied.
                 */
                eProsima_user_DllExport MinimalAnnotationType& operator =(
                        MinimalAnnotationType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAnnotationType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAnnotationType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAnnotationType& x) const;

                /*!
                 * @brief This function sets a value in member annotation_flag
                 * @param _annotation_flag New value for member annotation_flag
                 */
                eProsima_user_DllExport void annotation_flag(
                        eprosima::fastrtps::types::AnnotationTypeFlag _annotation_flag);

                /*!
                 * @brief This function returns the value of member annotation_flag
                 * @return Value of member annotation_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationTypeFlag annotation_flag() const;

                /*!
                 * @brief This function returns a reference to member annotation_flag
                 * @return Reference to member annotation_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationTypeFlag& annotation_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalAnnotationHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalAnnotationHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAnnotationHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAnnotationHeader& header();
                /*!
                 * @brief This function copies the value in member member_seq
                 * @param _member_seq New value to be copied in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        const eprosima::fastrtps::types::MinimalAnnotationParameterSeq& _member_seq);

                /*!
                 * @brief This function moves the value in member member_seq
                 * @param _member_seq New value to be moved in member member_seq
                 */
                eProsima_user_DllExport void member_seq(
                        eprosima::fastrtps::types::MinimalAnnotationParameterSeq&& _member_seq);

                /*!
                 * @brief This function returns a constant reference to member member_seq
                 * @return Constant reference to member member_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAnnotationParameterSeq& member_seq() const;

                /*!
                 * @brief This function returns a reference to member member_seq
                 * @return Reference to member member_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAnnotationParameterSeq& member_seq();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAnnotationType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AnnotationTypeFlag m_annotation_flag;
                eprosima::fastrtps::types::MinimalAnnotationHeader m_header;
                eprosima::fastrtps::types::MinimalAnnotationParameterSeq m_member_seq;

            };
            /*!
             * @brief This class represents the structure CommonAliasBody defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonAliasBody
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonAliasBody();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonAliasBody();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAliasBody that will be copied.
                 */
                eProsima_user_DllExport CommonAliasBody(
                        const CommonAliasBody& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAliasBody that will be copied.
                 */
                eProsima_user_DllExport CommonAliasBody(
                        CommonAliasBody&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAliasBody that will be copied.
                 */
                eProsima_user_DllExport CommonAliasBody& operator =(
                        const CommonAliasBody& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonAliasBody that will be copied.
                 */
                eProsima_user_DllExport CommonAliasBody& operator =(
                        CommonAliasBody&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonAliasBody& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonAliasBody& x) const;

                /*!
                 * @brief This function sets a value in member related_flags
                 * @param _related_flags New value for member related_flags
                 */
                eProsima_user_DllExport void related_flags(
                        eprosima::fastrtps::types::AliasMemberFlag _related_flags);

                /*!
                 * @brief This function returns the value of member related_flags
                 * @return Value of member related_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasMemberFlag related_flags() const;

                /*!
                 * @brief This function returns a reference to member related_flags
                 * @return Reference to member related_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasMemberFlag& related_flags();

                /*!
                 * @brief This function copies the value in member related_type
                 * @param _related_type New value to be copied in member related_type
                 */
                eProsima_user_DllExport void related_type(
                        const eprosima::fastrtps::types::TypeIdentifier& _related_type);

                /*!
                 * @brief This function moves the value in member related_type
                 * @param _related_type New value to be moved in member related_type
                 */
                eProsima_user_DllExport void related_type(
                        eprosima::fastrtps::types::TypeIdentifier&& _related_type);

                /*!
                 * @brief This function returns a constant reference to member related_type
                 * @return Constant reference to member related_type
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& related_type() const;

                /*!
                 * @brief This function returns a reference to member related_type
                 * @return Reference to member related_type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& related_type();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonAliasBody& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AliasMemberFlag m_related_flags;
                eprosima::fastrtps::types::TypeIdentifier m_related_type;

            };
            /*!
             * @brief This class represents the structure CompleteAliasBody defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAliasBody
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAliasBody();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAliasBody();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasBody that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasBody(
                        const CompleteAliasBody& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasBody that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasBody(
                        CompleteAliasBody&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasBody that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasBody& operator =(
                        const CompleteAliasBody& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasBody that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasBody& operator =(
                        CompleteAliasBody&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAliasBody& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAliasBody& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonAliasBody& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonAliasBody&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonAliasBody& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonAliasBody& common();
                /*!
                 * @brief This function copies the value in member ann_builtin
                 * @param _ann_builtin New value to be copied in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& _ann_builtin);

                /*!
                 * @brief This function moves the value in member ann_builtin
                 * @param _ann_builtin New value to be moved in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations&& _ann_builtin);

                /*!
                 * @brief This function returns a constant reference to member ann_builtin
                 * @return Constant reference to member ann_builtin
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin() const;

                /*!
                 * @brief This function returns a reference to member ann_builtin
                 * @return Reference to member ann_builtin
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin();
                /*!
                 * @brief This function copies the value in member ann_custom
                 * @param _ann_custom New value to be copied in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        const eprosima::fastrtps::types::AppliedAnnotationSeq& _ann_custom);

                /*!
                 * @brief This function moves the value in member ann_custom
                 * @param _ann_custom New value to be moved in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        eprosima::fastrtps::types::AppliedAnnotationSeq&& _ann_custom);

                /*!
                 * @brief This function returns a constant reference to member ann_custom
                 * @return Constant reference to member ann_custom
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom() const;

                /*!
                 * @brief This function returns a reference to member ann_custom
                 * @return Reference to member ann_custom
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAliasBody& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonAliasBody m_common;
                eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations m_ann_builtin;
                eprosima::fastrtps::types::AppliedAnnotationSeq m_ann_custom;

            };
            /*!
             * @brief This class represents the structure MinimalAliasBody defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAliasBody
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAliasBody();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAliasBody();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasBody that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasBody(
                        const MinimalAliasBody& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasBody that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasBody(
                        MinimalAliasBody&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasBody that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasBody& operator =(
                        const MinimalAliasBody& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasBody that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasBody& operator =(
                        MinimalAliasBody&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAliasBody& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasBody object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAliasBody& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonAliasBody& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonAliasBody&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonAliasBody& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonAliasBody& common();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAliasBody& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonAliasBody m_common;

            };
            /*!
             * @brief This class represents the structure CompleteAliasHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAliasHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAliasHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAliasHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasHeader(
                        const CompleteAliasHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasHeader(
                        CompleteAliasHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasHeader& operator =(
                        const CompleteAliasHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasHeader& operator =(
                        CompleteAliasHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAliasHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAliasHeader& x) const;

                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAliasHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalAliasHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAliasHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAliasHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAliasHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasHeader(
                        const MinimalAliasHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasHeader(
                        MinimalAliasHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasHeader& operator =(
                        const MinimalAliasHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasHeader& operator =(
                        MinimalAliasHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAliasHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAliasHeader& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAliasHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the structure CompleteAliasType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteAliasType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteAliasType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteAliasType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasType that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasType(
                        const CompleteAliasType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasType that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasType(
                        CompleteAliasType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasType that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasType& operator =(
                        const CompleteAliasType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteAliasType that will be copied.
                 */
                eProsima_user_DllExport CompleteAliasType& operator =(
                        CompleteAliasType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteAliasType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteAliasType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteAliasType& x) const;

                /*!
                 * @brief This function sets a value in member alias_flags
                 * @param _alias_flags New value for member alias_flags
                 */
                eProsima_user_DllExport void alias_flags(
                        eprosima::fastrtps::types::AliasTypeFlag _alias_flags);

                /*!
                 * @brief This function returns the value of member alias_flags
                 * @return Value of member alias_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasTypeFlag alias_flags() const;

                /*!
                 * @brief This function returns a reference to member alias_flags
                 * @return Reference to member alias_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasTypeFlag& alias_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteAliasHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteAliasHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAliasHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAliasHeader& header();
                /*!
                 * @brief This function copies the value in member body
                 * @param _body New value to be copied in member body
                 */
                eProsima_user_DllExport void body(
                        const eprosima::fastrtps::types::CompleteAliasBody& _body);

                /*!
                 * @brief This function moves the value in member body
                 * @param _body New value to be moved in member body
                 */
                eProsima_user_DllExport void body(
                        eprosima::fastrtps::types::CompleteAliasBody&& _body);

                /*!
                 * @brief This function returns a constant reference to member body
                 * @return Constant reference to member body
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAliasBody& body() const;

                /*!
                 * @brief This function returns a reference to member body
                 * @return Reference to member body
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAliasBody& body();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteAliasType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AliasTypeFlag m_alias_flags;
                eprosima::fastrtps::types::CompleteAliasHeader m_header;
                eprosima::fastrtps::types::CompleteAliasBody m_body;

            };
            /*!
             * @brief This class represents the structure MinimalAliasType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalAliasType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalAliasType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalAliasType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasType that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasType(
                        const MinimalAliasType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasType that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasType(
                        MinimalAliasType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasType that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasType& operator =(
                        const MinimalAliasType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalAliasType that will be copied.
                 */
                eProsima_user_DllExport MinimalAliasType& operator =(
                        MinimalAliasType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalAliasType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalAliasType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalAliasType& x) const;

                /*!
                 * @brief This function sets a value in member alias_flags
                 * @param _alias_flags New value for member alias_flags
                 */
                eProsima_user_DllExport void alias_flags(
                        eprosima::fastrtps::types::AliasTypeFlag _alias_flags);

                /*!
                 * @brief This function returns the value of member alias_flags
                 * @return Value of member alias_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasTypeFlag alias_flags() const;

                /*!
                 * @brief This function returns a reference to member alias_flags
                 * @return Reference to member alias_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AliasTypeFlag& alias_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalAliasHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalAliasHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAliasHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAliasHeader& header();
                /*!
                 * @brief This function copies the value in member body
                 * @param _body New value to be copied in member body
                 */
                eProsima_user_DllExport void body(
                        const eprosima::fastrtps::types::MinimalAliasBody& _body);

                /*!
                 * @brief This function moves the value in member body
                 * @param _body New value to be moved in member body
                 */
                eProsima_user_DllExport void body(
                        eprosima::fastrtps::types::MinimalAliasBody&& _body);

                /*!
                 * @brief This function returns a constant reference to member body
                 * @return Constant reference to member body
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAliasBody& body() const;

                /*!
                 * @brief This function returns a reference to member body
                 * @return Reference to member body
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAliasBody& body();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalAliasType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AliasTypeFlag m_alias_flags;
                eprosima::fastrtps::types::MinimalAliasHeader m_header;
                eprosima::fastrtps::types::MinimalAliasBody m_body;

            };
            /*!
             * @brief This class represents the structure CompleteElementDetail defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteElementDetail
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteElementDetail();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteElementDetail();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteElementDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteElementDetail(
                        const CompleteElementDetail& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteElementDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteElementDetail(
                        CompleteElementDetail&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteElementDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteElementDetail& operator =(
                        const CompleteElementDetail& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteElementDetail that will be copied.
                 */
                eProsima_user_DllExport CompleteElementDetail& operator =(
                        CompleteElementDetail&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteElementDetail object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteElementDetail& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteElementDetail object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteElementDetail& x) const;

                /*!
                 * @brief This function copies the value in member ann_builtin
                 * @param _ann_builtin New value to be copied in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& _ann_builtin);

                /*!
                 * @brief This function moves the value in member ann_builtin
                 * @param _ann_builtin New value to be moved in member ann_builtin
                 */
                eProsima_user_DllExport void ann_builtin(
                        eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations&& _ann_builtin);

                /*!
                 * @brief This function returns a constant reference to member ann_builtin
                 * @return Constant reference to member ann_builtin
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin() const;

                /*!
                 * @brief This function returns a reference to member ann_builtin
                 * @return Reference to member ann_builtin
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& ann_builtin();
                /*!
                 * @brief This function copies the value in member ann_custom
                 * @param _ann_custom New value to be copied in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        const eprosima::fastrtps::types::AppliedAnnotationSeq& _ann_custom);

                /*!
                 * @brief This function moves the value in member ann_custom
                 * @param _ann_custom New value to be moved in member ann_custom
                 */
                eProsima_user_DllExport void ann_custom(
                        eprosima::fastrtps::types::AppliedAnnotationSeq&& _ann_custom);

                /*!
                 * @brief This function returns a constant reference to member ann_custom
                 * @return Constant reference to member ann_custom
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom() const;

                /*!
                 * @brief This function returns a reference to member ann_custom
                 * @return Reference to member ann_custom
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationSeq& ann_custom();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteElementDetail& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations m_ann_builtin;
                eprosima::fastrtps::types::AppliedAnnotationSeq m_ann_custom;

            };
            /*!
             * @brief This class represents the structure CommonCollectionElement defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonCollectionElement
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonCollectionElement();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonCollectionElement();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionElement(
                        const CommonCollectionElement& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionElement(
                        CommonCollectionElement&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionElement& operator =(
                        const CommonCollectionElement& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionElement& operator =(
                        CommonCollectionElement&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonCollectionElement& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonCollectionElement& x) const;

                /*!
                 * @brief This function sets a value in member element_flags
                 * @param _element_flags New value for member element_flags
                 */
                eProsima_user_DllExport void element_flags(
                        eprosima::fastrtps::types::CollectionElementFlag _element_flags);

                /*!
                 * @brief This function returns the value of member element_flags
                 * @return Value of member element_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag element_flags() const;

                /*!
                 * @brief This function returns a reference to member element_flags
                 * @return Reference to member element_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag& element_flags();

                /*!
                 * @brief This function copies the value in member type
                 * @param _type New value to be copied in member type
                 */
                eProsima_user_DllExport void type(
                        const eprosima::fastrtps::types::TypeIdentifier& _type);

                /*!
                 * @brief This function moves the value in member type
                 * @param _type New value to be moved in member type
                 */
                eProsima_user_DllExport void type(
                        eprosima::fastrtps::types::TypeIdentifier&& _type);

                /*!
                 * @brief This function returns a constant reference to member type
                 * @return Constant reference to member type
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type() const;

                /*!
                 * @brief This function returns a reference to member type
                 * @return Reference to member type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonCollectionElement& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionElementFlag m_element_flags;
                eprosima::fastrtps::types::TypeIdentifier m_type;

            };
            /*!
             * @brief This class represents the structure CompleteCollectionElement defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteCollectionElement
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteCollectionElement();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteCollectionElement();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionElement(
                        const CompleteCollectionElement& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionElement(
                        CompleteCollectionElement&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionElement& operator =(
                        const CompleteCollectionElement& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionElement that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionElement& operator =(
                        CompleteCollectionElement&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteCollectionElement& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteCollectionElement& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonCollectionElement& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonCollectionElement&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonCollectionElement& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonCollectionElement& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteElementDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteElementDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteElementDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteElementDetail& detail();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteCollectionElement& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonCollectionElement m_common;
                eprosima::fastrtps::types::CompleteElementDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalCollectionElement defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalCollectionElement
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalCollectionElement();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalCollectionElement();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionElement that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionElement(
                        const MinimalCollectionElement& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionElement that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionElement(
                        MinimalCollectionElement&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionElement that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionElement& operator =(
                        const MinimalCollectionElement& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionElement that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionElement& operator =(
                        MinimalCollectionElement&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalCollectionElement& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalCollectionElement object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalCollectionElement& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonCollectionElement& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonCollectionElement&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonCollectionElement& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonCollectionElement& common();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalCollectionElement& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonCollectionElement m_common;

            };
            /*!
             * @brief This class represents the structure CommonCollectionHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonCollectionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonCollectionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonCollectionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionHeader(
                        const CommonCollectionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionHeader(
                        CommonCollectionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionHeader& operator =(
                        const CommonCollectionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CommonCollectionHeader& operator =(
                        CommonCollectionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonCollectionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonCollectionHeader& x) const;

                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::LBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound& bound();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonCollectionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::LBound m_bound;

            };
            /*!
             * @brief This class represents the structure CompleteCollectionHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteCollectionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteCollectionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteCollectionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionHeader(
                        const CompleteCollectionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionHeader(
                        CompleteCollectionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionHeader& operator =(
                        const CompleteCollectionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteCollectionHeader& operator =(
                        CompleteCollectionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteCollectionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteCollectionHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonCollectionHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonCollectionHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonCollectionHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonCollectionHeader& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteCollectionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonCollectionHeader m_common;
                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalCollectionHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalCollectionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalCollectionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalCollectionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionHeader(
                        const MinimalCollectionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionHeader(
                        MinimalCollectionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionHeader& operator =(
                        const MinimalCollectionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalCollectionHeader& operator =(
                        MinimalCollectionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalCollectionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalCollectionHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonCollectionHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonCollectionHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonCollectionHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonCollectionHeader& common();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalCollectionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonCollectionHeader m_common;

            };
            /*!
             * @brief This class represents the structure CompleteSequenceType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteSequenceType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteSequenceType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteSequenceType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteSequenceType that will be copied.
                 */
                eProsima_user_DllExport CompleteSequenceType(
                        const CompleteSequenceType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteSequenceType that will be copied.
                 */
                eProsima_user_DllExport CompleteSequenceType(
                        CompleteSequenceType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteSequenceType that will be copied.
                 */
                eProsima_user_DllExport CompleteSequenceType& operator =(
                        const CompleteSequenceType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteSequenceType that will be copied.
                 */
                eProsima_user_DllExport CompleteSequenceType& operator =(
                        CompleteSequenceType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteSequenceType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteSequenceType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteSequenceType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteSequenceType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::CompleteCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::CompleteCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteSequenceType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::CompleteCollectionHeader m_header;
                eprosima::fastrtps::types::CompleteCollectionElement m_element;

            };
            /*!
             * @brief This class represents the structure MinimalSequenceType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalSequenceType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalSequenceType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalSequenceType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalSequenceType that will be copied.
                 */
                eProsima_user_DllExport MinimalSequenceType(
                        const MinimalSequenceType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalSequenceType that will be copied.
                 */
                eProsima_user_DllExport MinimalSequenceType(
                        MinimalSequenceType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalSequenceType that will be copied.
                 */
                eProsima_user_DllExport MinimalSequenceType& operator =(
                        const MinimalSequenceType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalSequenceType that will be copied.
                 */
                eProsima_user_DllExport MinimalSequenceType& operator =(
                        MinimalSequenceType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalSequenceType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalSequenceType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalSequenceType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalSequenceType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::MinimalCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::MinimalCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalSequenceType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::MinimalCollectionHeader m_header;
                eprosima::fastrtps::types::MinimalCollectionElement m_element;

            };
            /*!
             * @brief This class represents the structure CommonArrayHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonArrayHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonArrayHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonArrayHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CommonArrayHeader(
                        const CommonArrayHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CommonArrayHeader(
                        CommonArrayHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CommonArrayHeader& operator =(
                        const CommonArrayHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CommonArrayHeader& operator =(
                        CommonArrayHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonArrayHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonArrayHeader& x) const;

                /*!
                 * @brief This function copies the value in member bound_seq
                 * @param _bound_seq New value to be copied in member bound_seq
                 */
                eProsima_user_DllExport void bound_seq(
                        const eprosima::fastrtps::types::LBoundSeq& _bound_seq);

                /*!
                 * @brief This function moves the value in member bound_seq
                 * @param _bound_seq New value to be moved in member bound_seq
                 */
                eProsima_user_DllExport void bound_seq(
                        eprosima::fastrtps::types::LBoundSeq&& _bound_seq);

                /*!
                 * @brief This function returns a constant reference to member bound_seq
                 * @return Constant reference to member bound_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::LBoundSeq& bound_seq() const;

                /*!
                 * @brief This function returns a reference to member bound_seq
                 * @return Reference to member bound_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBoundSeq& bound_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonArrayHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::LBoundSeq m_bound_seq;

            };
            /*!
             * @brief This class represents the structure CompleteArrayHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteArrayHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteArrayHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteArrayHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayHeader(
                        const CompleteArrayHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayHeader(
                        CompleteArrayHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayHeader& operator =(
                        const CompleteArrayHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayHeader& operator =(
                        CompleteArrayHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteArrayHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteArrayHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonArrayHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonArrayHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonArrayHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonArrayHeader& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteArrayHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonArrayHeader m_common;
                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalArrayHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalArrayHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalArrayHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalArrayHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayHeader(
                        const MinimalArrayHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayHeader(
                        MinimalArrayHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayHeader& operator =(
                        const MinimalArrayHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayHeader& operator =(
                        MinimalArrayHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalArrayHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalArrayHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalArrayHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonArrayHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonArrayHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonArrayHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonArrayHeader& common();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalArrayHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonArrayHeader m_common;

            };
            /*!
             * @brief This class represents the structure CompleteArrayType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteArrayType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteArrayType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteArrayType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayType that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayType(
                        const CompleteArrayType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayType that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayType(
                        CompleteArrayType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayType that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayType& operator =(
                        const CompleteArrayType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteArrayType that will be copied.
                 */
                eProsima_user_DllExport CompleteArrayType& operator =(
                        CompleteArrayType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteArrayType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteArrayType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteArrayType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteArrayType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteArrayHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteArrayHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteArrayHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteArrayHeader& header();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::CompleteCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::CompleteCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteArrayType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::CompleteArrayHeader m_header;
                eprosima::fastrtps::types::CompleteCollectionElement m_element;

            };
            /*!
             * @brief This class represents the structure MinimalArrayType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalArrayType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalArrayType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalArrayType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayType that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayType(
                        const MinimalArrayType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayType that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayType(
                        MinimalArrayType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayType that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayType& operator =(
                        const MinimalArrayType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalArrayType that will be copied.
                 */
                eProsima_user_DllExport MinimalArrayType& operator =(
                        MinimalArrayType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalArrayType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalArrayType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalArrayType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalArrayType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalArrayHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalArrayHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalArrayHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalArrayHeader& header();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::MinimalCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::MinimalCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalArrayType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::MinimalArrayHeader m_header;
                eprosima::fastrtps::types::MinimalCollectionElement m_element;

            };
            /*!
             * @brief This class represents the structure CompleteMapType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteMapType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteMapType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteMapType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMapType that will be copied.
                 */
                eProsima_user_DllExport CompleteMapType(
                        const CompleteMapType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMapType that will be copied.
                 */
                eProsima_user_DllExport CompleteMapType(
                        CompleteMapType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMapType that will be copied.
                 */
                eProsima_user_DllExport CompleteMapType& operator =(
                        const CompleteMapType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteMapType that will be copied.
                 */
                eProsima_user_DllExport CompleteMapType& operator =(
                        CompleteMapType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteMapType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteMapType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteMapType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteMapType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member key
                 * @param _key New value to be copied in member key
                 */
                eProsima_user_DllExport void key(
                        const eprosima::fastrtps::types::CompleteCollectionElement& _key);

                /*!
                 * @brief This function moves the value in member key
                 * @param _key New value to be moved in member key
                 */
                eProsima_user_DllExport void key(
                        eprosima::fastrtps::types::CompleteCollectionElement&& _key);

                /*!
                 * @brief This function returns a constant reference to member key
                 * @return Constant reference to member key
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionElement& key() const;

                /*!
                 * @brief This function returns a reference to member key
                 * @return Reference to member key
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionElement& key();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::CompleteCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::CompleteCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteMapType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::CompleteCollectionHeader m_header;
                eprosima::fastrtps::types::CompleteCollectionElement m_key;
                eprosima::fastrtps::types::CompleteCollectionElement m_element;

            };
            /*!
             * @brief This class represents the structure MinimalMapType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalMapType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalMapType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalMapType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMapType that will be copied.
                 */
                eProsima_user_DllExport MinimalMapType(
                        const MinimalMapType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMapType that will be copied.
                 */
                eProsima_user_DllExport MinimalMapType(
                        MinimalMapType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMapType that will be copied.
                 */
                eProsima_user_DllExport MinimalMapType& operator =(
                        const MinimalMapType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalMapType that will be copied.
                 */
                eProsima_user_DllExport MinimalMapType& operator =(
                        MinimalMapType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalMapType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalMapType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalMapType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalMapType& x) const;

                /*!
                 * @brief This function sets a value in member collection_flag
                 * @param _collection_flag New value for member collection_flag
                 */
                eProsima_user_DllExport void collection_flag(
                        eprosima::fastrtps::types::CollectionTypeFlag _collection_flag);

                /*!
                 * @brief This function returns the value of member collection_flag
                 * @return Value of member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag collection_flag() const;

                /*!
                 * @brief This function returns a reference to member collection_flag
                 * @return Reference to member collection_flag
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionTypeFlag& collection_flag();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member key
                 * @param _key New value to be copied in member key
                 */
                eProsima_user_DllExport void key(
                        const eprosima::fastrtps::types::MinimalCollectionElement& _key);

                /*!
                 * @brief This function moves the value in member key
                 * @param _key New value to be moved in member key
                 */
                eProsima_user_DllExport void key(
                        eprosima::fastrtps::types::MinimalCollectionElement&& _key);

                /*!
                 * @brief This function returns a constant reference to member key
                 * @return Constant reference to member key
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionElement& key() const;

                /*!
                 * @brief This function returns a reference to member key
                 * @return Reference to member key
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionElement& key();
                /*!
                 * @brief This function copies the value in member element
                 * @param _element New value to be copied in member element
                 */
                eProsima_user_DllExport void element(
                        const eprosima::fastrtps::types::MinimalCollectionElement& _element);

                /*!
                 * @brief This function moves the value in member element
                 * @param _element New value to be moved in member element
                 */
                eProsima_user_DllExport void element(
                        eprosima::fastrtps::types::MinimalCollectionElement&& _element);

                /*!
                 * @brief This function returns a constant reference to member element
                 * @return Constant reference to member element
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalCollectionElement& element() const;

                /*!
                 * @brief This function returns a reference to member element
                 * @return Reference to member element
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalCollectionElement& element();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalMapType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CollectionTypeFlag m_collection_flag;
                eprosima::fastrtps::types::MinimalCollectionHeader m_header;
                eprosima::fastrtps::types::MinimalCollectionElement m_key;
                eprosima::fastrtps::types::MinimalCollectionElement m_element;

            };
            typedef uint16_t BitBound;
            /*!
             * @brief This class represents the structure CommonEnumeratedLiteral defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonEnumeratedLiteral
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonEnumeratedLiteral();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonEnumeratedLiteral();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedLiteral(
                        const CommonEnumeratedLiteral& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedLiteral(
                        CommonEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedLiteral& operator =(
                        const CommonEnumeratedLiteral& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedLiteral& operator =(
                        CommonEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonEnumeratedLiteral& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonEnumeratedLiteral& x) const;

                /*!
                 * @brief This function sets a value in member value
                 * @param _value New value for member value
                 */
                eProsima_user_DllExport void value(
                        int32_t _value);

                /*!
                 * @brief This function returns the value of member value
                 * @return Value of member value
                 */
                eProsima_user_DllExport int32_t value() const;

                /*!
                 * @brief This function returns a reference to member value
                 * @return Reference to member value
                 */
                eProsima_user_DllExport int32_t& value();

                /*!
                 * @brief This function sets a value in member flags
                 * @param _flags New value for member flags
                 */
                eProsima_user_DllExport void flags(
                        eprosima::fastrtps::types::EnumeratedLiteralFlag _flags);

                /*!
                 * @brief This function returns the value of member flags
                 * @return Value of member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumeratedLiteralFlag flags() const;

                /*!
                 * @brief This function returns a reference to member flags
                 * @return Reference to member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumeratedLiteralFlag& flags();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonEnumeratedLiteral& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                int32_t m_value;
                eprosima::fastrtps::types::EnumeratedLiteralFlag m_flags;

            };
            /*!
             * @brief This class represents the structure CompleteEnumeratedLiteral defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteEnumeratedLiteral
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteEnumeratedLiteral();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteEnumeratedLiteral();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedLiteral(
                        const CompleteEnumeratedLiteral& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedLiteral(
                        CompleteEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedLiteral& operator =(
                        const CompleteEnumeratedLiteral& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedLiteral& operator =(
                        CompleteEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteEnumeratedLiteral& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteEnumeratedLiteral& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonEnumeratedLiteral& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonEnumeratedLiteral&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonEnumeratedLiteral& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonEnumeratedLiteral& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMemberDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteEnumeratedLiteral& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonEnumeratedLiteral m_common;
                eprosima::fastrtps::types::CompleteMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteEnumeratedLiteral> CompleteEnumeratedLiteralSeq;
            /*!
             * @brief This class represents the structure MinimalEnumeratedLiteral defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalEnumeratedLiteral
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalEnumeratedLiteral();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalEnumeratedLiteral();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedLiteral(
                        const MinimalEnumeratedLiteral& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedLiteral(
                        MinimalEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedLiteral& operator =(
                        const MinimalEnumeratedLiteral& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedLiteral that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedLiteral& operator =(
                        MinimalEnumeratedLiteral&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalEnumeratedLiteral& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedLiteral object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalEnumeratedLiteral& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonEnumeratedLiteral& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonEnumeratedLiteral&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonEnumeratedLiteral& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonEnumeratedLiteral& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalMemberDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalEnumeratedLiteral& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonEnumeratedLiteral m_common;
                eprosima::fastrtps::types::MinimalMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalEnumeratedLiteral> MinimalEnumeratedLiteralSeq;
            /*!
             * @brief This class represents the structure CommonEnumeratedHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonEnumeratedHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonEnumeratedHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonEnumeratedHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedHeader(
                        const CommonEnumeratedHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedHeader(
                        CommonEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedHeader& operator =(
                        const CommonEnumeratedHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CommonEnumeratedHeader& operator =(
                        CommonEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonEnumeratedHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonEnumeratedHeader& x) const;

                /*!
                 * @brief This function sets a value in member bit_bound
                 * @param _bit_bound New value for member bit_bound
                 */
                eProsima_user_DllExport void bit_bound(
                        eprosima::fastrtps::types::BitBound _bit_bound);

                /*!
                 * @brief This function returns the value of member bit_bound
                 * @return Value of member bit_bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitBound bit_bound() const;

                /*!
                 * @brief This function returns a reference to member bit_bound
                 * @return Reference to member bit_bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitBound& bit_bound();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonEnumeratedHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitBound m_bit_bound;

            };
            /*!
             * @brief This class represents the structure CompleteEnumeratedHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteEnumeratedHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteEnumeratedHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteEnumeratedHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedHeader(
                        const CompleteEnumeratedHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedHeader(
                        CompleteEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedHeader& operator =(
                        const CompleteEnumeratedHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedHeader& operator =(
                        CompleteEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteEnumeratedHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteEnumeratedHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonEnumeratedHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonEnumeratedHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonEnumeratedHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonEnumeratedHeader& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteEnumeratedHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonEnumeratedHeader m_common;
                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalEnumeratedHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalEnumeratedHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalEnumeratedHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalEnumeratedHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedHeader(
                        const MinimalEnumeratedHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedHeader(
                        MinimalEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedHeader& operator =(
                        const MinimalEnumeratedHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedHeader& operator =(
                        MinimalEnumeratedHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalEnumeratedHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalEnumeratedHeader& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonEnumeratedHeader& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonEnumeratedHeader&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonEnumeratedHeader& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonEnumeratedHeader& common();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalEnumeratedHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonEnumeratedHeader m_common;

            };
            /*!
             * @brief This class represents the structure CompleteEnumeratedType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteEnumeratedType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteEnumeratedType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteEnumeratedType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedType(
                        const CompleteEnumeratedType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedType(
                        CompleteEnumeratedType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedType& operator =(
                        const CompleteEnumeratedType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport CompleteEnumeratedType& operator =(
                        CompleteEnumeratedType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteEnumeratedType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteEnumeratedType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteEnumeratedType& x) const;

                /*!
                 * @brief This function sets a value in member enum_flags
                 * @param _enum_flags New value for member enum_flags
                 */
                eProsima_user_DllExport void enum_flags(
                        eprosima::fastrtps::types::EnumTypeFlag _enum_flags);

                /*!
                 * @brief This function returns the value of member enum_flags
                 * @return Value of member enum_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumTypeFlag enum_flags() const;

                /*!
                 * @brief This function returns a reference to member enum_flags
                 * @return Reference to member enum_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumTypeFlag& enum_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteEnumeratedHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteEnumeratedHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteEnumeratedHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteEnumeratedHeader& header();
                /*!
                 * @brief This function copies the value in member literal_seq
                 * @param _literal_seq New value to be copied in member literal_seq
                 */
                eProsima_user_DllExport void literal_seq(
                        const eprosima::fastrtps::types::CompleteEnumeratedLiteralSeq& _literal_seq);

                /*!
                 * @brief This function moves the value in member literal_seq
                 * @param _literal_seq New value to be moved in member literal_seq
                 */
                eProsima_user_DllExport void literal_seq(
                        eprosima::fastrtps::types::CompleteEnumeratedLiteralSeq&& _literal_seq);

                /*!
                 * @brief This function returns a constant reference to member literal_seq
                 * @return Constant reference to member literal_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteEnumeratedLiteralSeq& literal_seq() const;

                /*!
                 * @brief This function returns a reference to member literal_seq
                 * @return Reference to member literal_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteEnumeratedLiteralSeq& literal_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteEnumeratedType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::EnumTypeFlag m_enum_flags;
                eprosima::fastrtps::types::CompleteEnumeratedHeader m_header;
                eprosima::fastrtps::types::CompleteEnumeratedLiteralSeq m_literal_seq;

            };
            /*!
             * @brief This class represents the structure MinimalEnumeratedType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalEnumeratedType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalEnumeratedType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalEnumeratedType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedType(
                        const MinimalEnumeratedType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedType(
                        MinimalEnumeratedType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedType& operator =(
                        const MinimalEnumeratedType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalEnumeratedType that will be copied.
                 */
                eProsima_user_DllExport MinimalEnumeratedType& operator =(
                        MinimalEnumeratedType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalEnumeratedType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalEnumeratedType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalEnumeratedType& x) const;

                /*!
                 * @brief This function sets a value in member enum_flags
                 * @param _enum_flags New value for member enum_flags
                 */
                eProsima_user_DllExport void enum_flags(
                        eprosima::fastrtps::types::EnumTypeFlag _enum_flags);

                /*!
                 * @brief This function returns the value of member enum_flags
                 * @return Value of member enum_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumTypeFlag enum_flags() const;

                /*!
                 * @brief This function returns a reference to member enum_flags
                 * @return Reference to member enum_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EnumTypeFlag& enum_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalEnumeratedHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalEnumeratedHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalEnumeratedHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalEnumeratedHeader& header();
                /*!
                 * @brief This function copies the value in member literal_seq
                 * @param _literal_seq New value to be copied in member literal_seq
                 */
                eProsima_user_DllExport void literal_seq(
                        const eprosima::fastrtps::types::MinimalEnumeratedLiteralSeq& _literal_seq);

                /*!
                 * @brief This function moves the value in member literal_seq
                 * @param _literal_seq New value to be moved in member literal_seq
                 */
                eProsima_user_DllExport void literal_seq(
                        eprosima::fastrtps::types::MinimalEnumeratedLiteralSeq&& _literal_seq);

                /*!
                 * @brief This function returns a constant reference to member literal_seq
                 * @return Constant reference to member literal_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalEnumeratedLiteralSeq& literal_seq() const;

                /*!
                 * @brief This function returns a reference to member literal_seq
                 * @return Reference to member literal_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalEnumeratedLiteralSeq& literal_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalEnumeratedType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::EnumTypeFlag m_enum_flags;
                eprosima::fastrtps::types::MinimalEnumeratedHeader m_header;
                eprosima::fastrtps::types::MinimalEnumeratedLiteralSeq m_literal_seq;

            };
            /*!
             * @brief This class represents the structure CommonBitflag defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonBitflag
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonBitflag();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonBitflag();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitflag that will be copied.
                 */
                eProsima_user_DllExport CommonBitflag(
                        const CommonBitflag& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitflag that will be copied.
                 */
                eProsima_user_DllExport CommonBitflag(
                        CommonBitflag&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitflag that will be copied.
                 */
                eProsima_user_DllExport CommonBitflag& operator =(
                        const CommonBitflag& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitflag that will be copied.
                 */
                eProsima_user_DllExport CommonBitflag& operator =(
                        CommonBitflag&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonBitflag& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonBitflag& x) const;

                /*!
                 * @brief This function sets a value in member position
                 * @param _position New value for member position
                 */
                eProsima_user_DllExport void position(
                        uint16_t _position);

                /*!
                 * @brief This function returns the value of member position
                 * @return Value of member position
                 */
                eProsima_user_DllExport uint16_t position() const;

                /*!
                 * @brief This function returns a reference to member position
                 * @return Reference to member position
                 */
                eProsima_user_DllExport uint16_t& position();

                /*!
                 * @brief This function sets a value in member flags
                 * @param _flags New value for member flags
                 */
                eProsima_user_DllExport void flags(
                        eprosima::fastrtps::types::BitflagFlag _flags);

                /*!
                 * @brief This function returns the value of member flags
                 * @return Value of member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitflagFlag flags() const;

                /*!
                 * @brief This function returns a reference to member flags
                 * @return Reference to member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitflagFlag& flags();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonBitflag& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                uint16_t m_position;
                eprosima::fastrtps::types::BitflagFlag m_flags;

            };
            /*!
             * @brief This class represents the structure CompleteBitflag defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteBitflag
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteBitflag();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteBitflag();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitflag that will be copied.
                 */
                eProsima_user_DllExport CompleteBitflag(
                        const CompleteBitflag& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitflag that will be copied.
                 */
                eProsima_user_DllExport CompleteBitflag(
                        CompleteBitflag&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitflag that will be copied.
                 */
                eProsima_user_DllExport CompleteBitflag& operator =(
                        const CompleteBitflag& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitflag that will be copied.
                 */
                eProsima_user_DllExport CompleteBitflag& operator =(
                        CompleteBitflag&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteBitflag& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteBitflag& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonBitflag& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonBitflag&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonBitflag& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonBitflag& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMemberDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteBitflag& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonBitflag m_common;
                eprosima::fastrtps::types::CompleteMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteBitflag> CompleteBitflagSeq;
            /*!
             * @brief This class represents the structure MinimalBitflag defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalBitflag
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalBitflag();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalBitflag();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitflag that will be copied.
                 */
                eProsima_user_DllExport MinimalBitflag(
                        const MinimalBitflag& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitflag that will be copied.
                 */
                eProsima_user_DllExport MinimalBitflag(
                        MinimalBitflag&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitflag that will be copied.
                 */
                eProsima_user_DllExport MinimalBitflag& operator =(
                        const MinimalBitflag& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitflag that will be copied.
                 */
                eProsima_user_DllExport MinimalBitflag& operator =(
                        MinimalBitflag&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalBitflag& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitflag object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalBitflag& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonBitflag& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonBitflag&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonBitflag& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonBitflag& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::MinimalMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::MinimalMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalMemberDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalBitflag& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonBitflag m_common;
                eprosima::fastrtps::types::MinimalMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalBitflag> MinimalBitflagSeq;
            /*!
             * @brief This class represents the structure CommonBitmaskHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonBitmaskHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonBitmaskHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonBitmaskHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitmaskHeader that will be copied.
                 */
                eProsima_user_DllExport CommonBitmaskHeader(
                        const CommonBitmaskHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitmaskHeader that will be copied.
                 */
                eProsima_user_DllExport CommonBitmaskHeader(
                        CommonBitmaskHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitmaskHeader that will be copied.
                 */
                eProsima_user_DllExport CommonBitmaskHeader& operator =(
                        const CommonBitmaskHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitmaskHeader that will be copied.
                 */
                eProsima_user_DllExport CommonBitmaskHeader& operator =(
                        CommonBitmaskHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitmaskHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonBitmaskHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitmaskHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonBitmaskHeader& x) const;

                /*!
                 * @brief This function sets a value in member bit_bound
                 * @param _bit_bound New value for member bit_bound
                 */
                eProsima_user_DllExport void bit_bound(
                        eprosima::fastrtps::types::BitBound _bit_bound);

                /*!
                 * @brief This function returns the value of member bit_bound
                 * @return Value of member bit_bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitBound bit_bound() const;

                /*!
                 * @brief This function returns a reference to member bit_bound
                 * @return Reference to member bit_bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitBound& bit_bound();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonBitmaskHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitBound m_bit_bound;

            };
            typedef eprosima::fastrtps::types::CompleteEnumeratedHeader CompleteBitmaskHeader;
            typedef eprosima::fastrtps::types::MinimalEnumeratedHeader MinimalBitmaskHeader;
            /*!
             * @brief This class represents the structure CompleteBitmaskType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteBitmaskType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteBitmaskType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteBitmaskType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitmaskType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitmaskType(
                        const CompleteBitmaskType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitmaskType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitmaskType(
                        CompleteBitmaskType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitmaskType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitmaskType& operator =(
                        const CompleteBitmaskType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitmaskType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitmaskType& operator =(
                        CompleteBitmaskType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitmaskType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteBitmaskType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitmaskType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteBitmaskType& x) const;

                /*!
                 * @brief This function sets a value in member bitmask_flags
                 * @param _bitmask_flags New value for member bitmask_flags
                 */
                eProsima_user_DllExport void bitmask_flags(
                        eprosima::fastrtps::types::BitmaskTypeFlag _bitmask_flags);

                /*!
                 * @brief This function returns the value of member bitmask_flags
                 * @return Value of member bitmask_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitmaskTypeFlag bitmask_flags() const;

                /*!
                 * @brief This function returns a reference to member bitmask_flags
                 * @return Reference to member bitmask_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitmaskTypeFlag& bitmask_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteBitmaskHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteBitmaskHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitmaskHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitmaskHeader& header();
                /*!
                 * @brief This function copies the value in member flag_seq
                 * @param _flag_seq New value to be copied in member flag_seq
                 */
                eProsima_user_DllExport void flag_seq(
                        const eprosima::fastrtps::types::CompleteBitflagSeq& _flag_seq);

                /*!
                 * @brief This function moves the value in member flag_seq
                 * @param _flag_seq New value to be moved in member flag_seq
                 */
                eProsima_user_DllExport void flag_seq(
                        eprosima::fastrtps::types::CompleteBitflagSeq&& _flag_seq);

                /*!
                 * @brief This function returns a constant reference to member flag_seq
                 * @return Constant reference to member flag_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitflagSeq& flag_seq() const;

                /*!
                 * @brief This function returns a reference to member flag_seq
                 * @return Reference to member flag_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitflagSeq& flag_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteBitmaskType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitmaskTypeFlag m_bitmask_flags;
                eprosima::fastrtps::types::CompleteBitmaskHeader m_header;
                eprosima::fastrtps::types::CompleteBitflagSeq m_flag_seq;

            };
            /*!
             * @brief This class represents the structure MinimalBitmaskType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalBitmaskType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalBitmaskType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalBitmaskType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitmaskType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitmaskType(
                        const MinimalBitmaskType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitmaskType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitmaskType(
                        MinimalBitmaskType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitmaskType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitmaskType& operator =(
                        const MinimalBitmaskType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitmaskType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitmaskType& operator =(
                        MinimalBitmaskType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitmaskType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalBitmaskType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitmaskType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalBitmaskType& x) const;

                /*!
                 * @brief This function sets a value in member bitmask_flags
                 * @param _bitmask_flags New value for member bitmask_flags
                 */
                eProsima_user_DllExport void bitmask_flags(
                        eprosima::fastrtps::types::BitmaskTypeFlag _bitmask_flags);

                /*!
                 * @brief This function returns the value of member bitmask_flags
                 * @return Value of member bitmask_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitmaskTypeFlag bitmask_flags() const;

                /*!
                 * @brief This function returns a reference to member bitmask_flags
                 * @return Reference to member bitmask_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitmaskTypeFlag& bitmask_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalBitmaskHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalBitmaskHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitmaskHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitmaskHeader& header();
                /*!
                 * @brief This function copies the value in member flag_seq
                 * @param _flag_seq New value to be copied in member flag_seq
                 */
                eProsima_user_DllExport void flag_seq(
                        const eprosima::fastrtps::types::MinimalBitflagSeq& _flag_seq);

                /*!
                 * @brief This function moves the value in member flag_seq
                 * @param _flag_seq New value to be moved in member flag_seq
                 */
                eProsima_user_DllExport void flag_seq(
                        eprosima::fastrtps::types::MinimalBitflagSeq&& _flag_seq);

                /*!
                 * @brief This function returns a constant reference to member flag_seq
                 * @return Constant reference to member flag_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitflagSeq& flag_seq() const;

                /*!
                 * @brief This function returns a reference to member flag_seq
                 * @return Reference to member flag_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitflagSeq& flag_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalBitmaskType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitmaskTypeFlag m_bitmask_flags;
                eprosima::fastrtps::types::MinimalBitmaskHeader m_header;
                eprosima::fastrtps::types::MinimalBitflagSeq m_flag_seq;

            };
            /*!
             * @brief This class represents the structure CommonBitfield defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CommonBitfield
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CommonBitfield();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CommonBitfield();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitfield that will be copied.
                 */
                eProsima_user_DllExport CommonBitfield(
                        const CommonBitfield& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitfield that will be copied.
                 */
                eProsima_user_DllExport CommonBitfield(
                        CommonBitfield&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitfield that will be copied.
                 */
                eProsima_user_DllExport CommonBitfield& operator =(
                        const CommonBitfield& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CommonBitfield that will be copied.
                 */
                eProsima_user_DllExport CommonBitfield& operator =(
                        CommonBitfield&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CommonBitfield& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CommonBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CommonBitfield& x) const;

                /*!
                 * @brief This function sets a value in member position
                 * @param _position New value for member position
                 */
                eProsima_user_DllExport void position(
                        uint16_t _position);

                /*!
                 * @brief This function returns the value of member position
                 * @return Value of member position
                 */
                eProsima_user_DllExport uint16_t position() const;

                /*!
                 * @brief This function returns a reference to member position
                 * @return Reference to member position
                 */
                eProsima_user_DllExport uint16_t& position();

                /*!
                 * @brief This function sets a value in member flags
                 * @param _flags New value for member flags
                 */
                eProsima_user_DllExport void flags(
                        eprosima::fastrtps::types::BitsetMemberFlag _flags);

                /*!
                 * @brief This function returns the value of member flags
                 * @return Value of member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetMemberFlag flags() const;

                /*!
                 * @brief This function returns a reference to member flags
                 * @return Reference to member flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetMemberFlag& flags();

                /*!
                 * @brief This function sets a value in member bitcount
                 * @param _bitcount New value for member bitcount
                 */
                eProsima_user_DllExport void bitcount(
                        uint8_t _bitcount);

                /*!
                 * @brief This function returns the value of member bitcount
                 * @return Value of member bitcount
                 */
                eProsima_user_DllExport uint8_t bitcount() const;

                /*!
                 * @brief This function returns a reference to member bitcount
                 * @return Reference to member bitcount
                 */
                eProsima_user_DllExport uint8_t& bitcount();

                /*!
                 * @brief This function sets a value in member holder_type
                 * @param _holder_type New value for member holder_type
                 */
                eProsima_user_DllExport void holder_type(
                        eprosima::fastrtps::types::TypeKind _holder_type);

                /*!
                 * @brief This function returns the value of member holder_type
                 * @return Value of member holder_type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeKind holder_type() const;

                /*!
                 * @brief This function returns a reference to member holder_type
                 * @return Reference to member holder_type
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeKind& holder_type();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CommonBitfield& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                uint16_t m_position;
                eprosima::fastrtps::types::BitsetMemberFlag m_flags;
                uint8_t m_bitcount;
                eprosima::fastrtps::types::TypeKind m_holder_type;

            };
            /*!
             * @brief This class represents the structure CompleteBitfield defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteBitfield
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteBitfield();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteBitfield();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitfield that will be copied.
                 */
                eProsima_user_DllExport CompleteBitfield(
                        const CompleteBitfield& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitfield that will be copied.
                 */
                eProsima_user_DllExport CompleteBitfield(
                        CompleteBitfield&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitfield that will be copied.
                 */
                eProsima_user_DllExport CompleteBitfield& operator =(
                        const CompleteBitfield& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitfield that will be copied.
                 */
                eProsima_user_DllExport CompleteBitfield& operator =(
                        CompleteBitfield&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteBitfield& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteBitfield& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonBitfield& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonBitfield&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonBitfield& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonBitfield& common();
                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteMemberDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteMemberDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMemberDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMemberDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteBitfield& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonBitfield m_common;
                eprosima::fastrtps::types::CompleteMemberDetail m_detail;

            };
            typedef std::vector<eprosima::fastrtps::types::CompleteBitfield> CompleteBitfieldSeq;
            /*!
             * @brief This class represents the structure MinimalBitfield defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalBitfield
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalBitfield();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalBitfield();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitfield that will be copied.
                 */
                eProsima_user_DllExport MinimalBitfield(
                        const MinimalBitfield& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitfield that will be copied.
                 */
                eProsima_user_DllExport MinimalBitfield(
                        MinimalBitfield&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitfield that will be copied.
                 */
                eProsima_user_DllExport MinimalBitfield& operator =(
                        const MinimalBitfield& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitfield that will be copied.
                 */
                eProsima_user_DllExport MinimalBitfield& operator =(
                        MinimalBitfield&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalBitfield& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitfield object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalBitfield& x) const;

                /*!
                 * @brief This function copies the value in member common
                 * @param _common New value to be copied in member common
                 */
                eProsima_user_DllExport void common(
                        const eprosima::fastrtps::types::CommonBitfield& _common);

                /*!
                 * @brief This function moves the value in member common
                 * @param _common New value to be moved in member common
                 */
                eProsima_user_DllExport void common(
                        eprosima::fastrtps::types::CommonBitfield&& _common);

                /*!
                 * @brief This function returns a constant reference to member common
                 * @return Constant reference to member common
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CommonBitfield& common() const;

                /*!
                 * @brief This function returns a reference to member common
                 * @return Reference to member common
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CommonBitfield& common();
                /*!
                 * @brief This function copies the value in member name_hash
                 * @param _name_hash New value to be copied in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        const eprosima::fastrtps::types::NameHash& _name_hash);

                /*!
                 * @brief This function moves the value in member name_hash
                 * @param _name_hash New value to be moved in member name_hash
                 */
                eProsima_user_DllExport void name_hash(
                        eprosima::fastrtps::types::NameHash&& _name_hash);

                /*!
                 * @brief This function returns a constant reference to member name_hash
                 * @return Constant reference to member name_hash
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::NameHash& name_hash() const;

                /*!
                 * @brief This function returns a reference to member name_hash
                 * @return Reference to member name_hash
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::NameHash& name_hash();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalBitfield& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CommonBitfield m_common;
                eprosima::fastrtps::types::NameHash m_name_hash;

            };
            typedef std::vector<eprosima::fastrtps::types::MinimalBitfield> MinimalBitfieldSeq;
            /*!
             * @brief This class represents the structure CompleteBitsetHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteBitsetHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteBitsetHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteBitsetHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetHeader(
                        const CompleteBitsetHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetHeader(
                        CompleteBitsetHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetHeader& operator =(
                        const CompleteBitsetHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetHeader& operator =(
                        CompleteBitsetHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitsetHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteBitsetHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitsetHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteBitsetHeader& x) const;

                /*!
                 * @brief This function copies the value in member detail
                 * @param _detail New value to be copied in member detail
                 */
                eProsima_user_DllExport void detail(
                        const eprosima::fastrtps::types::CompleteTypeDetail& _detail);

                /*!
                 * @brief This function moves the value in member detail
                 * @param _detail New value to be moved in member detail
                 */
                eProsima_user_DllExport void detail(
                        eprosima::fastrtps::types::CompleteTypeDetail&& _detail);

                /*!
                 * @brief This function returns a constant reference to member detail
                 * @return Constant reference to member detail
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeDetail& detail() const;

                /*!
                 * @brief This function returns a reference to member detail
                 * @return Reference to member detail
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeDetail& detail();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteBitsetHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::CompleteTypeDetail m_detail;

            };
            /*!
             * @brief This class represents the structure MinimalBitsetHeader defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalBitsetHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalBitsetHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalBitsetHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetHeader(
                        const MinimalBitsetHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetHeader(
                        MinimalBitsetHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetHeader& operator =(
                        const MinimalBitsetHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetHeader that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetHeader& operator =(
                        MinimalBitsetHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitsetHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalBitsetHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitsetHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalBitsetHeader& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalBitsetHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the structure CompleteBitsetType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteBitsetType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteBitsetType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteBitsetType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetType(
                        const CompleteBitsetType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetType(
                        CompleteBitsetType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetType& operator =(
                        const CompleteBitsetType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteBitsetType that will be copied.
                 */
                eProsima_user_DllExport CompleteBitsetType& operator =(
                        CompleteBitsetType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitsetType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteBitsetType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteBitsetType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteBitsetType& x) const;

                /*!
                 * @brief This function sets a value in member bitset_flags
                 * @param _bitset_flags New value for member bitset_flags
                 */
                eProsima_user_DllExport void bitset_flags(
                        eprosima::fastrtps::types::BitsetTypeFlag _bitset_flags);

                /*!
                 * @brief This function returns the value of member bitset_flags
                 * @return Value of member bitset_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetTypeFlag bitset_flags() const;

                /*!
                 * @brief This function returns a reference to member bitset_flags
                 * @return Reference to member bitset_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetTypeFlag& bitset_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::CompleteBitsetHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::CompleteBitsetHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitsetHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitsetHeader& header();
                /*!
                 * @brief This function copies the value in member field_seq
                 * @param _field_seq New value to be copied in member field_seq
                 */
                eProsima_user_DllExport void field_seq(
                        const eprosima::fastrtps::types::CompleteBitfieldSeq& _field_seq);

                /*!
                 * @brief This function moves the value in member field_seq
                 * @param _field_seq New value to be moved in member field_seq
                 */
                eProsima_user_DllExport void field_seq(
                        eprosima::fastrtps::types::CompleteBitfieldSeq&& _field_seq);

                /*!
                 * @brief This function returns a constant reference to member field_seq
                 * @return Constant reference to member field_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitfieldSeq& field_seq() const;

                /*!
                 * @brief This function returns a reference to member field_seq
                 * @return Reference to member field_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitfieldSeq& field_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteBitsetType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitsetTypeFlag m_bitset_flags;
                eprosima::fastrtps::types::CompleteBitsetHeader m_header;
                eprosima::fastrtps::types::CompleteBitfieldSeq m_field_seq;

            };
            /*!
             * @brief This class represents the structure MinimalBitsetType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalBitsetType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalBitsetType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalBitsetType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetType(
                        const MinimalBitsetType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetType(
                        MinimalBitsetType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetType& operator =(
                        const MinimalBitsetType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalBitsetType that will be copied.
                 */
                eProsima_user_DllExport MinimalBitsetType& operator =(
                        MinimalBitsetType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitsetType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalBitsetType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalBitsetType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalBitsetType& x) const;

                /*!
                 * @brief This function sets a value in member bitset_flags
                 * @param _bitset_flags New value for member bitset_flags
                 */
                eProsima_user_DllExport void bitset_flags(
                        eprosima::fastrtps::types::BitsetTypeFlag _bitset_flags);

                /*!
                 * @brief This function returns the value of member bitset_flags
                 * @return Value of member bitset_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetTypeFlag bitset_flags() const;

                /*!
                 * @brief This function returns a reference to member bitset_flags
                 * @return Reference to member bitset_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::BitsetTypeFlag& bitset_flags();

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::MinimalBitsetHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::MinimalBitsetHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitsetHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitsetHeader& header();
                /*!
                 * @brief This function copies the value in member field_seq
                 * @param _field_seq New value to be copied in member field_seq
                 */
                eProsima_user_DllExport void field_seq(
                        const eprosima::fastrtps::types::MinimalBitfieldSeq& _field_seq);

                /*!
                 * @brief This function moves the value in member field_seq
                 * @param _field_seq New value to be moved in member field_seq
                 */
                eProsima_user_DllExport void field_seq(
                        eprosima::fastrtps::types::MinimalBitfieldSeq&& _field_seq);

                /*!
                 * @brief This function returns a constant reference to member field_seq
                 * @return Constant reference to member field_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitfieldSeq& field_seq() const;

                /*!
                 * @brief This function returns a reference to member field_seq
                 * @return Reference to member field_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitfieldSeq& field_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalBitsetType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::BitsetTypeFlag m_bitset_flags;
                eprosima::fastrtps::types::MinimalBitsetHeader m_header;
                eprosima::fastrtps::types::MinimalBitfieldSeq m_field_seq;

            };
            /*!
             * @brief This class represents the structure CompleteExtendedType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteExtendedType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteExtendedType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteExtendedType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteExtendedType that will be copied.
                 */
                eProsima_user_DllExport CompleteExtendedType(
                        const CompleteExtendedType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteExtendedType that will be copied.
                 */
                eProsima_user_DllExport CompleteExtendedType(
                        CompleteExtendedType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteExtendedType that will be copied.
                 */
                eProsima_user_DllExport CompleteExtendedType& operator =(
                        const CompleteExtendedType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteExtendedType that will be copied.
                 */
                eProsima_user_DllExport CompleteExtendedType& operator =(
                        CompleteExtendedType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteExtendedType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteExtendedType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteExtendedType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteExtendedType& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteExtendedType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the union CompleteTypeObject defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class CompleteTypeObject
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport CompleteTypeObject();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~CompleteTypeObject();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeObject that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeObject(
                        const CompleteTypeObject& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeObject that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeObject(
                        CompleteTypeObject&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeObject that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeObject& operator =(
                        const CompleteTypeObject& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::CompleteTypeObject that will be copied.
                 */
                eProsima_user_DllExport CompleteTypeObject& operator =(
                        CompleteTypeObject&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteTypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const CompleteTypeObject& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::CompleteTypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const CompleteTypeObject& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function copies the value in member alias_type
                 * @param _alias_type New value to be copied in member alias_type
                 */
                eProsima_user_DllExport void alias_type(
                        const eprosima::fastrtps::types::CompleteAliasType& _alias_type);

                /*!
                 * @brief This function moves the value in member alias_type
                 * @param _alias_type New value to be moved in member alias_type
                 */
                eProsima_user_DllExport void alias_type(
                        eprosima::fastrtps::types::CompleteAliasType&& _alias_type);

                /*!
                 * @brief This function returns a constant reference to member alias_type
                 * @return Constant reference to member alias_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAliasType& alias_type() const;

                /*!
                 * @brief This function returns a reference to member alias_type
                 * @return Reference to member alias_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAliasType& alias_type();
                /*!
                 * @brief This function copies the value in member annotation_type
                 * @param _annotation_type New value to be copied in member annotation_type
                 */
                eProsima_user_DllExport void annotation_type(
                        const eprosima::fastrtps::types::CompleteAnnotationType& _annotation_type);

                /*!
                 * @brief This function moves the value in member annotation_type
                 * @param _annotation_type New value to be moved in member annotation_type
                 */
                eProsima_user_DllExport void annotation_type(
                        eprosima::fastrtps::types::CompleteAnnotationType&& _annotation_type);

                /*!
                 * @brief This function returns a constant reference to member annotation_type
                 * @return Constant reference to member annotation_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteAnnotationType& annotation_type() const;

                /*!
                 * @brief This function returns a reference to member annotation_type
                 * @return Reference to member annotation_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteAnnotationType& annotation_type();
                /*!
                 * @brief This function copies the value in member struct_type
                 * @param _struct_type New value to be copied in member struct_type
                 */
                eProsima_user_DllExport void struct_type(
                        const eprosima::fastrtps::types::CompleteStructType& _struct_type);

                /*!
                 * @brief This function moves the value in member struct_type
                 * @param _struct_type New value to be moved in member struct_type
                 */
                eProsima_user_DllExport void struct_type(
                        eprosima::fastrtps::types::CompleteStructType&& _struct_type);

                /*!
                 * @brief This function returns a constant reference to member struct_type
                 * @return Constant reference to member struct_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteStructType& struct_type() const;

                /*!
                 * @brief This function returns a reference to member struct_type
                 * @return Reference to member struct_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteStructType& struct_type();
                /*!
                 * @brief This function copies the value in member union_type
                 * @param _union_type New value to be copied in member union_type
                 */
                eProsima_user_DllExport void union_type(
                        const eprosima::fastrtps::types::CompleteUnionType& _union_type);

                /*!
                 * @brief This function moves the value in member union_type
                 * @param _union_type New value to be moved in member union_type
                 */
                eProsima_user_DllExport void union_type(
                        eprosima::fastrtps::types::CompleteUnionType&& _union_type);

                /*!
                 * @brief This function returns a constant reference to member union_type
                 * @return Constant reference to member union_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteUnionType& union_type() const;

                /*!
                 * @brief This function returns a reference to member union_type
                 * @return Reference to member union_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteUnionType& union_type();
                /*!
                 * @brief This function copies the value in member bitset_type
                 * @param _bitset_type New value to be copied in member bitset_type
                 */
                eProsima_user_DllExport void bitset_type(
                        const eprosima::fastrtps::types::CompleteBitsetType& _bitset_type);

                /*!
                 * @brief This function moves the value in member bitset_type
                 * @param _bitset_type New value to be moved in member bitset_type
                 */
                eProsima_user_DllExport void bitset_type(
                        eprosima::fastrtps::types::CompleteBitsetType&& _bitset_type);

                /*!
                 * @brief This function returns a constant reference to member bitset_type
                 * @return Constant reference to member bitset_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitsetType& bitset_type() const;

                /*!
                 * @brief This function returns a reference to member bitset_type
                 * @return Reference to member bitset_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitsetType& bitset_type();
                /*!
                 * @brief This function copies the value in member sequence_type
                 * @param _sequence_type New value to be copied in member sequence_type
                 */
                eProsima_user_DllExport void sequence_type(
                        const eprosima::fastrtps::types::CompleteSequenceType& _sequence_type);

                /*!
                 * @brief This function moves the value in member sequence_type
                 * @param _sequence_type New value to be moved in member sequence_type
                 */
                eProsima_user_DllExport void sequence_type(
                        eprosima::fastrtps::types::CompleteSequenceType&& _sequence_type);

                /*!
                 * @brief This function returns a constant reference to member sequence_type
                 * @return Constant reference to member sequence_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteSequenceType& sequence_type() const;

                /*!
                 * @brief This function returns a reference to member sequence_type
                 * @return Reference to member sequence_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteSequenceType& sequence_type();
                /*!
                 * @brief This function copies the value in member array_type
                 * @param _array_type New value to be copied in member array_type
                 */
                eProsima_user_DllExport void array_type(
                        const eprosima::fastrtps::types::CompleteArrayType& _array_type);

                /*!
                 * @brief This function moves the value in member array_type
                 * @param _array_type New value to be moved in member array_type
                 */
                eProsima_user_DllExport void array_type(
                        eprosima::fastrtps::types::CompleteArrayType&& _array_type);

                /*!
                 * @brief This function returns a constant reference to member array_type
                 * @return Constant reference to member array_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteArrayType& array_type() const;

                /*!
                 * @brief This function returns a reference to member array_type
                 * @return Reference to member array_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteArrayType& array_type();
                /*!
                 * @brief This function copies the value in member map_type
                 * @param _map_type New value to be copied in member map_type
                 */
                eProsima_user_DllExport void map_type(
                        const eprosima::fastrtps::types::CompleteMapType& _map_type);

                /*!
                 * @brief This function moves the value in member map_type
                 * @param _map_type New value to be moved in member map_type
                 */
                eProsima_user_DllExport void map_type(
                        eprosima::fastrtps::types::CompleteMapType&& _map_type);

                /*!
                 * @brief This function returns a constant reference to member map_type
                 * @return Constant reference to member map_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteMapType& map_type() const;

                /*!
                 * @brief This function returns a reference to member map_type
                 * @return Reference to member map_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteMapType& map_type();
                /*!
                 * @brief This function copies the value in member enumerated_type
                 * @param _enumerated_type New value to be copied in member enumerated_type
                 */
                eProsima_user_DllExport void enumerated_type(
                        const eprosima::fastrtps::types::CompleteEnumeratedType& _enumerated_type);

                /*!
                 * @brief This function moves the value in member enumerated_type
                 * @param _enumerated_type New value to be moved in member enumerated_type
                 */
                eProsima_user_DllExport void enumerated_type(
                        eprosima::fastrtps::types::CompleteEnumeratedType&& _enumerated_type);

                /*!
                 * @brief This function returns a constant reference to member enumerated_type
                 * @return Constant reference to member enumerated_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteEnumeratedType& enumerated_type() const;

                /*!
                 * @brief This function returns a reference to member enumerated_type
                 * @return Reference to member enumerated_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteEnumeratedType& enumerated_type();
                /*!
                 * @brief This function copies the value in member bitmask_type
                 * @param _bitmask_type New value to be copied in member bitmask_type
                 */
                eProsima_user_DllExport void bitmask_type(
                        const eprosima::fastrtps::types::CompleteBitmaskType& _bitmask_type);

                /*!
                 * @brief This function moves the value in member bitmask_type
                 * @param _bitmask_type New value to be moved in member bitmask_type
                 */
                eProsima_user_DllExport void bitmask_type(
                        eprosima::fastrtps::types::CompleteBitmaskType&& _bitmask_type);

                /*!
                 * @brief This function returns a constant reference to member bitmask_type
                 * @return Constant reference to member bitmask_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteBitmaskType& bitmask_type() const;

                /*!
                 * @brief This function returns a reference to member bitmask_type
                 * @return Reference to member bitmask_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteBitmaskType& bitmask_type();
                /*!
                 * @brief This function copies the value in member extended_type
                 * @param _extended_type New value to be copied in member extended_type
                 */
                eProsima_user_DllExport void extended_type(
                        const eprosima::fastrtps::types::CompleteExtendedType& _extended_type);

                /*!
                 * @brief This function moves the value in member extended_type
                 * @param _extended_type New value to be moved in member extended_type
                 */
                eProsima_user_DllExport void extended_type(
                        eprosima::fastrtps::types::CompleteExtendedType&& _extended_type);

                /*!
                 * @brief This function returns a constant reference to member extended_type
                 * @return Constant reference to member extended_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteExtendedType& extended_type() const;

                /*!
                 * @brief This function returns a reference to member extended_type
                 * @return Reference to member extended_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteExtendedType& extended_type();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::CompleteTypeObject& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                eprosima::fastrtps::types::CompleteAliasType m_alias_type;
                eprosima::fastrtps::types::CompleteAnnotationType m_annotation_type;
                eprosima::fastrtps::types::CompleteStructType m_struct_type;
                eprosima::fastrtps::types::CompleteUnionType m_union_type;
                eprosima::fastrtps::types::CompleteBitsetType m_bitset_type;
                eprosima::fastrtps::types::CompleteSequenceType m_sequence_type;
                eprosima::fastrtps::types::CompleteArrayType m_array_type;
                eprosima::fastrtps::types::CompleteMapType m_map_type;
                eprosima::fastrtps::types::CompleteEnumeratedType m_enumerated_type;
                eprosima::fastrtps::types::CompleteBitmaskType m_bitmask_type;
                eprosima::fastrtps::types::CompleteExtendedType m_extended_type;
            };
            /*!
             * @brief This class represents the structure MinimalExtendedType defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalExtendedType
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalExtendedType();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalExtendedType();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalExtendedType that will be copied.
                 */
                eProsima_user_DllExport MinimalExtendedType(
                        const MinimalExtendedType& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalExtendedType that will be copied.
                 */
                eProsima_user_DllExport MinimalExtendedType(
                        MinimalExtendedType&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalExtendedType that will be copied.
                 */
                eProsima_user_DllExport MinimalExtendedType& operator =(
                        const MinimalExtendedType& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalExtendedType that will be copied.
                 */
                eProsima_user_DllExport MinimalExtendedType& operator =(
                        MinimalExtendedType&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalExtendedType object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalExtendedType& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalExtendedType object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalExtendedType& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalExtendedType& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the union MinimalTypeObject defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class MinimalTypeObject
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport MinimalTypeObject();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~MinimalTypeObject();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeObject that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeObject(
                        const MinimalTypeObject& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeObject that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeObject(
                        MinimalTypeObject&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeObject that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeObject& operator =(
                        const MinimalTypeObject& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::MinimalTypeObject that will be copied.
                 */
                eProsima_user_DllExport MinimalTypeObject& operator =(
                        MinimalTypeObject&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalTypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const MinimalTypeObject& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::MinimalTypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const MinimalTypeObject& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function copies the value in member alias_type
                 * @param _alias_type New value to be copied in member alias_type
                 */
                eProsima_user_DllExport void alias_type(
                        const eprosima::fastrtps::types::MinimalAliasType& _alias_type);

                /*!
                 * @brief This function moves the value in member alias_type
                 * @param _alias_type New value to be moved in member alias_type
                 */
                eProsima_user_DllExport void alias_type(
                        eprosima::fastrtps::types::MinimalAliasType&& _alias_type);

                /*!
                 * @brief This function returns a constant reference to member alias_type
                 * @return Constant reference to member alias_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAliasType& alias_type() const;

                /*!
                 * @brief This function returns a reference to member alias_type
                 * @return Reference to member alias_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAliasType& alias_type();
                /*!
                 * @brief This function copies the value in member annotation_type
                 * @param _annotation_type New value to be copied in member annotation_type
                 */
                eProsima_user_DllExport void annotation_type(
                        const eprosima::fastrtps::types::MinimalAnnotationType& _annotation_type);

                /*!
                 * @brief This function moves the value in member annotation_type
                 * @param _annotation_type New value to be moved in member annotation_type
                 */
                eProsima_user_DllExport void annotation_type(
                        eprosima::fastrtps::types::MinimalAnnotationType&& _annotation_type);

                /*!
                 * @brief This function returns a constant reference to member annotation_type
                 * @return Constant reference to member annotation_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalAnnotationType& annotation_type() const;

                /*!
                 * @brief This function returns a reference to member annotation_type
                 * @return Reference to member annotation_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalAnnotationType& annotation_type();
                /*!
                 * @brief This function copies the value in member struct_type
                 * @param _struct_type New value to be copied in member struct_type
                 */
                eProsima_user_DllExport void struct_type(
                        const eprosima::fastrtps::types::MinimalStructType& _struct_type);

                /*!
                 * @brief This function moves the value in member struct_type
                 * @param _struct_type New value to be moved in member struct_type
                 */
                eProsima_user_DllExport void struct_type(
                        eprosima::fastrtps::types::MinimalStructType&& _struct_type);

                /*!
                 * @brief This function returns a constant reference to member struct_type
                 * @return Constant reference to member struct_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalStructType& struct_type() const;

                /*!
                 * @brief This function returns a reference to member struct_type
                 * @return Reference to member struct_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalStructType& struct_type();
                /*!
                 * @brief This function copies the value in member union_type
                 * @param _union_type New value to be copied in member union_type
                 */
                eProsima_user_DllExport void union_type(
                        const eprosima::fastrtps::types::MinimalUnionType& _union_type);

                /*!
                 * @brief This function moves the value in member union_type
                 * @param _union_type New value to be moved in member union_type
                 */
                eProsima_user_DllExport void union_type(
                        eprosima::fastrtps::types::MinimalUnionType&& _union_type);

                /*!
                 * @brief This function returns a constant reference to member union_type
                 * @return Constant reference to member union_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalUnionType& union_type() const;

                /*!
                 * @brief This function returns a reference to member union_type
                 * @return Reference to member union_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalUnionType& union_type();
                /*!
                 * @brief This function copies the value in member bitset_type
                 * @param _bitset_type New value to be copied in member bitset_type
                 */
                eProsima_user_DllExport void bitset_type(
                        const eprosima::fastrtps::types::MinimalBitsetType& _bitset_type);

                /*!
                 * @brief This function moves the value in member bitset_type
                 * @param _bitset_type New value to be moved in member bitset_type
                 */
                eProsima_user_DllExport void bitset_type(
                        eprosima::fastrtps::types::MinimalBitsetType&& _bitset_type);

                /*!
                 * @brief This function returns a constant reference to member bitset_type
                 * @return Constant reference to member bitset_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitsetType& bitset_type() const;

                /*!
                 * @brief This function returns a reference to member bitset_type
                 * @return Reference to member bitset_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitsetType& bitset_type();
                /*!
                 * @brief This function copies the value in member sequence_type
                 * @param _sequence_type New value to be copied in member sequence_type
                 */
                eProsima_user_DllExport void sequence_type(
                        const eprosima::fastrtps::types::MinimalSequenceType& _sequence_type);

                /*!
                 * @brief This function moves the value in member sequence_type
                 * @param _sequence_type New value to be moved in member sequence_type
                 */
                eProsima_user_DllExport void sequence_type(
                        eprosima::fastrtps::types::MinimalSequenceType&& _sequence_type);

                /*!
                 * @brief This function returns a constant reference to member sequence_type
                 * @return Constant reference to member sequence_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalSequenceType& sequence_type() const;

                /*!
                 * @brief This function returns a reference to member sequence_type
                 * @return Reference to member sequence_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalSequenceType& sequence_type();
                /*!
                 * @brief This function copies the value in member array_type
                 * @param _array_type New value to be copied in member array_type
                 */
                eProsima_user_DllExport void array_type(
                        const eprosima::fastrtps::types::MinimalArrayType& _array_type);

                /*!
                 * @brief This function moves the value in member array_type
                 * @param _array_type New value to be moved in member array_type
                 */
                eProsima_user_DllExport void array_type(
                        eprosima::fastrtps::types::MinimalArrayType&& _array_type);

                /*!
                 * @brief This function returns a constant reference to member array_type
                 * @return Constant reference to member array_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalArrayType& array_type() const;

                /*!
                 * @brief This function returns a reference to member array_type
                 * @return Reference to member array_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalArrayType& array_type();
                /*!
                 * @brief This function copies the value in member map_type
                 * @param _map_type New value to be copied in member map_type
                 */
                eProsima_user_DllExport void map_type(
                        const eprosima::fastrtps::types::MinimalMapType& _map_type);

                /*!
                 * @brief This function moves the value in member map_type
                 * @param _map_type New value to be moved in member map_type
                 */
                eProsima_user_DllExport void map_type(
                        eprosima::fastrtps::types::MinimalMapType&& _map_type);

                /*!
                 * @brief This function returns a constant reference to member map_type
                 * @return Constant reference to member map_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalMapType& map_type() const;

                /*!
                 * @brief This function returns a reference to member map_type
                 * @return Reference to member map_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalMapType& map_type();
                /*!
                 * @brief This function copies the value in member enumerated_type
                 * @param _enumerated_type New value to be copied in member enumerated_type
                 */
                eProsima_user_DllExport void enumerated_type(
                        const eprosima::fastrtps::types::MinimalEnumeratedType& _enumerated_type);

                /*!
                 * @brief This function moves the value in member enumerated_type
                 * @param _enumerated_type New value to be moved in member enumerated_type
                 */
                eProsima_user_DllExport void enumerated_type(
                        eprosima::fastrtps::types::MinimalEnumeratedType&& _enumerated_type);

                /*!
                 * @brief This function returns a constant reference to member enumerated_type
                 * @return Constant reference to member enumerated_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalEnumeratedType& enumerated_type() const;

                /*!
                 * @brief This function returns a reference to member enumerated_type
                 * @return Reference to member enumerated_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalEnumeratedType& enumerated_type();
                /*!
                 * @brief This function copies the value in member bitmask_type
                 * @param _bitmask_type New value to be copied in member bitmask_type
                 */
                eProsima_user_DllExport void bitmask_type(
                        const eprosima::fastrtps::types::MinimalBitmaskType& _bitmask_type);

                /*!
                 * @brief This function moves the value in member bitmask_type
                 * @param _bitmask_type New value to be moved in member bitmask_type
                 */
                eProsima_user_DllExport void bitmask_type(
                        eprosima::fastrtps::types::MinimalBitmaskType&& _bitmask_type);

                /*!
                 * @brief This function returns a constant reference to member bitmask_type
                 * @return Constant reference to member bitmask_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalBitmaskType& bitmask_type() const;

                /*!
                 * @brief This function returns a reference to member bitmask_type
                 * @return Reference to member bitmask_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalBitmaskType& bitmask_type();
                /*!
                 * @brief This function copies the value in member extended_type
                 * @param _extended_type New value to be copied in member extended_type
                 */
                eProsima_user_DllExport void extended_type(
                        const eprosima::fastrtps::types::MinimalExtendedType& _extended_type);

                /*!
                 * @brief This function moves the value in member extended_type
                 * @param _extended_type New value to be moved in member extended_type
                 */
                eProsima_user_DllExport void extended_type(
                        eprosima::fastrtps::types::MinimalExtendedType&& _extended_type);

                /*!
                 * @brief This function returns a constant reference to member extended_type
                 * @return Constant reference to member extended_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalExtendedType& extended_type() const;

                /*!
                 * @brief This function returns a reference to member extended_type
                 * @return Reference to member extended_type
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalExtendedType& extended_type();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::MinimalTypeObject& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                eprosima::fastrtps::types::MinimalAliasType m_alias_type;
                eprosima::fastrtps::types::MinimalAnnotationType m_annotation_type;
                eprosima::fastrtps::types::MinimalStructType m_struct_type;
                eprosima::fastrtps::types::MinimalUnionType m_union_type;
                eprosima::fastrtps::types::MinimalBitsetType m_bitset_type;
                eprosima::fastrtps::types::MinimalSequenceType m_sequence_type;
                eprosima::fastrtps::types::MinimalArrayType m_array_type;
                eprosima::fastrtps::types::MinimalMapType m_map_type;
                eprosima::fastrtps::types::MinimalEnumeratedType m_enumerated_type;
                eprosima::fastrtps::types::MinimalBitmaskType m_bitmask_type;
                eprosima::fastrtps::types::MinimalExtendedType m_extended_type;
            };
            /*!
             * @brief This class represents the union TypeObject defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeObject
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeObject();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeObject();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObject that will be copied.
                 */
                eProsima_user_DllExport TypeObject(
                        const TypeObject& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObject that will be copied.
                 */
                eProsima_user_DllExport TypeObject(
                        TypeObject&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObject that will be copied.
                 */
                eProsima_user_DllExport TypeObject& operator =(
                        const TypeObject& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeObject that will be copied.
                 */
                eProsima_user_DllExport TypeObject& operator =(
                        TypeObject&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeObject& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeObject object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeObject& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function copies the value in member complete
                 * @param _complete New value to be copied in member complete
                 */
                eProsima_user_DllExport void complete(
                        const eprosima::fastrtps::types::CompleteTypeObject& _complete);

                /*!
                 * @brief This function moves the value in member complete
                 * @param _complete New value to be moved in member complete
                 */
                eProsima_user_DllExport void complete(
                        eprosima::fastrtps::types::CompleteTypeObject&& _complete);

                /*!
                 * @brief This function returns a constant reference to member complete
                 * @return Constant reference to member complete
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::CompleteTypeObject& complete() const;

                /*!
                 * @brief This function returns a reference to member complete
                 * @return Reference to member complete
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CompleteTypeObject& complete();
                /*!
                 * @brief This function copies the value in member minimal
                 * @param _minimal New value to be copied in member minimal
                 */
                eProsima_user_DllExport void minimal(
                        const eprosima::fastrtps::types::MinimalTypeObject& _minimal);

                /*!
                 * @brief This function moves the value in member minimal
                 * @param _minimal New value to be moved in member minimal
                 */
                eProsima_user_DllExport void minimal(
                        eprosima::fastrtps::types::MinimalTypeObject&& _minimal);

                /*!
                 * @brief This function returns a constant reference to member minimal
                 * @return Constant reference to member minimal
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::MinimalTypeObject& minimal() const;

                /*!
                 * @brief This function returns a reference to member minimal
                 * @return Reference to member minimal
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::MinimalTypeObject& minimal();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeObject& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                eprosima::fastrtps::types::CompleteTypeObject m_complete;
                eprosima::fastrtps::types::MinimalTypeObject m_minimal;
            };
            typedef std::vector<eprosima::fastrtps::types::TypeObject> TypeObjectSeq;
            typedef eprosima::fastrtps::types::TypeObjectSeq StronglyConnectedComponent;
            /*!
             * @brief This class represents the structure TypeIdentifierTypeObjectPair defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeIdentifierTypeObjectPair
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeIdentifierTypeObjectPair();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeIdentifierTypeObjectPair();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierTypeObjectPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierTypeObjectPair(
                        const TypeIdentifierTypeObjectPair& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierTypeObjectPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierTypeObjectPair(
                        TypeIdentifierTypeObjectPair&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierTypeObjectPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierTypeObjectPair& operator =(
                        const TypeIdentifierTypeObjectPair& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierTypeObjectPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierTypeObjectPair& operator =(
                        TypeIdentifierTypeObjectPair&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierTypeObjectPair object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeIdentifierTypeObjectPair& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierTypeObjectPair object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeIdentifierTypeObjectPair& x) const;

                /*!
                 * @brief This function copies the value in member type_identifier
                 * @param _type_identifier New value to be copied in member type_identifier
                 */
                eProsima_user_DllExport void type_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_identifier);

                /*!
                 * @brief This function moves the value in member type_identifier
                 * @param _type_identifier New value to be moved in member type_identifier
                 */
                eProsima_user_DllExport void type_identifier(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_identifier);

                /*!
                 * @brief This function returns a constant reference to member type_identifier
                 * @return Constant reference to member type_identifier
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_identifier() const;

                /*!
                 * @brief This function returns a reference to member type_identifier
                 * @return Reference to member type_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_identifier();
                /*!
                 * @brief This function copies the value in member type_object
                 * @param _type_object New value to be copied in member type_object
                 */
                eProsima_user_DllExport void type_object(
                        const eprosima::fastrtps::types::TypeObject& _type_object);

                /*!
                 * @brief This function moves the value in member type_object
                 * @param _type_object New value to be moved in member type_object
                 */
                eProsima_user_DllExport void type_object(
                        eprosima::fastrtps::types::TypeObject&& _type_object);

                /*!
                 * @brief This function returns a constant reference to member type_object
                 * @return Constant reference to member type_object
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeObject& type_object() const;

                /*!
                 * @brief This function returns a reference to member type_object
                 * @return Reference to member type_object
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeObject& type_object();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeIdentifierTypeObjectPair& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_type_identifier;
                eprosima::fastrtps::types::TypeObject m_type_object;

            };
            typedef std::vector<eprosima::fastrtps::types::TypeIdentifierTypeObjectPair> TypeIdentifierTypeObjectPairSeq;
            /*!
             * @brief This class represents the structure TypeIdentifierPair defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeIdentifierPair
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeIdentifierPair();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeIdentifierPair();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierPair(
                        const TypeIdentifierPair& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierPair(
                        TypeIdentifierPair&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierPair& operator =(
                        const TypeIdentifierPair& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierPair that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierPair& operator =(
                        TypeIdentifierPair&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierPair object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeIdentifierPair& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierPair object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeIdentifierPair& x) const;

                /*!
                 * @brief This function copies the value in member type_identifier1
                 * @param _type_identifier1 New value to be copied in member type_identifier1
                 */
                eProsima_user_DllExport void type_identifier1(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_identifier1);

                /*!
                 * @brief This function moves the value in member type_identifier1
                 * @param _type_identifier1 New value to be moved in member type_identifier1
                 */
                eProsima_user_DllExport void type_identifier1(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_identifier1);

                /*!
                 * @brief This function returns a constant reference to member type_identifier1
                 * @return Constant reference to member type_identifier1
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_identifier1() const;

                /*!
                 * @brief This function returns a reference to member type_identifier1
                 * @return Reference to member type_identifier1
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_identifier1();
                /*!
                 * @brief This function copies the value in member type_identifier2
                 * @param _type_identifier2 New value to be copied in member type_identifier2
                 */
                eProsima_user_DllExport void type_identifier2(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_identifier2);

                /*!
                 * @brief This function moves the value in member type_identifier2
                 * @param _type_identifier2 New value to be moved in member type_identifier2
                 */
                eProsima_user_DllExport void type_identifier2(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_identifier2);

                /*!
                 * @brief This function returns a constant reference to member type_identifier2
                 * @return Constant reference to member type_identifier2
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_identifier2() const;

                /*!
                 * @brief This function returns a reference to member type_identifier2
                 * @return Reference to member type_identifier2
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_identifier2();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeIdentifierPair& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_type_identifier1;
                eprosima::fastrtps::types::TypeIdentifier m_type_identifier2;

            };
            typedef std::vector<eprosima::fastrtps::types::TypeIdentifierPair> TypeIdentifierPairSeq;
            /*!
             * @brief This class represents the structure TypeIdentifierWithSize defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeIdentifierWithSize
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeIdentifierWithSize();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeIdentifierWithSize();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithSize that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithSize(
                        const TypeIdentifierWithSize& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithSize that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithSize(
                        TypeIdentifierWithSize&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithSize that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithSize& operator =(
                        const TypeIdentifierWithSize& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithSize that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithSize& operator =(
                        TypeIdentifierWithSize&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierWithSize object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeIdentifierWithSize& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierWithSize object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeIdentifierWithSize& x) const;

                /*!
                 * @brief This function copies the value in member type_id
                 * @param _type_id New value to be copied in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        const eprosima::fastrtps::types::TypeIdentifier& _type_id);

                /*!
                 * @brief This function moves the value in member type_id
                 * @param _type_id New value to be moved in member type_id
                 */
                eProsima_user_DllExport void type_id(
                        eprosima::fastrtps::types::TypeIdentifier&& _type_id);

                /*!
                 * @brief This function returns a constant reference to member type_id
                 * @return Constant reference to member type_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& type_id() const;

                /*!
                 * @brief This function returns a reference to member type_id
                 * @return Reference to member type_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& type_id();
                /*!
                 * @brief This function sets a value in member typeobject_serialized_size
                 * @param _typeobject_serialized_size New value for member typeobject_serialized_size
                 */
                eProsima_user_DllExport void typeobject_serialized_size(
                        uint32_t _typeobject_serialized_size);

                /*!
                 * @brief This function returns the value of member typeobject_serialized_size
                 * @return Value of member typeobject_serialized_size
                 */
                eProsima_user_DllExport uint32_t typeobject_serialized_size() const;

                /*!
                 * @brief This function returns a reference to member typeobject_serialized_size
                 * @return Reference to member typeobject_serialized_size
                 */
                eProsima_user_DllExport uint32_t& typeobject_serialized_size();


                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeIdentifierWithSize& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_type_id;
                uint32_t m_typeobject_serialized_size;

            };
            typedef std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize> TypeIdentifierWithSizeSeq;
            /*!
             * @brief This class represents the structure TypeIdentifierWithDependencies defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeIdentifierWithDependencies
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeIdentifierWithDependencies();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeIdentifierWithDependencies();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithDependencies that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithDependencies(
                        const TypeIdentifierWithDependencies& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithDependencies that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithDependencies(
                        TypeIdentifierWithDependencies&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithDependencies that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithDependencies& operator =(
                        const TypeIdentifierWithDependencies& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeIdentifierWithDependencies that will be copied.
                 */
                eProsima_user_DllExport TypeIdentifierWithDependencies& operator =(
                        TypeIdentifierWithDependencies&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierWithDependencies object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeIdentifierWithDependencies& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeIdentifierWithDependencies object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeIdentifierWithDependencies& x) const;

                /*!
                 * @brief This function copies the value in member typeid_with_size
                 * @param _typeid_with_size New value to be copied in member typeid_with_size
                 */
                eProsima_user_DllExport void typeid_with_size(
                        const eprosima::fastrtps::types::TypeIdentifierWithSize& _typeid_with_size);

                /*!
                 * @brief This function moves the value in member typeid_with_size
                 * @param _typeid_with_size New value to be moved in member typeid_with_size
                 */
                eProsima_user_DllExport void typeid_with_size(
                        eprosima::fastrtps::types::TypeIdentifierWithSize&& _typeid_with_size);

                /*!
                 * @brief This function returns a constant reference to member typeid_with_size
                 * @return Constant reference to member typeid_with_size
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifierWithSize& typeid_with_size() const;

                /*!
                 * @brief This function returns a reference to member typeid_with_size
                 * @return Reference to member typeid_with_size
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifierWithSize& typeid_with_size();
                /*!
                 * @brief This function sets a value in member dependent_typeid_count
                 * @param _dependent_typeid_count New value for member dependent_typeid_count
                 */
                eProsima_user_DllExport void dependent_typeid_count(
                        int32_t _dependent_typeid_count);

                /*!
                 * @brief This function returns the value of member dependent_typeid_count
                 * @return Value of member dependent_typeid_count
                 */
                eProsima_user_DllExport int32_t dependent_typeid_count() const;

                /*!
                 * @brief This function returns a reference to member dependent_typeid_count
                 * @return Reference to member dependent_typeid_count
                 */
                eProsima_user_DllExport int32_t& dependent_typeid_count();

                /*!
                 * @brief This function copies the value in member dependent_typeids
                 * @param _dependent_typeids New value to be copied in member dependent_typeids
                 */
                eProsima_user_DllExport void dependent_typeids(
                        const std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize>& _dependent_typeids);

                /*!
                 * @brief This function moves the value in member dependent_typeids
                 * @param _dependent_typeids New value to be moved in member dependent_typeids
                 */
                eProsima_user_DllExport void dependent_typeids(
                        std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize>&& _dependent_typeids);

                /*!
                 * @brief This function returns a constant reference to member dependent_typeids
                 * @return Constant reference to member dependent_typeids
                 */
                eProsima_user_DllExport const std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize>& dependent_typeids() const;

                /*!
                 * @brief This function returns a reference to member dependent_typeids
                 * @return Reference to member dependent_typeids
                 */
                eProsima_user_DllExport std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize>& dependent_typeids();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeIdentifierWithDependencies& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifierWithSize m_typeid_with_size;
                int32_t m_dependent_typeid_count;
                std::vector<eprosima::fastrtps::types::TypeIdentifierWithSize> m_dependent_typeids;

            };
            typedef std::vector<eprosima::fastrtps::types::TypeIdentifierWithDependencies> TypeIdentifierWithDependenciesSeq;
            /*!
             * @brief This class represents the structure TypeInformation defined by the user in the IDL file.
             * @ingroup TypeObject
             */
            class TypeInformation
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport TypeInformation();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~TypeInformation();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeInformation that will be copied.
                 */
                eProsima_user_DllExport TypeInformation(
                        const TypeInformation& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeInformation that will be copied.
                 */
                eProsima_user_DllExport TypeInformation(
                        TypeInformation&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeInformation that will be copied.
                 */
                eProsima_user_DllExport TypeInformation& operator =(
                        const TypeInformation& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::TypeInformation that will be copied.
                 */
                eProsima_user_DllExport TypeInformation& operator =(
                        TypeInformation&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeInformation object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const TypeInformation& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::TypeInformation object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const TypeInformation& x) const;

                /*!
                 * @brief This function copies the value in member minimal
                 * @param _minimal New value to be copied in member minimal
                 */
                eProsima_user_DllExport void minimal(
                        const eprosima::fastrtps::types::TypeIdentifierWithDependencies& _minimal);

                /*!
                 * @brief This function moves the value in member minimal
                 * @param _minimal New value to be moved in member minimal
                 */
                eProsima_user_DllExport void minimal(
                        eprosima::fastrtps::types::TypeIdentifierWithDependencies&& _minimal);

                /*!
                 * @brief This function returns a constant reference to member minimal
                 * @return Constant reference to member minimal
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifierWithDependencies& minimal() const;

                /*!
                 * @brief This function returns a reference to member minimal
                 * @return Reference to member minimal
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifierWithDependencies& minimal();
                /*!
                 * @brief This function copies the value in member complete
                 * @param _complete New value to be copied in member complete
                 */
                eProsima_user_DllExport void complete(
                        const eprosima::fastrtps::types::TypeIdentifierWithDependencies& _complete);

                /*!
                 * @brief This function moves the value in member complete
                 * @param _complete New value to be moved in member complete
                 */
                eProsima_user_DllExport void complete(
                        eprosima::fastrtps::types::TypeIdentifierWithDependencies&& _complete);

                /*!
                 * @brief This function returns a constant reference to member complete
                 * @return Constant reference to member complete
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifierWithDependencies& complete() const;

                /*!
                 * @brief This function returns a reference to member complete
                 * @return Reference to member complete
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifierWithDependencies& complete();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::TypeInformation& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifierWithDependencies m_minimal;
                eprosima::fastrtps::types::TypeIdentifierWithDependencies m_complete;

            };
            typedef std::vector<eprosima::fastrtps::types::TypeInformation> TypeInformationSeq;
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEOBJECT_H_

