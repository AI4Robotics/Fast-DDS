// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file XTypesBase.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_XTYPESBASE_H_
#define _FAST_DDS_GENERATED_XTYPESBASE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(XTYPESBASE_SOURCE)
#define XTYPESBASE_DllAPI __declspec( dllexport )
#else
#define XTYPESBASE_DllAPI __declspec( dllimport )
#endif // XTYPESBASE_SOURCE
#else
#define XTYPESBASE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define XTYPESBASE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {
            typedef uint8_t EquivalenceKind;
            const uint8_t EK_MINIMAL = 0xF1;
            const uint8_t EK_COMPLETE = 0xF2;
            const uint8_t EK_BOTH = 0xF3;
            typedef uint8_t TypeKind;
            const uint8_t TK_NONE = 0x00;
            const uint8_t TK_BOOLEAN = 0x01;
            const uint8_t TK_BYTE = 0x02;
            const uint8_t TK_INT16 = 0x03;
            const uint8_t TK_INT32 = 0x04;
            const uint8_t TK_INT64 = 0x05;
            const uint8_t TK_UINT16 = 0x06;
            const uint8_t TK_UINT32 = 0x07;
            const uint8_t TK_UINT64 = 0x08;
            const uint8_t TK_FLOAT32 = 0x09;
            const uint8_t TK_FLOAT64 = 0x0A;
            const uint8_t TK_FLOAT128 = 0x0B;
            const uint8_t TK_INT8 = 0x0C;
            const uint8_t TK_UINT8 = 0x0D;
            const uint8_t TK_CHAR8 = 0x10;
            const uint8_t TK_CHAR16 = 0x11;
            const uint8_t TK_STRING8 = 0x20;
            const uint8_t TK_STRING16 = 0x21;
            const uint8_t TK_ALIAS = 0x30;
            const uint8_t TK_ENUM = 0x40;
            const uint8_t TK_BITMASK = 0x41;
            const uint8_t TK_ANNOTATION = 0x50;
            const uint8_t TK_STRUCTURE = 0x51;
            const uint8_t TK_UNION = 0x52;
            const uint8_t TK_BITSET = 0x53;
            const uint8_t TK_SEQUENCE = 0x60;
            const uint8_t TK_ARRAY = 0x61;
            const uint8_t TK_MAP = 0x62;
            typedef uint8_t TypeIdentiferKind;
            const uint8_t TI_STRING8_SMALL = 0x70;
            const uint8_t TI_STRING8_LARGE = 0x71;
            const uint8_t TI_STRING16_SMALL = 0x72;
            const uint8_t TI_STRING16_LARGE = 0x73;
            const uint8_t TI_PLAIN_SEQUENCE_SMALL = 0x80;
            const uint8_t TI_PLAIN_SEQUENCE_LARGE = 0x81;
            const uint8_t TI_PLAIN_ARRAY_SMALL = 0x90;
            const uint8_t TI_PLAIN_ARRAY_LARGE = 0x91;
            const uint8_t TI_PLAIN_MAP_SMALL = 0xA0;
            const uint8_t TI_PLAIN_MAP_LARGE = 0xA1;
            const uint8_t TI_STRONGLY_CONNECTED_COMPONENT = 0xB0;
            const int32_t MEMBER_NAME_MAX_LENGTH = 256;
            typedef eprosima::fastrtps::fixed_string<256> MemberName;
            const int32_t TYPE_NAME_MAX_LENGTH = 256;
            typedef eprosima::fastrtps::fixed_string<256> QualifiedTypeName;
            typedef uint8_t PrimitiveTypeId;
            typedef std::array<uint8_t, 14> EquivalenceHash;
            typedef std::array<uint8_t, 4> NameHash;
            typedef uint32_t LBound;
            typedef std::vector<eprosima::fastrtps::types::LBound> LBoundSeq;
            const eprosima::fastrtps::types::LBound INVALID_LBOUND = 0;
            typedef uint8_t SBound;
            typedef std::vector<eprosima::fastrtps::types::SBound> SBoundSeq;
            const eprosima::fastrtps::types::SBound INVALID_SBOUND = 0;
            /*!
             * @brief This class represents the bitmask MemberFlag defined by the user in the IDL file.
             * @ingroup XTypesBase
             */
            enum MemberFlag : uint16_t
            {
                TRY_CONSTRUCT1 = 0x01ull << 0,
                TRY_CONSTRUCT2 = 0x01ull << 1,
                IS_EXTERNAL = 0x01ull << 2,
                IS_OPTIONAL = 0x01ull << 3,
                IS_MUST_UNDERSTAND = 0x01ull << 4,
                IS_KEY = 0x01ull << 5,
                IS_DEFAULT = 0x01ull << 6
            };
            typedef eprosima::fastrtps::types::MemberFlag CollectionElementFlag;
            typedef eprosima::fastrtps::types::MemberFlag StructMemberFlag;
            typedef eprosima::fastrtps::types::MemberFlag UnionMemberFlag;
            typedef eprosima::fastrtps::types::MemberFlag UnionDiscriminatorFlag;
            typedef eprosima::fastrtps::types::MemberFlag EnumeratedLiteralFlag;
            typedef eprosima::fastrtps::types::MemberFlag AnnotationParameterFlag;
            typedef eprosima::fastrtps::types::MemberFlag AliasMemberFlag;
            typedef eprosima::fastrtps::types::MemberFlag BitflagFlag;
            typedef eprosima::fastrtps::types::MemberFlag BitsetMemberFlag;
            const uint16_t MemberFlagMinimalMask = 0x003f;
            /*!
             * @brief This class represents the bitmask TypeFlag defined by the user in the IDL file.
             * @ingroup XTypesBase
             */
            enum TypeFlag : uint16_t
            {
                IS_FINAL = 0x01ull << 0,
                IS_APPENDABLE = 0x01ull << 1,
                IS_MUTABLE = 0x01ull << 2,
                IS_NESTED = 0x01ull << 3,
                IS_AUTOID_HASH = 0x01ull << 4
            };
            typedef eprosima::fastrtps::types::TypeFlag StructTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag UnionTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag CollectionTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag AnnotationTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag AliasTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag EnumTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag BitmaskTypeFlag;
            typedef eprosima::fastrtps::types::TypeFlag BitsetTypeFlag;
            const uint16_t TypeFlagMinimalMask = 0x0007;
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_XTYPESBASE_H_

