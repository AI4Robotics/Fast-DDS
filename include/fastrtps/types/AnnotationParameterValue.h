// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AnnotationParameterValue.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_ANNOTATIONPARAMETERVALUE_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_ANNOTATIONPARAMETERVALUE_H_

#include "TypeIdentifier.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ANNOTATIONPARAMETERVALUE_SOURCE)
#define ANNOTATIONPARAMETERVALUE_DllAPI __declspec( dllexport )
#else
#define ANNOTATIONPARAMETERVALUE_DllAPI __declspec( dllimport )
#endif // ANNOTATIONPARAMETERVALUE_SOURCE
#else
#define ANNOTATIONPARAMETERVALUE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ANNOTATIONPARAMETERVALUE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {
            typedef uint32_t MemberId;
            const uint32_t ANNOTATION_STR_VALUE_MAX_LEN = 128;
            const uint32_t ANNOTATION_OCTETSEC_VALUE_MAX_LEN = 128;
            /*!
             * @brief This class represents the structure ExtendedAnnotationParameterValue defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class ExtendedAnnotationParameterValue
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport ExtendedAnnotationParameterValue();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~ExtendedAnnotationParameterValue();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedAnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport ExtendedAnnotationParameterValue(
                        const ExtendedAnnotationParameterValue& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedAnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport ExtendedAnnotationParameterValue(
                        ExtendedAnnotationParameterValue&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedAnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport ExtendedAnnotationParameterValue& operator =(
                        const ExtendedAnnotationParameterValue& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedAnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport ExtendedAnnotationParameterValue& operator =(
                        ExtendedAnnotationParameterValue&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::ExtendedAnnotationParameterValue object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const ExtendedAnnotationParameterValue& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::ExtendedAnnotationParameterValue object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const ExtendedAnnotationParameterValue& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::ExtendedAnnotationParameterValue& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
            /*!
             * @brief This class represents the union AnnotationParameterValue defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class AnnotationParameterValue
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AnnotationParameterValue();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AnnotationParameterValue();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport AnnotationParameterValue(
                        const AnnotationParameterValue& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport AnnotationParameterValue(
                        AnnotationParameterValue&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport AnnotationParameterValue& operator =(
                        const AnnotationParameterValue& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AnnotationParameterValue that will be copied.
                 */
                eProsima_user_DllExport AnnotationParameterValue& operator =(
                        AnnotationParameterValue&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AnnotationParameterValue object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AnnotationParameterValue& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AnnotationParameterValue object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AnnotationParameterValue& x) const;

                /*!
                 * @brief This function sets the discriminator value.
                 * @param __d New value for the discriminator.
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
                 */
                eProsima_user_DllExport void _d(
                        uint8_t __d);

                /*!
                 * @brief This function returns the value of the discriminator.
                 * @return Value of the discriminator
                 */
                eProsima_user_DllExport uint8_t _d() const;

                /*!
                 * @brief This function returns a reference to the discriminator.
                 * @return Reference to the discriminator.
                 */
                eProsima_user_DllExport uint8_t& _d();

                /*!
                 * @brief This function sets a value in member boolean_value
                 * @param _boolean_value New value for member boolean_value
                 */
                eProsima_user_DllExport void boolean_value(
                        bool _boolean_value);

                /*!
                 * @brief This function returns the value of member boolean_value
                 * @return Value of member boolean_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport bool boolean_value() const;

                /*!
                 * @brief This function returns a reference to member boolean_value
                 * @return Reference to member boolean_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport bool& boolean_value();

                /*!
                 * @brief This function sets a value in member byte_value
                 * @param _byte_value New value for member byte_value
                 */
                eProsima_user_DllExport void byte_value(
                        uint8_t _byte_value);

                /*!
                 * @brief This function returns the value of member byte_value
                 * @return Value of member byte_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint8_t byte_value() const;

                /*!
                 * @brief This function returns a reference to member byte_value
                 * @return Reference to member byte_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint8_t& byte_value();

                /*!
                 * @brief This function sets a value in member int8_value
                 * @param _int8_value New value for member int8_value
                 */
                eProsima_user_DllExport void int8_value(
                        int8_t _int8_value);

                /*!
                 * @brief This function returns the value of member int8_value
                 * @return Value of member int8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int8_t int8_value() const;

                /*!
                 * @brief This function returns a reference to member int8_value
                 * @return Reference to member int8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int8_t& int8_value();

                /*!
                 * @brief This function sets a value in member uint8_value
                 * @param _uint8_value New value for member uint8_value
                 */
                eProsima_user_DllExport void uint8_value(
                        uint8_t _uint8_value);

                /*!
                 * @brief This function returns the value of member uint8_value
                 * @return Value of member uint8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint8_t uint8_value() const;

                /*!
                 * @brief This function returns a reference to member uint8_value
                 * @return Reference to member uint8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint8_t& uint8_value();

                /*!
                 * @brief This function sets a value in member int16_value
                 * @param _int16_value New value for member int16_value
                 */
                eProsima_user_DllExport void int16_value(
                        int16_t _int16_value);

                /*!
                 * @brief This function returns the value of member int16_value
                 * @return Value of member int16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int16_t int16_value() const;

                /*!
                 * @brief This function returns a reference to member int16_value
                 * @return Reference to member int16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int16_t& int16_value();

                /*!
                 * @brief This function sets a value in member uint16_value
                 * @param _uint16_value New value for member uint16_value
                 */
                eProsima_user_DllExport void uint16_value(
                        uint16_t _uint16_value);

                /*!
                 * @brief This function returns the value of member uint16_value
                 * @return Value of member uint16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint16_t uint16_value() const;

                /*!
                 * @brief This function returns a reference to member uint16_value
                 * @return Reference to member uint16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint16_t& uint16_value();

                /*!
                 * @brief This function sets a value in member int32_value
                 * @param _int32_value New value for member int32_value
                 */
                eProsima_user_DllExport void int32_value(
                        int32_t _int32_value);

                /*!
                 * @brief This function returns the value of member int32_value
                 * @return Value of member int32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int32_t int32_value() const;

                /*!
                 * @brief This function returns a reference to member int32_value
                 * @return Reference to member int32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int32_t& int32_value();

                /*!
                 * @brief This function sets a value in member uint32_value
                 * @param _uint32_value New value for member uint32_value
                 */
                eProsima_user_DllExport void uint32_value(
                        uint32_t _uint32_value);

                /*!
                 * @brief This function returns the value of member uint32_value
                 * @return Value of member uint32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint32_t uint32_value() const;

                /*!
                 * @brief This function returns a reference to member uint32_value
                 * @return Reference to member uint32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint32_t& uint32_value();

                /*!
                 * @brief This function sets a value in member int64_value
                 * @param _int64_value New value for member int64_value
                 */
                eProsima_user_DllExport void int64_value(
                        int64_t _int64_value);

                /*!
                 * @brief This function returns the value of member int64_value
                 * @return Value of member int64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int64_t int64_value() const;

                /*!
                 * @brief This function returns a reference to member int64_value
                 * @return Reference to member int64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int64_t& int64_value();

                /*!
                 * @brief This function sets a value in member uint64_value
                 * @param _uint64_value New value for member uint64_value
                 */
                eProsima_user_DllExport void uint64_value(
                        uint64_t _uint64_value);

                /*!
                 * @brief This function returns the value of member uint64_value
                 * @return Value of member uint64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint64_t uint64_value() const;

                /*!
                 * @brief This function returns a reference to member uint64_value
                 * @return Reference to member uint64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport uint64_t& uint64_value();

                /*!
                 * @brief This function sets a value in member float32_value
                 * @param _float32_value New value for member float32_value
                 */
                eProsima_user_DllExport void float32_value(
                        float _float32_value);

                /*!
                 * @brief This function returns the value of member float32_value
                 * @return Value of member float32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport float float32_value() const;

                /*!
                 * @brief This function returns a reference to member float32_value
                 * @return Reference to member float32_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport float& float32_value();

                /*!
                 * @brief This function sets a value in member float64_value
                 * @param _float64_value New value for member float64_value
                 */
                eProsima_user_DllExport void float64_value(
                        double _float64_value);

                /*!
                 * @brief This function returns the value of member float64_value
                 * @return Value of member float64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport double float64_value() const;

                /*!
                 * @brief This function returns a reference to member float64_value
                 * @return Reference to member float64_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport double& float64_value();

                /*!
                 * @brief This function sets a value in member float128_value
                 * @param _float128_value New value for member float128_value
                 */
                eProsima_user_DllExport void float128_value(
                        long double _float128_value);

                /*!
                 * @brief This function returns the value of member float128_value
                 * @return Value of member float128_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport long double float128_value() const;

                /*!
                 * @brief This function returns a reference to member float128_value
                 * @return Reference to member float128_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport long double& float128_value();

                /*!
                 * @brief This function sets a value in member char_value
                 * @param _char_value New value for member char_value
                 */
                eProsima_user_DllExport void char_value(
                        char _char_value);

                /*!
                 * @brief This function returns the value of member char_value
                 * @return Value of member char_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport char char_value() const;

                /*!
                 * @brief This function returns a reference to member char_value
                 * @return Reference to member char_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport char& char_value();

                /*!
                 * @brief This function sets a value in member wchar_value
                 * @param _wchar_value New value for member wchar_value
                 */
                eProsima_user_DllExport void wchar_value(
                        wchar_t _wchar_value);

                /*!
                 * @brief This function returns the value of member wchar_value
                 * @return Value of member wchar_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport wchar_t wchar_value() const;

                /*!
                 * @brief This function returns a reference to member wchar_value
                 * @return Reference to member wchar_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport wchar_t& wchar_value();

                /*!
                 * @brief This function sets a value in member enumerated_value
                 * @param _enumerated_value New value for member enumerated_value
                 */
                eProsima_user_DllExport void enumerated_value(
                        int32_t _enumerated_value);

                /*!
                 * @brief This function returns the value of member enumerated_value
                 * @return Value of member enumerated_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int32_t enumerated_value() const;

                /*!
                 * @brief This function returns a reference to member enumerated_value
                 * @return Reference to member enumerated_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport int32_t& enumerated_value();

                /*!
                 * @brief This function copies the value in member string8_value
                 * @param _string8_value New value to be copied in member string8_value
                 */
                eProsima_user_DllExport void string8_value(
                        const eprosima::fastrtps::fixed_string<128>& _string8_value);

                /*!
                 * @brief This function moves the value in member string8_value
                 * @param _string8_value New value to be moved in member string8_value
                 */
                eProsima_user_DllExport void string8_value(
                        eprosima::fastrtps::fixed_string<128>&& _string8_value);

                /*!
                 * @brief This function returns a constant reference to member string8_value
                 * @return Constant reference to member string8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::fixed_string<128>& string8_value() const;

                /*!
                 * @brief This function returns a reference to member string8_value
                 * @return Reference to member string8_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::fixed_string<128>& string8_value();
                /*!
                 * @brief This function copies the value in member string16_value
                 * @param _string16_value New value to be copied in member string16_value
                 */
                eProsima_user_DllExport void string16_value(
                        const std::wstring& _string16_value);

                /*!
                 * @brief This function moves the value in member string16_value
                 * @param _string16_value New value to be moved in member string16_value
                 */
                eProsima_user_DllExport void string16_value(
                        std::wstring&& _string16_value);

                /*!
                 * @brief This function returns a constant reference to member string16_value
                 * @return Constant reference to member string16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const std::wstring& string16_value() const;

                /*!
                 * @brief This function returns a reference to member string16_value
                 * @return Reference to member string16_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport std::wstring& string16_value();
                /*!
                 * @brief This function copies the value in member extended_value
                 * @param _extended_value New value to be copied in member extended_value
                 */
                eProsima_user_DllExport void extended_value(
                        const eprosima::fastrtps::types::ExtendedAnnotationParameterValue& _extended_value);

                /*!
                 * @brief This function moves the value in member extended_value
                 * @param _extended_value New value to be moved in member extended_value
                 */
                eProsima_user_DllExport void extended_value(
                        eprosima::fastrtps::types::ExtendedAnnotationParameterValue&& _extended_value);

                /*!
                 * @brief This function returns a constant reference to member extended_value
                 * @return Constant reference to member extended_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::ExtendedAnnotationParameterValue& extended_value() const;

                /*!
                 * @brief This function returns a reference to member extended_value
                 * @return Reference to member extended_value
                 * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::ExtendedAnnotationParameterValue& extended_value();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AnnotationParameterValue& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);




            private:

                uint8_t m__d;

                bool m_boolean_value;
                uint8_t m_byte_value;
                int8_t m_int8_value;
                uint8_t m_uint8_value;
                int16_t m_int16_value;
                uint16_t m_uint16_value;
                int32_t m_int32_value;
                uint32_t m_uint32_value;
                int64_t m_int64_value;
                uint64_t m_uint64_value;
                float m_float32_value;
                double m_float64_value;
                long double m_float128_value;
                char m_char_value;
                wchar_t m_wchar_value;
                int32_t m_enumerated_value;
                eprosima::fastrtps::fixed_string<128> m_string8_value;
                std::wstring m_string16_value;
                eprosima::fastrtps::types::ExtendedAnnotationParameterValue m_extended_value;
            };
            /*!
             * @brief This class represents the structure AppliedAnnotationParameter defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class AppliedAnnotationParameter
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AppliedAnnotationParameter();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AppliedAnnotationParameter();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotationParameter(
                        const AppliedAnnotationParameter& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotationParameter(
                        AppliedAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotationParameter& operator =(
                        const AppliedAnnotationParameter& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotationParameter that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotationParameter& operator =(
                        AppliedAnnotationParameter&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AppliedAnnotationParameter& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedAnnotationParameter object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AppliedAnnotationParameter& x) const;

                /*!
                 * @brief This function copies the value in member paramname_hash
                 * @param _paramname_hash New value to be copied in member paramname_hash
                 */
                eProsima_user_DllExport void paramname_hash(
                        const eprosima::fastrtps::types::NameHash& _paramname_hash);

                /*!
                 * @brief This function moves the value in member paramname_hash
                 * @param _paramname_hash New value to be moved in member paramname_hash
                 */
                eProsima_user_DllExport void paramname_hash(
                        eprosima::fastrtps::types::NameHash&& _paramname_hash);

                /*!
                 * @brief This function returns a constant reference to member paramname_hash
                 * @return Constant reference to member paramname_hash
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::NameHash& paramname_hash() const;

                /*!
                 * @brief This function returns a reference to member paramname_hash
                 * @return Reference to member paramname_hash
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::NameHash& paramname_hash();
                /*!
                 * @brief This function copies the value in member value
                 * @param _value New value to be copied in member value
                 */
                eProsima_user_DllExport void value(
                        const eprosima::fastrtps::types::AnnotationParameterValue& _value);

                /*!
                 * @brief This function moves the value in member value
                 * @param _value New value to be moved in member value
                 */
                eProsima_user_DllExport void value(
                        eprosima::fastrtps::types::AnnotationParameterValue&& _value);

                /*!
                 * @brief This function returns a constant reference to member value
                 * @return Constant reference to member value
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AnnotationParameterValue& value() const;

                /*!
                 * @brief This function returns a reference to member value
                 * @return Reference to member value
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterValue& value();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AppliedAnnotationParameter& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::NameHash m_paramname_hash;
                eprosima::fastrtps::types::AnnotationParameterValue m_value;

            };
            typedef std::vector<eprosima::fastrtps::types::AppliedAnnotationParameter> AppliedAnnotationParameterSeq;
            /*!
             * @brief This class represents the structure AppliedAnnotation defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class AppliedAnnotation
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AppliedAnnotation();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AppliedAnnotation();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotation(
                        const AppliedAnnotation& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotation(
                        AppliedAnnotation&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotation& operator =(
                        const AppliedAnnotation& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedAnnotation& operator =(
                        AppliedAnnotation&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedAnnotation object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AppliedAnnotation& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedAnnotation object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AppliedAnnotation& x) const;

                /*!
                 * @brief This function copies the value in member annotation_typeid
                 * @param _annotation_typeid New value to be copied in member annotation_typeid
                 */
                eProsima_user_DllExport void annotation_typeid(
                        const eprosima::fastrtps::types::TypeIdentifier& _annotation_typeid);

                /*!
                 * @brief This function moves the value in member annotation_typeid
                 * @param _annotation_typeid New value to be moved in member annotation_typeid
                 */
                eProsima_user_DllExport void annotation_typeid(
                        eprosima::fastrtps::types::TypeIdentifier&& _annotation_typeid);

                /*!
                 * @brief This function returns a constant reference to member annotation_typeid
                 * @return Constant reference to member annotation_typeid
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeIdentifier& annotation_typeid() const;

                /*!
                 * @brief This function returns a reference to member annotation_typeid
                 * @return Reference to member annotation_typeid
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier& annotation_typeid();
                /*!
                 * @brief This function copies the value in member param_seq
                 * @param _param_seq New value to be copied in member param_seq
                 */
                eProsima_user_DllExport void param_seq(
                        const eprosima::fastrtps::types::AppliedAnnotationParameterSeq& _param_seq);

                /*!
                 * @brief This function moves the value in member param_seq
                 * @param _param_seq New value to be moved in member param_seq
                 */
                eProsima_user_DllExport void param_seq(
                        eprosima::fastrtps::types::AppliedAnnotationParameterSeq&& _param_seq);

                /*!
                 * @brief This function returns a constant reference to member param_seq
                 * @return Constant reference to member param_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AppliedAnnotationParameterSeq& param_seq() const;

                /*!
                 * @brief This function returns a reference to member param_seq
                 * @return Reference to member param_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AppliedAnnotationParameterSeq& param_seq();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AppliedAnnotation& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeIdentifier m_annotation_typeid;
                eprosima::fastrtps::types::AppliedAnnotationParameterSeq m_param_seq;

            };
            typedef std::vector<eprosima::fastrtps::types::AppliedAnnotation> AppliedAnnotationSeq;
            /*!
             * @brief This class represents the structure AppliedVerbatimAnnotation defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class AppliedVerbatimAnnotation
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AppliedVerbatimAnnotation();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AppliedVerbatimAnnotation();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedVerbatimAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedVerbatimAnnotation(
                        const AppliedVerbatimAnnotation& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedVerbatimAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedVerbatimAnnotation(
                        AppliedVerbatimAnnotation&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedVerbatimAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedVerbatimAnnotation& operator =(
                        const AppliedVerbatimAnnotation& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedVerbatimAnnotation that will be copied.
                 */
                eProsima_user_DllExport AppliedVerbatimAnnotation& operator =(
                        AppliedVerbatimAnnotation&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedVerbatimAnnotation object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AppliedVerbatimAnnotation& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedVerbatimAnnotation object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AppliedVerbatimAnnotation& x) const;

                /*!
                 * @brief This function copies the value in member placement
                 * @param _placement New value to be copied in member placement
                 */
                eProsima_user_DllExport void placement(
                        const eprosima::fastrtps::fixed_string<32>& _placement);

                /*!
                 * @brief This function moves the value in member placement
                 * @param _placement New value to be moved in member placement
                 */
                eProsima_user_DllExport void placement(
                        eprosima::fastrtps::fixed_string<32>&& _placement);

                /*!
                 * @brief This function returns a constant reference to member placement
                 * @return Constant reference to member placement
                 */
                eProsima_user_DllExport const eprosima::fastrtps::fixed_string<32>& placement() const;

                /*!
                 * @brief This function returns a reference to member placement
                 * @return Reference to member placement
                 */
                eProsima_user_DllExport eprosima::fastrtps::fixed_string<32>& placement();
                /*!
                 * @brief This function copies the value in member language
                 * @param _language New value to be copied in member language
                 */
                eProsima_user_DllExport void language(
                        const eprosima::fastrtps::fixed_string<32>& _language);

                /*!
                 * @brief This function moves the value in member language
                 * @param _language New value to be moved in member language
                 */
                eProsima_user_DllExport void language(
                        eprosima::fastrtps::fixed_string<32>&& _language);

                /*!
                 * @brief This function returns a constant reference to member language
                 * @return Constant reference to member language
                 */
                eProsima_user_DllExport const eprosima::fastrtps::fixed_string<32>& language() const;

                /*!
                 * @brief This function returns a reference to member language
                 * @return Reference to member language
                 */
                eProsima_user_DllExport eprosima::fastrtps::fixed_string<32>& language();
                /*!
                 * @brief This function copies the value in member text
                 * @param _text New value to be copied in member text
                 */
                eProsima_user_DllExport void text(
                        const std::string& _text);

                /*!
                 * @brief This function moves the value in member text
                 * @param _text New value to be moved in member text
                 */
                eProsima_user_DllExport void text(
                        std::string&& _text);

                /*!
                 * @brief This function returns a constant reference to member text
                 * @return Constant reference to member text
                 */
                eProsima_user_DllExport const std::string& text() const;

                /*!
                 * @brief This function returns a reference to member text
                 * @return Reference to member text
                 */
                eProsima_user_DllExport std::string& text();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AppliedVerbatimAnnotation& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::fixed_string<32> m_placement;
                eprosima::fastrtps::fixed_string<32> m_language;
                std::string m_text;

            };
            /*!
             * @brief This class represents the structure AppliedBuiltinMemberAnnotations defined by the user in the IDL file.
             * @ingroup AnnotationParameterValue
             */
            class AppliedBuiltinMemberAnnotations
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport AppliedBuiltinMemberAnnotations();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~AppliedBuiltinMemberAnnotations();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinMemberAnnotations(
                        const AppliedBuiltinMemberAnnotations& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinMemberAnnotations(
                        AppliedBuiltinMemberAnnotations&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinMemberAnnotations& operator =(
                        const AppliedBuiltinMemberAnnotations& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations that will be copied.
                 */
                eProsima_user_DllExport AppliedBuiltinMemberAnnotations& operator =(
                        AppliedBuiltinMemberAnnotations&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const AppliedBuiltinMemberAnnotations& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const AppliedBuiltinMemberAnnotations& x) const;

                /*!
                 * @brief This function copies the value in member unit
                 * @param _unit New value to be copied in member unit
                 */
                eProsima_user_DllExport void unit(
                        const std::string& _unit);

                /*!
                 * @brief This function moves the value in member unit
                 * @param _unit New value to be moved in member unit
                 */
                eProsima_user_DllExport void unit(
                        std::string&& _unit);

                /*!
                 * @brief This function returns a constant reference to member unit
                 * @return Constant reference to member unit
                 */
                eProsima_user_DllExport const std::string& unit() const;

                /*!
                 * @brief This function returns a reference to member unit
                 * @return Reference to member unit
                 */
                eProsima_user_DllExport std::string& unit();
                /*!
                 * @brief This function copies the value in member min
                 * @param _min New value to be copied in member min
                 */
                eProsima_user_DllExport void min(
                        const eprosima::fastrtps::types::AnnotationParameterValue& _min);

                /*!
                 * @brief This function moves the value in member min
                 * @param _min New value to be moved in member min
                 */
                eProsima_user_DllExport void min(
                        eprosima::fastrtps::types::AnnotationParameterValue&& _min);

                /*!
                 * @brief This function returns a constant reference to member min
                 * @return Constant reference to member min
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AnnotationParameterValue& min() const;

                /*!
                 * @brief This function returns a reference to member min
                 * @return Reference to member min
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterValue& min();
                /*!
                 * @brief This function copies the value in member max
                 * @param _max New value to be copied in member max
                 */
                eProsima_user_DllExport void max(
                        const eprosima::fastrtps::types::AnnotationParameterValue& _max);

                /*!
                 * @brief This function moves the value in member max
                 * @param _max New value to be moved in member max
                 */
                eProsima_user_DllExport void max(
                        eprosima::fastrtps::types::AnnotationParameterValue&& _max);

                /*!
                 * @brief This function returns a constant reference to member max
                 * @return Constant reference to member max
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::AnnotationParameterValue& max() const;

                /*!
                 * @brief This function returns a reference to member max
                 * @return Reference to member max
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::AnnotationParameterValue& max();
                /*!
                 * @brief This function copies the value in member hash_id
                 * @param _hash_id New value to be copied in member hash_id
                 */
                eProsima_user_DllExport void hash_id(
                        const std::string& _hash_id);

                /*!
                 * @brief This function moves the value in member hash_id
                 * @param _hash_id New value to be moved in member hash_id
                 */
                eProsima_user_DllExport void hash_id(
                        std::string&& _hash_id);

                /*!
                 * @brief This function returns a constant reference to member hash_id
                 * @return Constant reference to member hash_id
                 */
                eProsima_user_DllExport const std::string& hash_id() const;

                /*!
                 * @brief This function returns a reference to member hash_id
                 * @return Reference to member hash_id
                 */
                eProsima_user_DllExport std::string& hash_id();

                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::AppliedBuiltinMemberAnnotations& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                std::string m_unit;
                eprosima::fastrtps::types::AnnotationParameterValue m_min;
                eprosima::fastrtps::types::AnnotationParameterValue m_max;
                std::string m_hash_id;

            };
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_ANNOTATIONPARAMETERVALUE_H_

