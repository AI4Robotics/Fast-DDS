// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeIdentifierTypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEIDENTIFIERTYPES_H_
#define _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEIDENTIFIERTYPES_H_

#include "TypeObjectHashId.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPEIDENTIFIERTYPES_SOURCE)
#define TYPEIDENTIFIERTYPES_DllAPI __declspec( dllexport )
#else
#define TYPEIDENTIFIERTYPES_DllAPI __declspec( dllimport )
#endif // TYPEIDENTIFIERTYPES_SOURCE
#else
#define TYPEIDENTIFIERTYPES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPEIDENTIFIERTYPES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
    namespace fastrtps {
        namespace types {

            // Forward declaration: non-supported @external annotation
            class TypeIdentifier;

            /*!
             * @brief This class represents the structure StringSTypeDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class StringSTypeDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport StringSTypeDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~StringSTypeDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StringSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringSTypeDefn(
                        const StringSTypeDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StringSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringSTypeDefn(
                        StringSTypeDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StringSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringSTypeDefn& operator =(
                        const StringSTypeDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StringSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringSTypeDefn& operator =(
                        StringSTypeDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StringSTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const StringSTypeDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StringSTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const StringSTypeDefn& x) const;

                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::SBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound& bound();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::StringSTypeDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::SBound m_bound;

            };
            /*!
             * @brief This class represents the structure StringLTypeDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class StringLTypeDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport StringLTypeDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~StringLTypeDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StringLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringLTypeDefn(
                        const StringLTypeDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StringLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringLTypeDefn(
                        StringLTypeDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StringLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringLTypeDefn& operator =(
                        const StringLTypeDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StringLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport StringLTypeDefn& operator =(
                        StringLTypeDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StringLTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const StringLTypeDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StringLTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const StringLTypeDefn& x) const;

                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::LBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound& bound();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::StringLTypeDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::LBound m_bound;

            };
            /*!
             * @brief This class represents the structure PlainCollectionHeader defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainCollectionHeader
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainCollectionHeader();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainCollectionHeader();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport PlainCollectionHeader(
                        const PlainCollectionHeader& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport PlainCollectionHeader(
                        PlainCollectionHeader&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport PlainCollectionHeader& operator =(
                        const PlainCollectionHeader& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainCollectionHeader that will be copied.
                 */
                eProsima_user_DllExport PlainCollectionHeader& operator =(
                        PlainCollectionHeader&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainCollectionHeader& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainCollectionHeader object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainCollectionHeader& x) const;

                /*!
                 * @brief This function sets a value in member equiv_kind
                 * @param _equiv_kind New value for member equiv_kind
                 */
                eProsima_user_DllExport void equiv_kind(
                        eprosima::fastrtps::types::EquivalenceKind _equiv_kind);

                /*!
                 * @brief This function returns the value of member equiv_kind
                 * @return Value of member equiv_kind
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EquivalenceKind equiv_kind() const;

                /*!
                 * @brief This function returns a reference to member equiv_kind
                 * @return Reference to member equiv_kind
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::EquivalenceKind& equiv_kind();

                /*!
                 * @brief This function sets a value in member element_flags
                 * @param _element_flags New value for member element_flags
                 */
                eProsima_user_DllExport void element_flags(
                        eprosima::fastrtps::types::CollectionElementFlag _element_flags);

                /*!
                 * @brief This function returns the value of member element_flags
                 * @return Value of member element_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag element_flags() const;

                /*!
                 * @brief This function returns a reference to member element_flags
                 * @return Reference to member element_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag& element_flags();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainCollectionHeader& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::EquivalenceKind m_equiv_kind;
                eprosima::fastrtps::types::CollectionElementFlag m_element_flags;

            };
            /*!
             * @brief This class represents the structure PlainSequenceSElemDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainSequenceSElemDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainSequenceSElemDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainSequenceSElemDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceSElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceSElemDefn(
                        const PlainSequenceSElemDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceSElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceSElemDefn(
                        PlainSequenceSElemDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceSElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceSElemDefn& operator =(
                        const PlainSequenceSElemDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceSElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceSElemDefn& operator =(
                        PlainSequenceSElemDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainSequenceSElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainSequenceSElemDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainSequenceSElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainSequenceSElemDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::SBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound& bound();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();


                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainSequenceSElemDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::SBound m_bound;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;

            };
            /*!
             * @brief This class represents the structure PlainSequenceLElemDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainSequenceLElemDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainSequenceLElemDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainSequenceLElemDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceLElemDefn(
                        const PlainSequenceLElemDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceLElemDefn(
                        PlainSequenceLElemDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceLElemDefn& operator =(
                        const PlainSequenceLElemDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainSequenceLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainSequenceLElemDefn& operator =(
                        PlainSequenceLElemDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainSequenceLElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainSequenceLElemDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainSequenceLElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainSequenceLElemDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::LBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound& bound();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainSequenceLElemDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::LBound m_bound;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;

            };
            /*!
             * @brief This class represents the structure PlainArraySElemDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainArraySElemDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainArraySElemDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainArraySElemDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArraySElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArraySElemDefn(
                        const PlainArraySElemDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArraySElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArraySElemDefn(
                        PlainArraySElemDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArraySElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArraySElemDefn& operator =(
                        const PlainArraySElemDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArraySElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArraySElemDefn& operator =(
                        PlainArraySElemDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainArraySElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainArraySElemDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainArraySElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainArraySElemDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member array_bound_seq
                 * @param _array_bound_seq New value to be copied in member array_bound_seq
                 */
                eProsima_user_DllExport void array_bound_seq(
                        const eprosima::fastrtps::types::SBoundSeq& _array_bound_seq);

                /*!
                 * @brief This function moves the value in member array_bound_seq
                 * @param _array_bound_seq New value to be moved in member array_bound_seq
                 */
                eProsima_user_DllExport void array_bound_seq(
                        eprosima::fastrtps::types::SBoundSeq&& _array_bound_seq);

                /*!
                 * @brief This function returns a constant reference to member array_bound_seq
                 * @return Constant reference to member array_bound_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::SBoundSeq& array_bound_seq() const;

                /*!
                 * @brief This function returns a reference to member array_bound_seq
                 * @return Reference to member array_bound_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBoundSeq& array_bound_seq();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainArraySElemDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::SBoundSeq m_array_bound_seq;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;

            };
            /*!
             * @brief This class represents the structure PlainArrayLElemDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainArrayLElemDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainArrayLElemDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainArrayLElemDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArrayLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArrayLElemDefn(
                        const PlainArrayLElemDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArrayLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArrayLElemDefn(
                        PlainArrayLElemDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArrayLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArrayLElemDefn& operator =(
                        const PlainArrayLElemDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainArrayLElemDefn that will be copied.
                 */
                eProsima_user_DllExport PlainArrayLElemDefn& operator =(
                        PlainArrayLElemDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainArrayLElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainArrayLElemDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainArrayLElemDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainArrayLElemDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function copies the value in member array_bound_seq
                 * @param _array_bound_seq New value to be copied in member array_bound_seq
                 */
                eProsima_user_DllExport void array_bound_seq(
                        const eprosima::fastrtps::types::LBoundSeq& _array_bound_seq);

                /*!
                 * @brief This function moves the value in member array_bound_seq
                 * @param _array_bound_seq New value to be moved in member array_bound_seq
                 */
                eProsima_user_DllExport void array_bound_seq(
                        eprosima::fastrtps::types::LBoundSeq&& _array_bound_seq);

                /*!
                 * @brief This function returns a constant reference to member array_bound_seq
                 * @return Constant reference to member array_bound_seq
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::LBoundSeq& array_bound_seq() const;

                /*!
                 * @brief This function returns a reference to member array_bound_seq
                 * @return Reference to member array_bound_seq
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBoundSeq& array_bound_seq();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainArrayLElemDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::LBoundSeq m_array_bound_seq;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;

            };
            /*!
             * @brief This class represents the structure PlainMapSTypeDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainMapSTypeDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainMapSTypeDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainMapSTypeDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapSTypeDefn(
                        const PlainMapSTypeDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapSTypeDefn(
                        PlainMapSTypeDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapSTypeDefn& operator =(
                        const PlainMapSTypeDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapSTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapSTypeDefn& operator =(
                        PlainMapSTypeDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainMapSTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainMapSTypeDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainMapSTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainMapSTypeDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::SBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::SBound& bound();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();

                /*!
                 * @brief This function sets a value in member key_flags
                 * @param _key_flags New value for member key_flags
                 */
                eProsima_user_DllExport void key_flags(
                        eprosima::fastrtps::types::CollectionElementFlag _key_flags);

                /*!
                 * @brief This function returns the value of member key_flags
                 * @return Value of member key_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag key_flags() const;

                /*!
                 * @brief This function returns a reference to member key_flags
                 * @return Reference to member key_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag& key_flags();

                /*!
                 * @brief This function sets a value in member key_identifier
                 * @param _key_identifier New value for member key_identifier 
                 */
                eProsima_user_DllExport void key_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _key_identifier);

                /*!
                 * @brief This function returns the value of member key_identifier
                 * @return Value of member key_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* key_identifier() const;

                /*!
                 * @brief This function returns a reference to member key_identifier
                 * @return Reference to member key_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& key_identifier();


                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainMapSTypeDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::SBound m_bound;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;
                eprosima::fastrtps::types::CollectionElementFlag m_key_flags;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_key_identifier;

            };
            /*!
             * @brief This class represents the structure PlainMapLTypeDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class PlainMapLTypeDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport PlainMapLTypeDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~PlainMapLTypeDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapLTypeDefn(
                        const PlainMapLTypeDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapLTypeDefn(
                        PlainMapLTypeDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapLTypeDefn& operator =(
                        const PlainMapLTypeDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::PlainMapLTypeDefn that will be copied.
                 */
                eProsima_user_DllExport PlainMapLTypeDefn& operator =(
                        PlainMapLTypeDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainMapLTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const PlainMapLTypeDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::PlainMapLTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const PlainMapLTypeDefn& x) const;

                /*!
                 * @brief This function copies the value in member header
                 * @param _header New value to be copied in member header
                 */
                eProsima_user_DllExport void header(
                        const eprosima::fastrtps::types::PlainCollectionHeader& _header);

                /*!
                 * @brief This function moves the value in member header
                 * @param _header New value to be moved in member header
                 */
                eProsima_user_DllExport void header(
                        eprosima::fastrtps::types::PlainCollectionHeader&& _header);

                /*!
                 * @brief This function returns a constant reference to member header
                 * @return Constant reference to member header
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::PlainCollectionHeader& header() const;

                /*!
                 * @brief This function returns a reference to member header
                 * @return Reference to member header
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::PlainCollectionHeader& header();
                /*!
                 * @brief This function sets a value in member bound
                 * @param _bound New value for member bound
                 */
                eProsima_user_DllExport void bound(
                        eprosima::fastrtps::types::LBound _bound);

                /*!
                 * @brief This function returns the value of member bound
                 * @return Value of member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound bound() const;

                /*!
                 * @brief This function returns a reference to member bound
                 * @return Reference to member bound
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::LBound& bound();

                /*!
                 * @brief This function sets a value in member element_identifier
                 * @param _element_identifier New value for member element_identifier 
                 */
                eProsima_user_DllExport void element_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _element_identifier);

                /*!
                 * @brief This function returns the value of member element_identifier
                 * @return Value of member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* element_identifier() const;

                /*!
                 * @brief This function returns a reference to member element_identifier
                 * @return Reference to member element_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& element_identifier();

                /*!
                 * @brief This function sets a value in member key_flags
                 * @param _key_flags New value for member key_flags
                 */
                eProsima_user_DllExport void key_flags(
                        eprosima::fastrtps::types::CollectionElementFlag _key_flags);

                /*!
                 * @brief This function returns the value of member key_flags
                 * @return Value of member key_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag key_flags() const;

                /*!
                 * @brief This function returns a reference to member key_flags
                 * @return Reference to member key_flags
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::CollectionElementFlag& key_flags();

                /*!
                 * @brief This function sets a value in member key_identifier
                 * @param _key_identifier New value for member key_identifier 
                 */
                eProsima_user_DllExport void key_identifier(
                        const eprosima::fastrtps::types::TypeIdentifier* _key_identifier);

                /*!
                 * @brief This function returns the value of member key_identifier
                 * @return Value of member key_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier* key_identifier() const;

                /*!
                 * @brief This function returns a reference to member key_identifier
                 * @return Reference to member key_identifier
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeIdentifier*& key_identifier();


                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::PlainMapLTypeDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::PlainCollectionHeader m_header;
                eprosima::fastrtps::types::LBound m_bound;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_element_identifier;
                eprosima::fastrtps::types::CollectionElementFlag m_key_flags;
                // @external annotation
                eprosima::fastrtps::types::TypeIdentifier* m_key_identifier;

            };
            /*!
             * @brief This class represents the structure StronglyConnectedComponentId defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class StronglyConnectedComponentId
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport StronglyConnectedComponentId();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~StronglyConnectedComponentId();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StronglyConnectedComponentId that will be copied.
                 */
                eProsima_user_DllExport StronglyConnectedComponentId(
                        const StronglyConnectedComponentId& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::StronglyConnectedComponentId that will be copied.
                 */
                eProsima_user_DllExport StronglyConnectedComponentId(
                        StronglyConnectedComponentId&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StronglyConnectedComponentId that will be copied.
                 */
                eProsima_user_DllExport StronglyConnectedComponentId& operator =(
                        const StronglyConnectedComponentId& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::StronglyConnectedComponentId that will be copied.
                 */
                eProsima_user_DllExport StronglyConnectedComponentId& operator =(
                        StronglyConnectedComponentId&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StronglyConnectedComponentId object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const StronglyConnectedComponentId& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::StronglyConnectedComponentId object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const StronglyConnectedComponentId& x) const;

                /*!
                 * @brief This function copies the value in member sc_component_id
                 * @param _sc_component_id New value to be copied in member sc_component_id
                 */
                eProsima_user_DllExport void sc_component_id(
                        const eprosima::fastrtps::types::TypeObjectHashId& _sc_component_id);

                /*!
                 * @brief This function moves the value in member sc_component_id
                 * @param _sc_component_id New value to be moved in member sc_component_id
                 */
                eProsima_user_DllExport void sc_component_id(
                        eprosima::fastrtps::types::TypeObjectHashId&& _sc_component_id);

                /*!
                 * @brief This function returns a constant reference to member sc_component_id
                 * @return Constant reference to member sc_component_id
                 */
                eProsima_user_DllExport const eprosima::fastrtps::types::TypeObjectHashId& sc_component_id() const;

                /*!
                 * @brief This function returns a reference to member sc_component_id
                 * @return Reference to member sc_component_id
                 */
                eProsima_user_DllExport eprosima::fastrtps::types::TypeObjectHashId& sc_component_id();
                /*!
                 * @brief This function sets a value in member scc_length
                 * @param _scc_length New value for member scc_length
                 */
                eProsima_user_DllExport void scc_length(
                        int32_t _scc_length);

                /*!
                 * @brief This function returns the value of member scc_length
                 * @return Value of member scc_length
                 */
                eProsima_user_DllExport int32_t scc_length() const;

                /*!
                 * @brief This function returns a reference to member scc_length
                 * @return Reference to member scc_length
                 */
                eProsima_user_DllExport int32_t& scc_length();

                /*!
                 * @brief This function sets a value in member scc_index
                 * @param _scc_index New value for member scc_index
                 */
                eProsima_user_DllExport void scc_index(
                        int32_t _scc_index);

                /*!
                 * @brief This function returns the value of member scc_index
                 * @return Value of member scc_index
                 */
                eProsima_user_DllExport int32_t scc_index() const;

                /*!
                 * @brief This function returns a reference to member scc_index
                 * @return Reference to member scc_index
                 */
                eProsima_user_DllExport int32_t& scc_index();


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::StronglyConnectedComponentId& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:

                eprosima::fastrtps::types::TypeObjectHashId m_sc_component_id;
                int32_t m_scc_length;
                int32_t m_scc_index;

            };
            /*!
             * @brief This class represents the structure ExtendedTypeDefn defined by the user in the IDL file.
             * @ingroup TypeIdentifierTypes
             */
            class ExtendedTypeDefn
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport ExtendedTypeDefn();

                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~ExtendedTypeDefn();

                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedTypeDefn that will be copied.
                 */
                eProsima_user_DllExport ExtendedTypeDefn(
                        const ExtendedTypeDefn& x);

                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedTypeDefn that will be copied.
                 */
                eProsima_user_DllExport ExtendedTypeDefn(
                        ExtendedTypeDefn&& x) noexcept;

                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedTypeDefn that will be copied.
                 */
                eProsima_user_DllExport ExtendedTypeDefn& operator =(
                        const ExtendedTypeDefn& x);

                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object eprosima::fastrtps::types::ExtendedTypeDefn that will be copied.
                 */
                eProsima_user_DllExport ExtendedTypeDefn& operator =(
                        ExtendedTypeDefn&& x) noexcept;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::ExtendedTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator ==(
                        const ExtendedTypeDefn& x) const;

                /*!
                 * @brief Comparison operator.
                 * @param x eprosima::fastrtps::types::ExtendedTypeDefn object to compare.
                 */
                eProsima_user_DllExport bool operator !=(
                        const ExtendedTypeDefn& x) const;


                /*!
                * @brief This function returns the maximum serialized size of an object
                * depending on the buffer alignment.
                * @param current_alignment Buffer alignment.
                * @return Maximum serialized size.
                */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(
                        const eprosima::fastrtps::types::ExtendedTypeDefn& data,
                        size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(
                        eprosima::fastcdr::Cdr& cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(
                        eprosima::fastcdr::Cdr& cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                        size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(
                        eprosima::fastcdr::Cdr& cdr) const;

            private:


            };
        } // namespace types
    } // namespace fastrtps
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_EPROSIMA_FASTRTPS_TYPES_TYPEIDENTIFIERTYPES_H_

