// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeIdentifier.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <fastrtps/types/TypeIdentifier.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>








#define eprosima_fastrtps_types_PlainCollectionHeader_max_cdr_typesize 4ULL;
#define eprosima_fastrtps_types_StringSTypeDefn_max_cdr_typesize 1ULL;



















#define eprosima_fastrtps_types_ExtendedTypeDefn_max_cdr_typesize 0ULL;




#define eprosima_fastrtps_types_StringLTypeDefn_max_cdr_typesize 4ULL;
#define eprosima_fastrtps_types_StronglyConnectedComponentId_max_cdr_typesize 24ULL;





#define eprosima_fastrtps_types_PlainMapLTypeDefn_max_key_cdr_typesize 0ULL;






#define eprosima_fastrtps_types_PlainCollectionHeader_max_key_cdr_typesize 0ULL;
#define eprosima_fastrtps_types_PlainSequenceSElemDefn_max_key_cdr_typesize 0ULL;
#define eprosima_fastrtps_types_StringSTypeDefn_max_key_cdr_typesize 0ULL;


#define eprosima_fastrtps_types_PlainSequenceLElemDefn_max_key_cdr_typesize 0ULL;




#define eprosima_fastrtps_types_PlainArrayLElemDefn_max_key_cdr_typesize 0ULL;







#define eprosima_fastrtps_types_PlainArraySElemDefn_max_key_cdr_typesize 0ULL;




#define eprosima_fastrtps_types_PlainMapSTypeDefn_max_key_cdr_typesize 0ULL;


#define eprosima_fastrtps_types_ExtendedTypeDefn_max_key_cdr_typesize 0ULL;




#define eprosima_fastrtps_types_StringLTypeDefn_max_key_cdr_typesize 0ULL;
#define eprosima_fastrtps_types_StronglyConnectedComponentId_max_key_cdr_typesize 0ULL;





eprosima::fastrtps::types::TypeIdentifier::TypeIdentifier()
{
    m__d = 0;
    // eprosima::fastrtps::types::StringSTypeDefn m_string_sdefn

    // eprosima::fastrtps::types::StringLTypeDefn m_string_ldefn

    // eprosima::fastrtps::types::PlainSequenceSElemDefn m_seq_sdefn

    // eprosima::fastrtps::types::PlainSequenceLElemDefn m_seq_ldefn

    // eprosima::fastrtps::types::PlainArraySElemDefn m_array_sdefn

    // eprosima::fastrtps::types::PlainArrayLElemDefn m_array_ldefn

    // eprosima::fastrtps::types::PlainMapSTypeDefn m_map_sdefn

    // eprosima::fastrtps::types::PlainMapLTypeDefn m_map_ldefn

    // eprosima::fastrtps::types::StronglyConnectedComponentId m_sc_component_id

    // eprosima::fastrtps::types::EquivalenceHash m_equivalence_hash
    memset(&m_equivalence_hash, 0, (14) * 1);
    // eprosima::fastrtps::types::ExtendedTypeDefn m_extended_defn

}

eprosima::fastrtps::types::TypeIdentifier::~TypeIdentifier()
{
}

eprosima::fastrtps::types::TypeIdentifier::TypeIdentifier(
        const TypeIdentifier& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        m_string_sdefn = x.m_string_sdefn;
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        m_string_ldefn = x.m_string_ldefn;
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        m_seq_sdefn = x.m_seq_sdefn;
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        m_seq_ldefn = x.m_seq_ldefn;
        break;
        case TI_PLAIN_ARRAY_SMALL:
        m_array_sdefn = x.m_array_sdefn;
        break;
        case TI_PLAIN_ARRAY_LARGE:
        m_array_ldefn = x.m_array_ldefn;
        break;
        case TI_PLAIN_MAP_SMALL:
        m_map_sdefn = x.m_map_sdefn;
        break;
        case TI_PLAIN_MAP_LARGE:
        m_map_ldefn = x.m_map_ldefn;
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        m_sc_component_id = x.m_sc_component_id;
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_equivalence_hash = x.m_equivalence_hash;
        break;

        default:
        m_extended_defn = x.m_extended_defn;
        break;
    }
}

eprosima::fastrtps::types::TypeIdentifier::TypeIdentifier(
        TypeIdentifier&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        m_string_sdefn = std::move(x.m_string_sdefn);
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        m_string_ldefn = std::move(x.m_string_ldefn);
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        m_seq_sdefn = std::move(x.m_seq_sdefn);
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        m_seq_ldefn = std::move(x.m_seq_ldefn);
        break;
        case TI_PLAIN_ARRAY_SMALL:
        m_array_sdefn = std::move(x.m_array_sdefn);
        break;
        case TI_PLAIN_ARRAY_LARGE:
        m_array_ldefn = std::move(x.m_array_ldefn);
        break;
        case TI_PLAIN_MAP_SMALL:
        m_map_sdefn = std::move(x.m_map_sdefn);
        break;
        case TI_PLAIN_MAP_LARGE:
        m_map_ldefn = std::move(x.m_map_ldefn);
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        m_sc_component_id = std::move(x.m_sc_component_id);
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_equivalence_hash = std::move(x.m_equivalence_hash);
        break;

        default:
        m_extended_defn = std::move(x.m_extended_defn);
        break;
    }
}

eprosima::fastrtps::types::TypeIdentifier& eprosima::fastrtps::types::TypeIdentifier::operator =(
        const TypeIdentifier& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        m_string_sdefn = x.m_string_sdefn;
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        m_string_ldefn = x.m_string_ldefn;
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        m_seq_sdefn = x.m_seq_sdefn;
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        m_seq_ldefn = x.m_seq_ldefn;
        break;
        case TI_PLAIN_ARRAY_SMALL:
        m_array_sdefn = x.m_array_sdefn;
        break;
        case TI_PLAIN_ARRAY_LARGE:
        m_array_ldefn = x.m_array_ldefn;
        break;
        case TI_PLAIN_MAP_SMALL:
        m_map_sdefn = x.m_map_sdefn;
        break;
        case TI_PLAIN_MAP_LARGE:
        m_map_ldefn = x.m_map_ldefn;
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        m_sc_component_id = x.m_sc_component_id;
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_equivalence_hash = x.m_equivalence_hash;
        break;

        default:
        m_extended_defn = x.m_extended_defn;
        break;
    }

    return *this;
}

eprosima::fastrtps::types::TypeIdentifier& eprosima::fastrtps::types::TypeIdentifier::operator =(
        TypeIdentifier&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        m_string_sdefn = std::move(x.m_string_sdefn);
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        m_string_ldefn = std::move(x.m_string_ldefn);
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        m_seq_sdefn = std::move(x.m_seq_sdefn);
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        m_seq_ldefn = std::move(x.m_seq_ldefn);
        break;
        case TI_PLAIN_ARRAY_SMALL:
        m_array_sdefn = std::move(x.m_array_sdefn);
        break;
        case TI_PLAIN_ARRAY_LARGE:
        m_array_ldefn = std::move(x.m_array_ldefn);
        break;
        case TI_PLAIN_MAP_SMALL:
        m_map_sdefn = std::move(x.m_map_sdefn);
        break;
        case TI_PLAIN_MAP_LARGE:
        m_map_ldefn = std::move(x.m_map_ldefn);
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        m_sc_component_id = std::move(x.m_sc_component_id);
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_equivalence_hash = std::move(x.m_equivalence_hash);
        break;

        default:
        m_extended_defn = std::move(x.m_extended_defn);
        break;
    }

    return *this;
}

bool eprosima::fastrtps::types::TypeIdentifier::operator ==(
        const TypeIdentifier& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
            return (m_string_sdefn == x.m_string_sdefn);
            break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
            return (m_string_ldefn == x.m_string_ldefn);
            break;
        case TI_PLAIN_SEQUENCE_SMALL:
            return (m_seq_sdefn == x.m_seq_sdefn);
            break;
        case TI_PLAIN_SEQUENCE_LARGE:
            return (m_seq_ldefn == x.m_seq_ldefn);
            break;
        case TI_PLAIN_ARRAY_SMALL:
            return (m_array_sdefn == x.m_array_sdefn);
            break;
        case TI_PLAIN_ARRAY_LARGE:
            return (m_array_ldefn == x.m_array_ldefn);
            break;
        case TI_PLAIN_MAP_SMALL:
            return (m_map_sdefn == x.m_map_sdefn);
            break;
        case TI_PLAIN_MAP_LARGE:
            return (m_map_ldefn == x.m_map_ldefn);
            break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
            return (m_sc_component_id == x.m_sc_component_id);
            break;
        case EK_COMPLETE:
        case EK_MINIMAL:
            return (m_equivalence_hash == x.m_equivalence_hash);
            break;

        default:
        return m_extended_defn == x.m_extended_defn;
        break;
    }
    return false;
}

bool eprosima::fastrtps::types::TypeIdentifier::operator !=(
        const TypeIdentifier& x) const
{
    return !(*this == x);
}

void eprosima::fastrtps::types::TypeIdentifier::_d(
        uint8_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        switch(__d)
        {
            case TI_STRING8_SMALL:
            case TI_STRING16_SMALL:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        switch(__d)
        {
            case TI_STRING8_LARGE:
            case TI_STRING16_LARGE:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        switch(__d)
        {
            case TI_PLAIN_SEQUENCE_SMALL:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        switch(__d)
        {
            case TI_PLAIN_SEQUENCE_LARGE:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_ARRAY_SMALL:
        switch(__d)
        {
            case TI_PLAIN_ARRAY_SMALL:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_ARRAY_LARGE:
        switch(__d)
        {
            case TI_PLAIN_ARRAY_LARGE:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_MAP_SMALL:
        switch(__d)
        {
            case TI_PLAIN_MAP_SMALL:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_PLAIN_MAP_LARGE:
        switch(__d)
        {
            case TI_PLAIN_MAP_LARGE:
            b = true;
            break;
            default:
            break;
        }
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        switch(__d)
        {
            case TI_STRONGLY_CONNECTED_COMPONENT:
            b = true;
            break;
            default:
            break;
        }
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        switch(__d)
        {
            case EK_COMPLETE:
            case EK_MINIMAL:
            b = true;
            break;
            default:
            break;
        }
        break;
        default:
        b = true;
        switch(__d)
        {
            case TI_STRING8_SMALL:
            case TI_STRING16_SMALL:
            case TI_STRING8_LARGE:
            case TI_STRING16_LARGE:
            case TI_PLAIN_SEQUENCE_SMALL:
            case TI_PLAIN_SEQUENCE_LARGE:
            case TI_PLAIN_ARRAY_SMALL:
            case TI_PLAIN_ARRAY_LARGE:
            case TI_PLAIN_MAP_SMALL:
            case TI_PLAIN_MAP_LARGE:
            case TI_STRONGLY_CONNECTED_COMPONENT:
            case EK_COMPLETE:
            case EK_MINIMAL:
            b = false;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastrtps::types::TypeIdentifier::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastrtps::types::TypeIdentifier::_d()
{
    return m__d;
}

void eprosima::fastrtps::types::TypeIdentifier::string_sdefn(
        const eprosima::fastrtps::types::StringSTypeDefn& _string_sdefn)
{
    m_string_sdefn = _string_sdefn;
    m__d = TI_STRING8_SMALL;
}

void eprosima::fastrtps::types::TypeIdentifier::string_sdefn(
        eprosima::fastrtps::types::StringSTypeDefn&& _string_sdefn)
{
    m_string_sdefn = std::move(_string_sdefn);
    m__d = TI_STRING8_SMALL;
}

const eprosima::fastrtps::types::StringSTypeDefn& eprosima::fastrtps::types::TypeIdentifier::string_sdefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_sdefn;
}

eprosima::fastrtps::types::StringSTypeDefn& eprosima::fastrtps::types::TypeIdentifier::string_sdefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_sdefn;
}
void eprosima::fastrtps::types::TypeIdentifier::string_ldefn(
        const eprosima::fastrtps::types::StringLTypeDefn& _string_ldefn)
{
    m_string_ldefn = _string_ldefn;
    m__d = TI_STRING8_LARGE;
}

void eprosima::fastrtps::types::TypeIdentifier::string_ldefn(
        eprosima::fastrtps::types::StringLTypeDefn&& _string_ldefn)
{
    m_string_ldefn = std::move(_string_ldefn);
    m__d = TI_STRING8_LARGE;
}

const eprosima::fastrtps::types::StringLTypeDefn& eprosima::fastrtps::types::TypeIdentifier::string_ldefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_ldefn;
}

eprosima::fastrtps::types::StringLTypeDefn& eprosima::fastrtps::types::TypeIdentifier::string_ldefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_string_ldefn;
}
void eprosima::fastrtps::types::TypeIdentifier::seq_sdefn(
        const eprosima::fastrtps::types::PlainSequenceSElemDefn& _seq_sdefn)
{
    m_seq_sdefn = _seq_sdefn;
    m__d = TI_PLAIN_SEQUENCE_SMALL;
}

void eprosima::fastrtps::types::TypeIdentifier::seq_sdefn(
        eprosima::fastrtps::types::PlainSequenceSElemDefn&& _seq_sdefn)
{
    m_seq_sdefn = std::move(_seq_sdefn);
    m__d = TI_PLAIN_SEQUENCE_SMALL;
}

const eprosima::fastrtps::types::PlainSequenceSElemDefn& eprosima::fastrtps::types::TypeIdentifier::seq_sdefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_SEQUENCE_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_sdefn;
}

eprosima::fastrtps::types::PlainSequenceSElemDefn& eprosima::fastrtps::types::TypeIdentifier::seq_sdefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_SEQUENCE_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_sdefn;
}
void eprosima::fastrtps::types::TypeIdentifier::seq_ldefn(
        const eprosima::fastrtps::types::PlainSequenceLElemDefn& _seq_ldefn)
{
    m_seq_ldefn = _seq_ldefn;
    m__d = TI_PLAIN_SEQUENCE_LARGE;
}

void eprosima::fastrtps::types::TypeIdentifier::seq_ldefn(
        eprosima::fastrtps::types::PlainSequenceLElemDefn&& _seq_ldefn)
{
    m_seq_ldefn = std::move(_seq_ldefn);
    m__d = TI_PLAIN_SEQUENCE_LARGE;
}

const eprosima::fastrtps::types::PlainSequenceLElemDefn& eprosima::fastrtps::types::TypeIdentifier::seq_ldefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_SEQUENCE_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_ldefn;
}

eprosima::fastrtps::types::PlainSequenceLElemDefn& eprosima::fastrtps::types::TypeIdentifier::seq_ldefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_SEQUENCE_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_seq_ldefn;
}
void eprosima::fastrtps::types::TypeIdentifier::array_sdefn(
        const eprosima::fastrtps::types::PlainArraySElemDefn& _array_sdefn)
{
    m_array_sdefn = _array_sdefn;
    m__d = TI_PLAIN_ARRAY_SMALL;
}

void eprosima::fastrtps::types::TypeIdentifier::array_sdefn(
        eprosima::fastrtps::types::PlainArraySElemDefn&& _array_sdefn)
{
    m_array_sdefn = std::move(_array_sdefn);
    m__d = TI_PLAIN_ARRAY_SMALL;
}

const eprosima::fastrtps::types::PlainArraySElemDefn& eprosima::fastrtps::types::TypeIdentifier::array_sdefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_ARRAY_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_sdefn;
}

eprosima::fastrtps::types::PlainArraySElemDefn& eprosima::fastrtps::types::TypeIdentifier::array_sdefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_ARRAY_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_sdefn;
}
void eprosima::fastrtps::types::TypeIdentifier::array_ldefn(
        const eprosima::fastrtps::types::PlainArrayLElemDefn& _array_ldefn)
{
    m_array_ldefn = _array_ldefn;
    m__d = TI_PLAIN_ARRAY_LARGE;
}

void eprosima::fastrtps::types::TypeIdentifier::array_ldefn(
        eprosima::fastrtps::types::PlainArrayLElemDefn&& _array_ldefn)
{
    m_array_ldefn = std::move(_array_ldefn);
    m__d = TI_PLAIN_ARRAY_LARGE;
}

const eprosima::fastrtps::types::PlainArrayLElemDefn& eprosima::fastrtps::types::TypeIdentifier::array_ldefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_ARRAY_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_ldefn;
}

eprosima::fastrtps::types::PlainArrayLElemDefn& eprosima::fastrtps::types::TypeIdentifier::array_ldefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_ARRAY_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_array_ldefn;
}
void eprosima::fastrtps::types::TypeIdentifier::map_sdefn(
        const eprosima::fastrtps::types::PlainMapSTypeDefn& _map_sdefn)
{
    m_map_sdefn = _map_sdefn;
    m__d = TI_PLAIN_MAP_SMALL;
}

void eprosima::fastrtps::types::TypeIdentifier::map_sdefn(
        eprosima::fastrtps::types::PlainMapSTypeDefn&& _map_sdefn)
{
    m_map_sdefn = std::move(_map_sdefn);
    m__d = TI_PLAIN_MAP_SMALL;
}

const eprosima::fastrtps::types::PlainMapSTypeDefn& eprosima::fastrtps::types::TypeIdentifier::map_sdefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_MAP_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_sdefn;
}

eprosima::fastrtps::types::PlainMapSTypeDefn& eprosima::fastrtps::types::TypeIdentifier::map_sdefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_MAP_SMALL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_sdefn;
}
void eprosima::fastrtps::types::TypeIdentifier::map_ldefn(
        const eprosima::fastrtps::types::PlainMapLTypeDefn& _map_ldefn)
{
    m_map_ldefn = _map_ldefn;
    m__d = TI_PLAIN_MAP_LARGE;
}

void eprosima::fastrtps::types::TypeIdentifier::map_ldefn(
        eprosima::fastrtps::types::PlainMapLTypeDefn&& _map_ldefn)
{
    m_map_ldefn = std::move(_map_ldefn);
    m__d = TI_PLAIN_MAP_LARGE;
}

const eprosima::fastrtps::types::PlainMapLTypeDefn& eprosima::fastrtps::types::TypeIdentifier::map_ldefn() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_MAP_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_ldefn;
}

eprosima::fastrtps::types::PlainMapLTypeDefn& eprosima::fastrtps::types::TypeIdentifier::map_ldefn()
{
    bool b = false;

    switch(m__d)
    {
        case TI_PLAIN_MAP_LARGE:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_map_ldefn;
}
void eprosima::fastrtps::types::TypeIdentifier::sc_component_id(
        const eprosima::fastrtps::types::StronglyConnectedComponentId& _sc_component_id)
{
    m_sc_component_id = _sc_component_id;
    m__d = TI_STRONGLY_CONNECTED_COMPONENT;
}

void eprosima::fastrtps::types::TypeIdentifier::sc_component_id(
        eprosima::fastrtps::types::StronglyConnectedComponentId&& _sc_component_id)
{
    m_sc_component_id = std::move(_sc_component_id);
    m__d = TI_STRONGLY_CONNECTED_COMPONENT;
}

const eprosima::fastrtps::types::StronglyConnectedComponentId& eprosima::fastrtps::types::TypeIdentifier::sc_component_id() const
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRONGLY_CONNECTED_COMPONENT:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sc_component_id;
}

eprosima::fastrtps::types::StronglyConnectedComponentId& eprosima::fastrtps::types::TypeIdentifier::sc_component_id()
{
    bool b = false;

    switch(m__d)
    {
        case TI_STRONGLY_CONNECTED_COMPONENT:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_sc_component_id;
}
void eprosima::fastrtps::types::TypeIdentifier::equivalence_hash(
        const eprosima::fastrtps::types::EquivalenceHash& _equivalence_hash)
{
    m_equivalence_hash = _equivalence_hash;
    m__d = EK_COMPLETE;
}

void eprosima::fastrtps::types::TypeIdentifier::equivalence_hash(
        eprosima::fastrtps::types::EquivalenceHash&& _equivalence_hash)
{
    m_equivalence_hash = std::move(_equivalence_hash);
    m__d = EK_COMPLETE;
}

const eprosima::fastrtps::types::EquivalenceHash& eprosima::fastrtps::types::TypeIdentifier::equivalence_hash() const
{
    bool b = false;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_equivalence_hash;
}

eprosima::fastrtps::types::EquivalenceHash& eprosima::fastrtps::types::TypeIdentifier::equivalence_hash()
{
    bool b = false;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_equivalence_hash;
}
void eprosima::fastrtps::types::TypeIdentifier::extended_defn(
        const eprosima::fastrtps::types::ExtendedTypeDefn& _extended_defn)
{
    m_extended_defn = _extended_defn;
    m__d = 0;
}

void eprosima::fastrtps::types::TypeIdentifier::extended_defn(
        eprosima::fastrtps::types::ExtendedTypeDefn&& _extended_defn)
{
    m_extended_defn = std::move(_extended_defn);
    m__d = 0;
}

const eprosima::fastrtps::types::ExtendedTypeDefn& eprosima::fastrtps::types::TypeIdentifier::extended_defn() const
{
    bool b = true;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        case TI_PLAIN_SEQUENCE_SMALL:
        case TI_PLAIN_SEQUENCE_LARGE:
        case TI_PLAIN_ARRAY_SMALL:
        case TI_PLAIN_ARRAY_LARGE:
        case TI_PLAIN_MAP_SMALL:
        case TI_PLAIN_MAP_LARGE:
        case TI_STRONGLY_CONNECTED_COMPONENT:
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_defn;
}

eprosima::fastrtps::types::ExtendedTypeDefn& eprosima::fastrtps::types::TypeIdentifier::extended_defn()
{
    bool b = true;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        case TI_PLAIN_SEQUENCE_SMALL:
        case TI_PLAIN_SEQUENCE_LARGE:
        case TI_PLAIN_ARRAY_SMALL:
        case TI_PLAIN_ARRAY_LARGE:
        case TI_PLAIN_MAP_SMALL:
        case TI_PLAIN_MAP_LARGE:
        case TI_STRONGLY_CONNECTED_COMPONENT:
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_extended_defn;
}

// TODO(Ricardo) Review
size_t eprosima::fastrtps::types::TypeIdentifier::getCdrSerializedSize(
        const eprosima::fastrtps::types::TypeIdentifier& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    switch(data.m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        current_alignment += eprosima::fastrtps::types::StringSTypeDefn::getCdrSerializedSize(data.string_sdefn(), current_alignment);
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        current_alignment += eprosima::fastrtps::types::StringLTypeDefn::getCdrSerializedSize(data.string_ldefn(), current_alignment);
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        current_alignment += eprosima::fastrtps::types::PlainSequenceSElemDefn::getCdrSerializedSize(data.seq_sdefn(), current_alignment);
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        current_alignment += eprosima::fastrtps::types::PlainSequenceLElemDefn::getCdrSerializedSize(data.seq_ldefn(), current_alignment);
        break;
        case TI_PLAIN_ARRAY_SMALL:
        current_alignment += eprosima::fastrtps::types::PlainArraySElemDefn::getCdrSerializedSize(data.array_sdefn(), current_alignment);
        break;
        case TI_PLAIN_ARRAY_LARGE:
        current_alignment += eprosima::fastrtps::types::PlainArrayLElemDefn::getCdrSerializedSize(data.array_ldefn(), current_alignment);
        break;
        case TI_PLAIN_MAP_SMALL:
        current_alignment += eprosima::fastrtps::types::PlainMapSTypeDefn::getCdrSerializedSize(data.map_sdefn(), current_alignment);
        break;
        case TI_PLAIN_MAP_LARGE:
        current_alignment += eprosima::fastrtps::types::PlainMapLTypeDefn::getCdrSerializedSize(data.map_ldefn(), current_alignment);
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        current_alignment += eprosima::fastrtps::types::StronglyConnectedComponentId::getCdrSerializedSize(data.sc_component_id(), current_alignment);
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        current_alignment += ((14) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
        break;

        default:
        current_alignment += eprosima::fastrtps::types::ExtendedTypeDefn::getCdrSerializedSize(data.extended_defn(), current_alignment);
        break;
    }

    return current_alignment - initial_alignment;
}

void eprosima::fastrtps::types::TypeIdentifier::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        scdr << m_string_sdefn;
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        scdr << m_string_ldefn;
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        scdr << m_seq_sdefn;
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        scdr << m_seq_ldefn;
        break;
        case TI_PLAIN_ARRAY_SMALL:
        scdr << m_array_sdefn;
        break;
        case TI_PLAIN_ARRAY_LARGE:
        scdr << m_array_ldefn;
        break;
        case TI_PLAIN_MAP_SMALL:
        scdr << m_map_sdefn;
        break;
        case TI_PLAIN_MAP_LARGE:
        scdr << m_map_ldefn;
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        scdr << m_sc_component_id;
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        scdr << m_equivalence_hash;

        break;

        default:
        scdr << m_extended_defn;
        break;
    }
}

void eprosima::fastrtps::types::TypeIdentifier::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case TI_STRING8_SMALL:
        case TI_STRING16_SMALL:
        dcdr >> m_string_sdefn;
        break;
        case TI_STRING8_LARGE:
        case TI_STRING16_LARGE:
        dcdr >> m_string_ldefn;
        break;
        case TI_PLAIN_SEQUENCE_SMALL:
        dcdr >> m_seq_sdefn;
        break;
        case TI_PLAIN_SEQUENCE_LARGE:
        dcdr >> m_seq_ldefn;
        break;
        case TI_PLAIN_ARRAY_SMALL:
        dcdr >> m_array_sdefn;
        break;
        case TI_PLAIN_ARRAY_LARGE:
        dcdr >> m_array_ldefn;
        break;
        case TI_PLAIN_MAP_SMALL:
        dcdr >> m_map_sdefn;
        break;
        case TI_PLAIN_MAP_LARGE:
        dcdr >> m_map_ldefn;
        break;
        case TI_STRONGLY_CONNECTED_COMPONENT:
        dcdr >> m_sc_component_id;
        break;
        case EK_COMPLETE:
        case EK_MINIMAL:
        dcdr >> m_equivalence_hash;

        break;

        default:
        dcdr >> m_extended_defn;
        break;
    }
}





