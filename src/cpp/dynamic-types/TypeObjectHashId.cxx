// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeObjectHashId.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include <fastrtps/types/TypeObjectHashId.h>
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




























eprosima::fastrtps::types::TypeObjectHashId::TypeObjectHashId()
{
    m__d = EK_COMPLETE;
    // eprosima::fastrtps::types::EquivalenceHash m_hash
    memset(&m_hash, 0, (14) * 1);
}

eprosima::fastrtps::types::TypeObjectHashId::~TypeObjectHashId()
{
}

eprosima::fastrtps::types::TypeObjectHashId::TypeObjectHashId(
        const TypeObjectHashId& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_hash = x.m_hash;
        break;
        default:
        break;
    }
}

eprosima::fastrtps::types::TypeObjectHashId::TypeObjectHashId(
        TypeObjectHashId&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_hash = std::move(x.m_hash);
        break;
        default:
        break;
    }
}

eprosima::fastrtps::types::TypeObjectHashId& eprosima::fastrtps::types::TypeObjectHashId::operator =(
        const TypeObjectHashId& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_hash = x.m_hash;
        break;
        default:
        break;
    }

    return *this;
}

eprosima::fastrtps::types::TypeObjectHashId& eprosima::fastrtps::types::TypeObjectHashId::operator =(
        TypeObjectHashId&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        m_hash = std::move(x.m_hash);
        break;
        default:
        break;
    }

    return *this;
}

bool eprosima::fastrtps::types::TypeObjectHashId::operator ==(
        const TypeObjectHashId& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
            return (m_hash == x.m_hash);
            break;
        default:
        break;
    }
    return false;
}

bool eprosima::fastrtps::types::TypeObjectHashId::operator !=(
        const TypeObjectHashId& x) const
{
    return !(*this == x);
}

void eprosima::fastrtps::types::TypeObjectHashId::_d(
        uint8_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        switch(__d)
        {
            case EK_COMPLETE:
            case EK_MINIMAL:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint8_t eprosima::fastrtps::types::TypeObjectHashId::_d() const
{
    return m__d;
}

uint8_t& eprosima::fastrtps::types::TypeObjectHashId::_d()
{
    return m__d;
}

void eprosima::fastrtps::types::TypeObjectHashId::hash(
        const eprosima::fastrtps::types::EquivalenceHash& _hash)
{
    m_hash = _hash;
    m__d = EK_COMPLETE;
}

void eprosima::fastrtps::types::TypeObjectHashId::hash(
        eprosima::fastrtps::types::EquivalenceHash&& _hash)
{
    m_hash = std::move(_hash);
    m__d = EK_COMPLETE;
}

const eprosima::fastrtps::types::EquivalenceHash& eprosima::fastrtps::types::TypeObjectHashId::hash() const
{
    bool b = false;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_hash;
}

eprosima::fastrtps::types::EquivalenceHash& eprosima::fastrtps::types::TypeObjectHashId::hash()
{
    bool b = false;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_hash;
}

// TODO(Ricardo) Review
size_t eprosima::fastrtps::types::TypeObjectHashId::getCdrSerializedSize(
        const eprosima::fastrtps::types::TypeObjectHashId& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    switch(data.m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        current_alignment += ((14) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void eprosima::fastrtps::types::TypeObjectHashId::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        scdr << m_hash;


        break;
        default:
        break;
    }
}

void eprosima::fastrtps::types::TypeObjectHashId::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case EK_COMPLETE:
        case EK_MINIMAL:
        dcdr >> m_hash;

        break;
        default:
        break;
    }
}




