// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ImageData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_IMAGEDATA_H_
#define _FAST_DDS_GENERATED_IMAGEDATA_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(IMAGEDATA_SOURCE)
#define IMAGEDATA_DllAPI __declspec( dllexport )
#else
#define IMAGEDATA_DllAPI __declspec( dllimport )
#endif // IMAGEDATA_SOURCE
#else
#define IMAGEDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define IMAGEDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the enumeration PixelFormatEnum defined by the user in the IDL file.
 * @ingroup ImageData
 */
enum PixelFormatEnum : uint32_t
{
    FORMAT_1,
    FORMAT_2
};
/*!
 * @brief This class represents the structure ImageFormatMsg defined by the user in the IDL file.
 * @ingroup ImageData
 */
class ImageFormatMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ImageFormatMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ImageFormatMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ImageFormatMsg that will be copied.
     */
    eProsima_user_DllExport ImageFormatMsg(
            const ImageFormatMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ImageFormatMsg that will be copied.
     */
    eProsima_user_DllExport ImageFormatMsg(
            ImageFormatMsg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ImageFormatMsg that will be copied.
     */
    eProsima_user_DllExport ImageFormatMsg& operator =(
            const ImageFormatMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ImageFormatMsg that will be copied.
     */
    eProsima_user_DllExport ImageFormatMsg& operator =(
            ImageFormatMsg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ImageFormatMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ImageFormatMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ImageFormatMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ImageFormatMsg& x) const;

    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            uint32_t _width);

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport uint32_t width() const;

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport uint32_t& width();

    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            uint32_t _height);

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport uint32_t height() const;

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport uint32_t& height();

    /*!
     * @brief This function sets a value in member stride
     * @param _stride New value for member stride
     */
    eProsima_user_DllExport void stride(
            uint32_t _stride);

    /*!
     * @brief This function returns the value of member stride
     * @return Value of member stride
     */
    eProsima_user_DllExport uint32_t stride() const;

    /*!
     * @brief This function returns a reference to member stride
     * @return Reference to member stride
     */
    eProsima_user_DllExport uint32_t& stride();

    /*!
     * @brief This function sets a value in member format
     * @param _format New value for member format
     */
    eProsima_user_DllExport void format(
            PixelFormatEnum _format);

    /*!
     * @brief This function returns the value of member format
     * @return Value of member format
     */
    eProsima_user_DllExport PixelFormatEnum format() const;

    /*!
     * @brief This function returns a reference to member format
     * @return Reference to member format
     */
    eProsima_user_DllExport PixelFormatEnum& format();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ImageFormatMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_width;
    uint32_t m_height;
    uint32_t m_stride;
    PixelFormatEnum m_format;

};
/*!
 * @brief This class represents the structure ImageDataMsg defined by the user in the IDL file.
 * @ingroup ImageData
 */
class ImageDataMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ImageDataMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ImageDataMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ImageDataMsg that will be copied.
     */
    eProsima_user_DllExport ImageDataMsg(
            const ImageDataMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ImageDataMsg that will be copied.
     */
    eProsima_user_DllExport ImageDataMsg(
            ImageDataMsg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ImageDataMsg that will be copied.
     */
    eProsima_user_DllExport ImageDataMsg& operator =(
            const ImageDataMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ImageDataMsg that will be copied.
     */
    eProsima_user_DllExport ImageDataMsg& operator =(
            ImageDataMsg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ImageDataMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ImageDataMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ImageDataMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ImageDataMsg& x) const;

    /*!
     * @brief This function sets a value in member cameraId
     * @param _cameraId New value for member cameraId
     */
    eProsima_user_DllExport void cameraId(
            uint32_t _cameraId);

    /*!
     * @brief This function returns the value of member cameraId
     * @return Value of member cameraId
     */
    eProsima_user_DllExport uint32_t cameraId() const;

    /*!
     * @brief This function returns a reference to member cameraId
     * @return Reference to member cameraId
     */
    eProsima_user_DllExport uint32_t& cameraId();

    /*!
     * @brief This function sets a value in member frameNumber
     * @param _frameNumber New value for member frameNumber
     */
    eProsima_user_DllExport void frameNumber(
            uint64_t _frameNumber);

    /*!
     * @brief This function returns the value of member frameNumber
     * @return Value of member frameNumber
     */
    eProsima_user_DllExport uint64_t frameNumber() const;

    /*!
     * @brief This function returns a reference to member frameNumber
     * @return Reference to member frameNumber
     */
    eProsima_user_DllExport uint64_t& frameNumber();

    /*!
     * @brief This function sets a value in member frameTag
     * @param _frameTag New value for member frameTag
     */
    eProsima_user_DllExport void frameTag(
            uint32_t _frameTag);

    /*!
     * @brief This function returns the value of member frameTag
     * @return Value of member frameTag
     */
    eProsima_user_DllExport uint32_t frameTag() const;

    /*!
     * @brief This function returns a reference to member frameTag
     * @return Reference to member frameTag
     */
    eProsima_user_DllExport uint32_t& frameTag();

    /*!
     * @brief This function sets a value in member exposureDuration
     * @param _exposureDuration New value for member exposureDuration
     */
    eProsima_user_DllExport void exposureDuration(
            double _exposureDuration);

    /*!
     * @brief This function returns the value of member exposureDuration
     * @return Value of member exposureDuration
     */
    eProsima_user_DllExport double exposureDuration() const;

    /*!
     * @brief This function returns a reference to member exposureDuration
     * @return Reference to member exposureDuration
     */
    eProsima_user_DllExport double& exposureDuration();

    /*!
     * @brief This function sets a value in member gain
     * @param _gain New value for member gain
     */
    eProsima_user_DllExport void gain(
            double _gain);

    /*!
     * @brief This function returns the value of member gain
     * @return Value of member gain
     */
    eProsima_user_DllExport double gain() const;

    /*!
     * @brief This function returns a reference to member gain
     * @return Reference to member gain
     */
    eProsima_user_DllExport double& gain();

    /*!
     * @brief This function sets a value in member readoutDurationSeconds
     * @param _readoutDurationSeconds New value for member readoutDurationSeconds
     */
    eProsima_user_DllExport void readoutDurationSeconds(
            double _readoutDurationSeconds);

    /*!
     * @brief This function returns the value of member readoutDurationSeconds
     * @return Value of member readoutDurationSeconds
     */
    eProsima_user_DllExport double readoutDurationSeconds() const;

    /*!
     * @brief This function returns a reference to member readoutDurationSeconds
     * @return Reference to member readoutDurationSeconds
     */
    eProsima_user_DllExport double& readoutDurationSeconds();

    /*!
     * @brief This function sets a value in member captureTimestampNs
     * @param _captureTimestampNs New value for member captureTimestampNs
     */
    eProsima_user_DllExport void captureTimestampNs(
            int64_t _captureTimestampNs);

    /*!
     * @brief This function returns the value of member captureTimestampNs
     * @return Value of member captureTimestampNs
     */
    eProsima_user_DllExport int64_t captureTimestampNs() const;

    /*!
     * @brief This function returns a reference to member captureTimestampNs
     * @return Reference to member captureTimestampNs
     */
    eProsima_user_DllExport int64_t& captureTimestampNs();

    /*!
     * @brief This function sets a value in member captureTimestampInProcessingClockDomainNs
     * @param _captureTimestampInProcessingClockDomainNs New value for member captureTimestampInProcessingClockDomainNs
     */
    eProsima_user_DllExport void captureTimestampInProcessingClockDomainNs(
            int64_t _captureTimestampInProcessingClockDomainNs);

    /*!
     * @brief This function returns the value of member captureTimestampInProcessingClockDomainNs
     * @return Value of member captureTimestampInProcessingClockDomainNs
     */
    eProsima_user_DllExport int64_t captureTimestampInProcessingClockDomainNs() const;

    /*!
     * @brief This function returns a reference to member captureTimestampInProcessingClockDomainNs
     * @return Reference to member captureTimestampInProcessingClockDomainNs
     */
    eProsima_user_DllExport int64_t& captureTimestampInProcessingClockDomainNs();

    /*!
     * @brief This function sets a value in member arrivalTimestampNs
     * @param _arrivalTimestampNs New value for member arrivalTimestampNs
     */
    eProsima_user_DllExport void arrivalTimestampNs(
            int64_t _arrivalTimestampNs);

    /*!
     * @brief This function returns the value of member arrivalTimestampNs
     * @return Value of member arrivalTimestampNs
     */
    eProsima_user_DllExport int64_t arrivalTimestampNs() const;

    /*!
     * @brief This function returns a reference to member arrivalTimestampNs
     * @return Reference to member arrivalTimestampNs
     */
    eProsima_user_DllExport int64_t& arrivalTimestampNs();

    /*!
     * @brief This function sets a value in member processingStartTimestampNs
     * @param _processingStartTimestampNs New value for member processingStartTimestampNs
     */
    eProsima_user_DllExport void processingStartTimestampNs(
            int64_t _processingStartTimestampNs);

    /*!
     * @brief This function returns the value of member processingStartTimestampNs
     * @return Value of member processingStartTimestampNs
     */
    eProsima_user_DllExport int64_t processingStartTimestampNs() const;

    /*!
     * @brief This function returns a reference to member processingStartTimestampNs
     * @return Reference to member processingStartTimestampNs
     */
    eProsima_user_DllExport int64_t& processingStartTimestampNs();

    /*!
     * @brief This function sets a value in member temperatureDegC
     * @param _temperatureDegC New value for member temperatureDegC
     */
    eProsima_user_DllExport void temperatureDegC(
            double _temperatureDegC);

    /*!
     * @brief This function returns the value of member temperatureDegC
     * @return Value of member temperatureDegC
     */
    eProsima_user_DllExport double temperatureDegC() const;

    /*!
     * @brief This function returns a reference to member temperatureDegC
     * @return Reference to member temperatureDegC
     */
    eProsima_user_DllExport double& temperatureDegC();

    /*!
     * @brief This function copies the value in member imageFormat
     * @param _imageFormat New value to be copied in member imageFormat
     */
    eProsima_user_DllExport void imageFormat(
            const ImageFormatMsg& _imageFormat);

    /*!
     * @brief This function moves the value in member imageFormat
     * @param _imageFormat New value to be moved in member imageFormat
     */
    eProsima_user_DllExport void imageFormat(
            ImageFormatMsg&& _imageFormat);

    /*!
     * @brief This function returns a constant reference to member imageFormat
     * @return Constant reference to member imageFormat
     */
    eProsima_user_DllExport const ImageFormatMsg& imageFormat() const;

    /*!
     * @brief This function returns a reference to member imageFormat
     * @return Reference to member imageFormat
     */
    eProsima_user_DllExport ImageFormatMsg& imageFormat();
    /*!
     * @brief This function copies the value in member videoCodecName
     * @param _videoCodecName New value to be copied in member videoCodecName
     */
    eProsima_user_DllExport void videoCodecName(
            const std::string& _videoCodecName);

    /*!
     * @brief This function moves the value in member videoCodecName
     * @param _videoCodecName New value to be moved in member videoCodecName
     */
    eProsima_user_DllExport void videoCodecName(
            std::string&& _videoCodecName);

    /*!
     * @brief This function returns a constant reference to member videoCodecName
     * @return Constant reference to member videoCodecName
     */
    eProsima_user_DllExport const std::string& videoCodecName() const;

    /*!
     * @brief This function returns a reference to member videoCodecName
     * @return Reference to member videoCodecName
     */
    eProsima_user_DllExport std::string& videoCodecName();
    /*!
     * @brief This function sets a value in member imageBufferSize
     * @param _imageBufferSize New value for member imageBufferSize
     */
    eProsima_user_DllExport void imageBufferSize(
            uint32_t _imageBufferSize);

    /*!
     * @brief This function returns the value of member imageBufferSize
     * @return Value of member imageBufferSize
     */
    eProsima_user_DllExport uint32_t imageBufferSize() const;

    /*!
     * @brief This function returns a reference to member imageBufferSize
     * @return Reference to member imageBufferSize
     */
    eProsima_user_DllExport uint32_t& imageBufferSize();

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::vector<uint8_t>& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::vector<uint8_t>&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::vector<uint8_t>& data();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ImageDataMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_cameraId;
    uint64_t m_frameNumber;
    uint32_t m_frameTag;
    double m_exposureDuration;
    double m_gain;
    double m_readoutDurationSeconds;
    int64_t m_captureTimestampNs;
    int64_t m_captureTimestampInProcessingClockDomainNs;
    int64_t m_arrivalTimestampNs;
    int64_t m_processingStartTimestampNs;
    double m_temperatureDegC;
    ImageFormatMsg m_imageFormat;
    std::string m_videoCodecName;
    uint32_t m_imageBufferSize;
    std::vector<uint8_t> m_data;

};

#endif // _FAST_DDS_GENERATED_IMAGEDATA_H_

