// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SupremeHelloWorld.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SupremeHelloWorld.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

HelloWorld::HelloWorld()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64f6106c
    m_index = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@5891e32e
    m_message ="";

}

HelloWorld::~HelloWorld()
{


}

HelloWorld::HelloWorld(
        const HelloWorld& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
}

HelloWorld::HelloWorld(
        HelloWorld&& x) noexcept 
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
}

HelloWorld& HelloWorld::operator =(
        const HelloWorld& x)
{

    m_index = x.m_index;
    m_message = x.m_message;

    return *this;
}

HelloWorld& HelloWorld::operator =(
        HelloWorld&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);

    return *this;
}

bool HelloWorld::operator ==(
        const HelloWorld& x) const
{

    return (m_index == x.m_index && m_message == x.m_message);
}

bool HelloWorld::operator !=(
        const HelloWorld& x) const
{
    return !(*this == x);
}

size_t HelloWorld::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t HelloWorld::getCdrSerializedSize(
        const HelloWorld& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void HelloWorld::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_message.c_str();

}

void HelloWorld::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void HelloWorld::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t HelloWorld::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& HelloWorld::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void HelloWorld::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void HelloWorld::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& HelloWorld::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& HelloWorld::message()
{
    return m_message;
}

size_t HelloWorld::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool HelloWorld::isKeyDefined()
{
    return false;
}

void HelloWorld::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

Arrays::Arrays()
{
    // m_a com.eprosima.idl.parser.typecode.ArrayTypeCode@4516af24
    memset(&m_a, 0, (10) * 1);
    // m_b com.eprosima.idl.parser.typecode.SequenceTypeCode@4ae82894


}

Arrays::~Arrays()
{


}

Arrays::Arrays(
        const Arrays& x)
{
    m_a = x.m_a;
    m_b = x.m_b;
}

Arrays::Arrays(
        Arrays&& x) noexcept 
{
    m_a = std::move(x.m_a);
    m_b = std::move(x.m_b);
}

Arrays& Arrays::operator =(
        const Arrays& x)
{

    m_a = x.m_a;
    m_b = x.m_b;

    return *this;
}

Arrays& Arrays::operator =(
        Arrays&& x) noexcept
{

    m_a = std::move(x.m_a);
    m_b = std::move(x.m_b);

    return *this;
}

bool Arrays::operator ==(
        const Arrays& x) const
{

    return (m_a == x.m_a && m_b == x.m_b);
}

bool Arrays::operator !=(
        const Arrays& x) const
{
    return !(*this == x);
}

size_t Arrays::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t Arrays::getCdrSerializedSize(
        const Arrays& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    if ((10) > 0)
    {
        current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.b().size() > 0)
    {
        current_alignment += (data.b().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void Arrays::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a;

    scdr << m_b;

}

void Arrays::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a;

    dcdr >> m_b;
}

/*!
 * @brief This function copies the value in member a
 * @param _a New value to be copied in member a
 */
void Arrays::a(
        const std::array<char, 10>& _a)
{
    m_a = _a;
}

/*!
 * @brief This function moves the value in member a
 * @param _a New value to be moved in member a
 */
void Arrays::a(
        std::array<char, 10>&& _a)
{
    m_a = std::move(_a);
}

/*!
 * @brief This function returns a constant reference to member a
 * @return Constant reference to member a
 */
const std::array<char, 10>& Arrays::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
std::array<char, 10>& Arrays::a()
{
    return m_a;
}
/*!
 * @brief This function copies the value in member b
 * @param _b New value to be copied in member b
 */
void Arrays::b(
        const std::vector<int32_t>& _b)
{
    m_b = _b;
}

/*!
 * @brief This function moves the value in member b
 * @param _b New value to be moved in member b
 */
void Arrays::b(
        std::vector<int32_t>&& _b)
{
    m_b = std::move(_b);
}

/*!
 * @brief This function returns a constant reference to member b
 * @return Constant reference to member b
 */
const std::vector<int32_t>& Arrays::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
std::vector<int32_t>& Arrays::b()
{
    return m_b;
}

size_t Arrays::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Arrays::isKeyDefined()
{
    return false;
}

void Arrays::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

SupremeHelloWorld::SupremeHelloWorld()
{
    // m_hello com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@70b0b186

    // m_array com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@ba8d91c

    // m_msg com.eprosima.idl.parser.typecode.StringTypeCode@7364985f
    m_msg ="";

}

SupremeHelloWorld::~SupremeHelloWorld()
{



}

SupremeHelloWorld::SupremeHelloWorld(
        const SupremeHelloWorld& x)
{
    m_hello = x.m_hello;
    m_array = x.m_array;
    m_msg = x.m_msg;
}

SupremeHelloWorld::SupremeHelloWorld(
        SupremeHelloWorld&& x) noexcept 
{
    m_hello = std::move(x.m_hello);
    m_array = std::move(x.m_array);
    m_msg = std::move(x.m_msg);
}

SupremeHelloWorld& SupremeHelloWorld::operator =(
        const SupremeHelloWorld& x)
{

    m_hello = x.m_hello;
    m_array = x.m_array;
    m_msg = x.m_msg;

    return *this;
}

SupremeHelloWorld& SupremeHelloWorld::operator =(
        SupremeHelloWorld&& x) noexcept
{

    m_hello = std::move(x.m_hello);
    m_array = std::move(x.m_array);
    m_msg = std::move(x.m_msg);

    return *this;
}

bool SupremeHelloWorld::operator ==(
        const SupremeHelloWorld& x) const
{

    return (m_hello == x.m_hello && m_array == x.m_array && m_msg == x.m_msg);
}

bool SupremeHelloWorld::operator !=(
        const SupremeHelloWorld& x) const
{
    return !(*this == x);
}

size_t SupremeHelloWorld::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += HelloWorld::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Arrays::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t SupremeHelloWorld::getCdrSerializedSize(
        const SupremeHelloWorld& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += HelloWorld::getCdrSerializedSize(data.hello(), current_alignment);
    current_alignment += Arrays::getCdrSerializedSize(data.array(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg().size() + 1;


    return current_alignment - initial_alignment;
}

void SupremeHelloWorld::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_hello;
    scdr << m_array;
    scdr << m_msg.c_str();

}

void SupremeHelloWorld::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_hello;
    dcdr >> m_array;
    dcdr >> m_msg;
}

/*!
 * @brief This function copies the value in member hello
 * @param _hello New value to be copied in member hello
 */
void SupremeHelloWorld::hello(
        const HelloWorld& _hello)
{
    m_hello = _hello;
}

/*!
 * @brief This function moves the value in member hello
 * @param _hello New value to be moved in member hello
 */
void SupremeHelloWorld::hello(
        HelloWorld&& _hello)
{
    m_hello = std::move(_hello);
}

/*!
 * @brief This function returns a constant reference to member hello
 * @return Constant reference to member hello
 */
const HelloWorld& SupremeHelloWorld::hello() const
{
    return m_hello;
}

/*!
 * @brief This function returns a reference to member hello
 * @return Reference to member hello
 */
HelloWorld& SupremeHelloWorld::hello()
{
    return m_hello;
}
/*!
 * @brief This function copies the value in member array
 * @param _array New value to be copied in member array
 */
void SupremeHelloWorld::array(
        const Arrays& _array)
{
    m_array = _array;
}

/*!
 * @brief This function moves the value in member array
 * @param _array New value to be moved in member array
 */
void SupremeHelloWorld::array(
        Arrays&& _array)
{
    m_array = std::move(_array);
}

/*!
 * @brief This function returns a constant reference to member array
 * @return Constant reference to member array
 */
const Arrays& SupremeHelloWorld::array() const
{
    return m_array;
}

/*!
 * @brief This function returns a reference to member array
 * @return Reference to member array
 */
Arrays& SupremeHelloWorld::array()
{
    return m_array;
}
/*!
 * @brief This function copies the value in member msg
 * @param _msg New value to be copied in member msg
 */
void SupremeHelloWorld::msg(
        const std::string& _msg)
{
    m_msg = _msg;
}

/*!
 * @brief This function moves the value in member msg
 * @param _msg New value to be moved in member msg
 */
void SupremeHelloWorld::msg(
        std::string&& _msg)
{
    m_msg = std::move(_msg);
}

/*!
 * @brief This function returns a constant reference to member msg
 * @return Constant reference to member msg
 */
const std::string& SupremeHelloWorld::msg() const
{
    return m_msg;
}

/*!
 * @brief This function returns a reference to member msg
 * @return Reference to member msg
 */
std::string& SupremeHelloWorld::msg()
{
    return m_msg;
}

size_t SupremeHelloWorld::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool SupremeHelloWorld::isKeyDefined()
{
    return false;
}

void SupremeHelloWorld::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
