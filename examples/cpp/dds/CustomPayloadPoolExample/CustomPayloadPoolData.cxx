// Copyright 2023 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CustomPayloadPoolData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CustomPayloadPoolData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define CustomPayloadPoolData_max_cdr_typesize 264ULL;
#define CustomPayloadPoolData_max_key_cdr_typesize 0ULL;

CustomPayloadPoolData::CustomPayloadPoolData()
{
    // unsigned long m_index
    m_index = 0;
    // string m_message
    m_message ="";

}

CustomPayloadPoolData::~CustomPayloadPoolData()
{


}

CustomPayloadPoolData::CustomPayloadPoolData(
        const CustomPayloadPoolData& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
}

CustomPayloadPoolData::CustomPayloadPoolData(
        CustomPayloadPoolData&& x) noexcept
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
}

CustomPayloadPoolData& CustomPayloadPoolData::operator =(
        const CustomPayloadPoolData& x)
{

    m_index = x.m_index;
    m_message = x.m_message;

    return *this;
}

CustomPayloadPoolData& CustomPayloadPoolData::operator =(
        CustomPayloadPoolData&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);

    return *this;
}

bool CustomPayloadPoolData::operator ==(
        const CustomPayloadPoolData& x) const
{

    return (m_index == x.m_index && m_message == x.m_message);
}

bool CustomPayloadPoolData::operator !=(
        const CustomPayloadPoolData& x) const
{
    return !(*this == x);
}

size_t CustomPayloadPoolData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CustomPayloadPoolData_max_cdr_typesize;
}

size_t CustomPayloadPoolData::getCdrSerializedSize(
        const CustomPayloadPoolData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void CustomPayloadPoolData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_message.c_str();

}

void CustomPayloadPoolData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void CustomPayloadPoolData::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t CustomPayloadPoolData::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& CustomPayloadPoolData::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void CustomPayloadPoolData::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void CustomPayloadPoolData::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& CustomPayloadPoolData::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& CustomPayloadPoolData::message()
{
    return m_message;
}


size_t CustomPayloadPoolData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CustomPayloadPoolData_max_key_cdr_typesize;
}

bool CustomPayloadPoolData::isKeyDefined()
{
    return false;
}

void CustomPayloadPoolData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
